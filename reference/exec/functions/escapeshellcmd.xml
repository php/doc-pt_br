<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1ea4e4f5769f1a173303f95074a91e8537f65133 Maintainer: leonardolara Status: ready --><!-- CREDITS: fernandoc,leonardolara -->
<!-- splitted from ./en/functions/exec.xml, last change in rev 1.2 -->
 <refentry xml:id="function.escapeshellcmd" xmlns="http://docbook.org/ns/docbook">
  <refnamediv>
   <refname>escapeshellcmd</refname>
   <refpurpose>Escapa metacaracteres shell</refpurpose>
  </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>escapeshellcmd</methodname>
    <methodparam><type>string</type><parameter>command</parameter></methodparam>
   </methodsynopsis>
  <para>
   <function>escapeshellcmd</function> escapa qualquer caractere em uma string
   que possa ser utilizada para enganar um comando shell para executar
   comandos arbritários. Esta função deve ser utilizada para ter certeza
   que quaisquer dados vindos do usuário são escapado antes que
   estes dados sejam passados para as funções <function>exec</function> ou
   <function>system</function>, ou para <link
   linkend="language.operators.execution">o operador
   crase</link>.
  </para>
  <para>
   Os seguintes caracteres são precedidos por uma barra invertida:
   <literal>&amp;#;`|*?~&lt;&gt;^()[]{}$\</literal>, <literal>\x0A</literal>
   e <literal>\xFF</literal>. <literal>'</literal> e <literal>"</literal>
   são escapados apenas se não estiverem em pares. No windows, todos estes caracteres
   mais <literal>%</literal> e <literal>!</literal> são precedidos por um circunflexo
   (<literal>^</literal>).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>command</parameter></term>
     <listitem>
     <para>
      O comando que será escapado.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   A string escapada.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
   <title>Exemplo de <function>escapeshellcmd</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Permitindo número arbitrário de argumentos intencionalmente.
$command = './configure '.$_POST['configure_options'];

$escaped_command = escapeshellcmd($command);

system($escaped_command);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  <warning xmlns="http://docbook.org/ns/docbook">
   <para>
    <function>escapeshellcmd</function> should be used on the whole
    command string, and it still allows the attacker to pass
    arbitrary number of arguments. For escaping a single argument
    <function>escapeshellarg</function> should be used instead.
   </para>
  </warning>
  <warning xmlns="http://docbook.org/ns/docbook">
   <para>
    Spaces will not be escaped by <function>escapeshellcmd</function>
    which can be problematic on Windows with paths like:
    <literal>C:\Program Files\ProgramName\program.exe</literal>.
    This can be mitigated using the following code snippet:
    <programlisting role="php">
<![CDATA[
<?php
$cmd = preg_replace('`(?<!^) `', '^ ', escapeshellcmd($cmd));
]]>
    </programlisting>
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>escapeshellarg</function></member>
    <member><function>exec</function></member>
    <member><function>popen</function></member>
    <member><function>system</function></member>
    <member><link linkend="language.operators.execution">backtick operator</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
