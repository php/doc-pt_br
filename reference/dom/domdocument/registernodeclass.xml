<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bb47f4433ac38d890373169666e82609d2ab0848 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>Registra uma classe estendida usada para criar um tipo de nó base</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="DOMDocument">
   <modifier>public</modifier> <type>bool</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>baseClass</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter>extendedClass</parameter></methodparam>
  </methodsynopsis>

  <para>
   Este método permite registrar sua própria classe DOM estendida para ser usada
   posteriormente pela extensão PHP DOM.
  </para>
  <para>
   Este método não faz parte do padrão DOM.
  </para>
  <caution>
   <simpara>
    O construtor dos objetos das classes de nó registradas não é chamado.
   </simpara>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseClass</parameter></term>
     <listitem>
      <para>
       A classe DOM que você deseja estender. Você pode encontrar uma lista dessas
       classes na <link linkend="book.dom">introdução ao capítulo</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedClass</parameter></term>
     <listitem>
      <para>
       O nome da sua classe estendida. Se &null; for fornecido, qualquer classe
       previamente registrada estendendo <parameter>baseClass</parameter> será
       removida.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Adicionando um novo método a DOMElement para facilitar nosso código</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) {
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) {
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// A partir de agora, adicionar um elemento a outro custa apenas uma chamada de método!
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Recuperando elementos como uma classe personalizada</title>
    <programlisting role="php">
<![CDATA[
<?php
class myElement extends DOMElement {
    public function __toString() {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument;
$doc->loadXML("<root><element><child>text in child</child></element></root>");
$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// E aproveite o método __toString..
echo $element;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
text in child
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Recuperando o documento proprietário</title>
    <para>
     Ao instanciar um <classname>DOMDocument</classname> personalizado, a
     propriedade <varname>ownerDocument</varname> se referirá à classe instanciada.
     No entanto, se todas as referências a essa classe forem removidas,
     ela será destruída e um novo <classname>DOMDocument</classname> será
     criado. Por esse motivo, você pode usar
     <function>DOMDocument::registerNodeClass</function> com
     <classname>DOMDocument</classname>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMDocument extends DOMDocument {
}

class MyOtherDOMDocument extends DOMDocument {
}

// Crie MyDOMDocument com algum XML
$doc = new MyDOMDocument;
$doc->loadXML("<root><element><child>text in child</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// O proprietário atual do nó é MyDOMDocument
var_dump(get_class($child->ownerDocument));
// MyDOMDocument é destruído
unset($doc);
// E uma nova instância DOMDocument é criada
var_dump(get_class($child->ownerDocument));

// Importe um nó de MyDOMDocument
$newdoc = new MyOtherDOMDocument;
$child = $newdoc->importNode($child);

// Registre DOMDocument personalizado
$newdoc->registerNodeClass("DOMDocument", "MyOtherDOMDocument");

var_dump(get_class($child->ownerDocument));
unset($doc);
// Nova instância MyOtherDOMDocument é criada
var_dump(get_class($child->ownerDocument));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "MyDOMDocument"
string(11) "DOMDocument"
string(18) "MyOtherDOMDocument"
string(18) "MyOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="domdocument.registernodeclass.example.transient">
    <title>Objetos personalizados são transitórios</title>
    <caution>
     <simpara>
      Objetos das classes de nó registradas são transitórios, ou seja, eles são
      destruídos quando não são mais referenciados pelo código PHP e recriados
      ao serem recuperados novamente. Isso implica que os valores das propriedades personalizadas serão
      perdidos após a recriação.
     </simpara>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMElement extends DOMElement
{
    public $myProp = 'default value';
}

$doc = new DOMDocument();
$doc->registerNodeClass('DOMElement', 'MyDOMElement');

$node = $doc->createElement('a');
$node->myProp = 'modified value';
$doc->appendChild($node);

echo $doc->childNodes[0]->myProp, PHP_EOL;
unset($node);
echo $doc->childNodes[0]->myProp, PHP_EOL;
?>]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
modified value
default value
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
