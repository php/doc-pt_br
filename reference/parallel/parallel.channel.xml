<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d9ecfba6ad07e4e0b1b13ed1f0592f09d2e2f5c9 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->

<phpdoc:classref xml:id="class.parallel-channel" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe parallel\Channel</title>
 <titleabbrev>parallel\Channel</titleabbrev>

 <partintro>
  <section>
    <title>Channels sem buffer</title>
    <para>
     Um channel sem buffer bloqueará chamadas para <methodname>parallel\Channel::send</methodname> até que haja um receptor e bloqueará chamadas
     para <methodname>parallel\Channel::recv</methodname> até que haja um remetente. Isso significa que um channel sem buffer não é apenas uma forma de compartilhar dados entre tarefas,
     mas também um método simples de sincronização.
    </para>
    <para>
     Um channel sem buffer é a maneira mais rápida de compartilhar dados entre tarefas, exigindo menos cópias.
    </para>
  </section>

  <section>
    <title>Channels em buffer</title>
    <para>
     m canal em buffer não bloqueará chamadas para <methodname>parallel\Channel::send</methodname> até que a capacidade seja atingida, chamadas para
     <methodname>parallel\Channel::recv</methodname> serão bloqueadas até que haja dados no buffer.
    </para>
  </section>

  <section>
    <title>Closures sobre Channels</title>
    <para>
     Uma característica poderosa dos channels paralelos é que eles permitem a troca de closures entre tarefas (e tempos de execução).
    </para>
    <para>
     Quando um closure é enviado através de um channel, o closure é armazenado em buffer, isso não altera o buffer do channel que transmite o closure,
     mas afeta o escopo estático dentro do closure: O mesmo closure enviado para tempos de execução diferentes, ou o mesmo tempo de execução,
     não compartilharão seu escopo estático.
    </para>
    <para>
     Isso significa que sempre que for executado um closure transmitido por um channel, o estado estático será o mesmo de quando o closure foi armazenado em buffer.
    </para>
  </section>

  <section>
   <title>Channels Anônimos</title>
   <para>
    O construtor de channel anônimo permite ao programador evitar atribuir nomes a cada channel: parallel gerará um nome exclusivo para
    channels anônimos.
   </para>
  </section>

  <section xml:id="parallel-channel.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>parallel\Channel</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>parallel\Channel</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Construtor Anônimo</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='anonymous']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Acesso</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='access']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Compartilhamento</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='sharing']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Encerramento</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-channel')/db:refentry/db:refsect1[@audience='close']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Constante para Buffer Infinito</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <varname>Infinite</varname>
    </fieldsynopsis>

   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

 &reference.parallel.parallel.channel.construct;
 &reference.parallel.parallel.channel.make;
 &reference.parallel.parallel.channel.open;
 &reference.parallel.parallel.channel.recv;
 &reference.parallel.parallel.channel.send;
 &reference.parallel.parallel.channel.close;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
