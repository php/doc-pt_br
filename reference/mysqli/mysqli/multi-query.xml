<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d470f625f96a83d65464619297cccad7ce46e743 Maintainer: felipe Status: ready --><!-- CREDITS: felipe,leonardolara -->
<refentry xml:id="mysqli.multi-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysqli::multi_query</refname>
  <refname>mysqli_multi_query</refname>
  <refpurpose>Executa uma ou mais consultas no banco de dados</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <methodsynopsis role="mysqli">
   <modifier>public</modifier> <type>bool</type><methodname>mysqli::multi_query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type>bool</type><methodname>mysqli_multi_query</methodname>
   <methodparam><type>mysqli</type><parameter>mysql</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   Executa uma ou múltiplas consultas que são concatenadas com ponto-e-vírgula.
  </para>
  &mysqli.sqlinjection.warning;
  <para>
   Consultas são enviadas de forma assíncrona em uma única chamada ao banco, mas o
   banco de dados processa-as sequencialmente.
   <methodname>mysqli_multi_query</methodname> espera pela finalização da primeira
   consulta antes de retornar o controle ao PHP. O servidor MySQL então processará
   a próxima consulta na sequência. Uma vez que o resultado seguinte ficar pronto, o MySQL esperará
   pela próxima execução de <function>mysqli_next_result</function> pelo PHP.
  </para>
  <para>
   É recomendado usar
   <link linkend="control-structures.do.while">do-while</link> para processar consultas
   múltiplas. A conexão estará ocupada enquanto todas as consultas tiverem concluído e
   seus resultados enviados ao PHP. Nenhuma outra declaração pode ser emitida na
   mesma conexão até que todas as consultas sejam processadas.
   Para proceder à consulta seguinte, use
   <function>mysqli_next_result</function>. Se a consulta seguinte ainda não estiver pronta,
   mysqli esperará pela resposta do servidor MySQL.
   Para verificar se há mais resultados,
   use <function>mysqli_more_results</function>.
  </para>
  <para>
   Para consultas que produzem um conjnto de resultados, como em
   <literal>SELECT, SHOW, DESCRIBE</literal> ou
   <literal>EXPLAIN</literal>,
   <function>mysqli_use_result</function> ou <function>mysqli_store_result</function>
   podem ser usadas para recuperar o conjunto. Para consultas que não produzem um
   conjunto de resultados, as mesmas funções podem ser usadas para recuperar informação como
   o número de linhas afetadas.
  </para>
  <tip>
   <para>
    Executar declarações <literal>CALL</literal> para procedimentos armazenados pode
    produzir múltiplos conjuntos de resultados. Se o procedimento armazenado contiver
    declarações <literal>SELECT</literal>, os conjuntos são retornados na
    ordem em que são produzidos enquando o procedimento é executado. Em geral, a função que
    chama não sabe quantos conjuntos de resultados um procedimento irá retornar e deve
    estar preparada para recuperar múltiplos conjuntos. O resultado final do procedimento
    é um resultado de estado que não inclui nenhum conjunto. O estado indica se
    o procedimento teve sucesso ou se ocorreu um erro.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &mysqli.link.description;
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Uma string contendo as consultas que serão executadas.
       Consultas múltiplas devem ser separadas por ponto-e-vírgula (;).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &false; se a primeira consulta falhar.
   Para recuperar erros subsequentes de outras consultas, deve-se chamar
   <function>mysqli_next_result</function> primeiro.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &mysqli.conditionalexception;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <methodname>mysqli::multi_query</methodname></title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php

mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

$query = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* executa as consultas múltiplas */
$mysqli->multi_query($query);
do {
    /* store the result set in PHP */
    if ($result = $mysqli->store_result()) {
        while ($row = $result->fetch_row()) {
            printf("%s\n", $row[0]);
        }
    }
    /* print divider */
    if ($mysqli->more_results()) {
        printf("-----------------\n");
    }
} while ($mysqli->next_result());
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php

mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

$query = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* executa as consultas múltiplas */
mysqli_multi_query($link, $query);
do {
    /* store the result set in PHP */
    if ($result = mysqli_store_result($link)) {
        while ($row = mysqli_fetch_row($result)) {
            printf("%s\n", $row[0]);
        }
    }
    /* print divider */
    if (mysqli_more_results($link)) {
        printf("-----------------\n");
    }
} while (mysqli_next_result($link));
]]>
   </programlisting>
   &examples.outputs.similar;
   <screen>
<![CDATA[
my_user@localhost
-----------------
Amersfoort
Maastricht
Dordrecht
Leiden
Haarlemmermeer
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysqli_query</function></member>
    <member><function>mysqli_use_result</function></member>
    <member><function>mysqli_store_result</function></member>
    <member><function>mysqli_next_result</function></member>
    <member><function>mysqli_more_results</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
