<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 743f97dd06d53872e4f498141f57950afda34659 Maintainer: leonardolara Status: ready -->
<refentry xml:id="collator.getsortkey" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Collator::getSortKey</refname>
  <refname>collator_get_sort_key</refname>
  <refpurpose>Obt√©m a chave de ordena√ß√£o de uma string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>
   &style.oop;
  </para>
  <methodsynopsis role="Collator">
   <modifier>public</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>Collator::getSortKey</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   &style.procedural;
  </para>
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>collator_get_sort_key</methodname>
   <methodparam><type>Collator</type><parameter>object</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retorna a chave de agrupamento de uma string.
   Chaves de agrupamento podem ser comparadas diretamente ao inv√©s de se comparar strings, mas s√£o
   espec√≠ficas de implementa√ß√£o e podem mudar entre vers√µes de biblioteca ICU. Chaver de ordena√ß√£o geralmente s√£o
   √∫teis apenas em bancos de dados ou em outras circunst√¢ncias onde chamadas a fun√ß√µes s√£o extremamente custosas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       Objeto de <classname>Collator</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string a partir da qual a chave ser√° produzida.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>Retorna a chave de agrupamento para a string, &return.falseforfailure;.</para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>collator_get_sort_key</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$s1 = 'Hello';

$coll = collator_create('en_US');
$res  = collator_get_sort_key($coll, $s1);

echo bin2hex($res);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
     3832404046010901dc08
    </screen>
   </example>
  </para>

   <para>
    <example>
     <title>Exemplo de <function>Collator::getSortKey</function> com <function>usort</function></title>
     <programlisting role="php">
<![CDATA[
<?php

$data = [
    [ 'name' => 'üá≥üá± Derick Rethans', 'linked_account' => 'https://phpc.social/users/derickr' ],
    [ 'name' => 'Elephpant', 'linked_account' => 'https://phpc.social/phpc' ],
    [ 'name' => 'üá´üá∑ Marcus Bointon', 'linked_account' => 'https://phpc.social/users/Synchro' ],
];

/* Cria o ordenadorr */
$col = new Collator('en');

/* Ordena letras mai√∫sculas antes de min√∫sculas */
$col->setAttribute(Collator::CASE_FIRST, Collator::UPPER_FIRST);

/* Usa uma fun√ß√£o definida pelo usu√°rio com ordena√ß√£o, removendo os emojis */

usort(
    $data,
    function($a, $b) use ($col) {
        /* Remove a classe de caracteres 'S' (os s√≠mbolos) e espa√ßos em branco
         * (com trim) */
        $aName = trim(preg_replace('/\p{S}+/u', '', $a['name']));
        $bName = trim(preg_replace('/\p{S}+/u', '', $b['name']));

        /* Cria a chave de ordena√ß√£o */
        $aKey = $col->getSortKey($aName);
        $bKey = $col->getSortKey($bName);

        /* Usa a chave de ordena√ß√£o para sinalizar que elementos s√£o ordenados primeiro */
        return $aKey <=> $bKey;
    }
);

var_dump($data);
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
 array(3) {
   [0] =>
   array(2) {
     'name' =>
     string(25) "üá≥üá± Derick Rethans"
     'linked_account' =>
     string(33) "https://phpc.social/users/derickr"
   }
   [1] =>
   array(2) {
     'name' =>
     string(9) "Elephpant"
     'linked_account' =>
     string(24) "https://phpc.social/phpc"
   }
   [2] =>
   array(2) {
     'name' =>
     string(25) "üá´üá∑ Marcus Bointon"
     'linked_account' =>
     string(33) "https://phpc.social/users/Synchro"
   }
 }
     </screen>
    </example>
   </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>collator_sort</function></member>
    <member><function>collator_sort_with_sort_keys</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
