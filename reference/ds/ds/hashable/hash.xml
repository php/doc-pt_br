<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: dd07341fae2c414adc1f700be0890ff32e8daab4 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->

<refentry xml:id="ds-hashable.hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ds\Hashable::hash</refname>
  <refpurpose>Retorna um valor escalar a ser usado como valor de hash</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>abstract</modifier> <modifier>public</modifier> <type>mixed</type><methodname>Ds\Hashable::hash</methodname>
   <void />
  </methodsynopsis>
  <para>
    Retorna um valor escalar a ser usado como valor de hash dos objetos.
  </para>
  <para>
    Embora o valor de hash não defina igualdade, todos os objetos que são iguais de acordo com <function>Ds\Hashable::equals</function>
    devem ter o mesmo valor de hash. Os valores de hash de objetos iguais não precisam ser exclusivos, por exemplo,
    você poderia simplesmente retornar &true; para todos os objetos e nada quebraria - a única
    implicação seria que as tabelas de hash se transformariam em listas encadeadas porque todos
    os seus objetos seriam hashados para o mesmo bucket. Portanto, é muito importante
    escolher um bom valor de hash, como um ID ou endereço de e-mail.
 </para>

  <para>
    Este método permite que objetos sejam usados como chaves em estruturas como
    <classname>Ds\Map</classname> e <classname>Ds\Set</classname>, ou qualquer
    outra estrutura de pesquisa que honre esta interface.
  </para>

  <caution>
    <para>
        Não escolha um valor que possa mudar dentro do objeto, como uma propriedade pública.
        As consultas de tabela de hash falhariam porque o hash mudou.
    </para>
  </caution>

  <caution>
    <para>
        Todos os objetos que são iguais devem ter o mesmo valor de hash.
    </para>
  </caution>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    Um valor escalar a ser usado como valor de hash deste objeto.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>Ds\Hashable::hash</function> exemplo</title>
   <programlisting role="php">
<![CDATA[
<?php
class HashableObject implements \Ds\Hashable
{
    private $name;
    private $email;

    public function __construct($name, $email)
    {
        $this->name  = $name;
        $this->email = $email;
    }

    /**
     * Should return the same value for all equal objects, but doesn't have to
     * be unique. This value will not be used to determine equality.
     */
    public function hash()
    {
        return $this->email;
    }

    /**
     * This determines equality, usually during a hash table lookup to determine
     * if the bucket's key matches the lookup key. The hash has to be equal if
     * the objects are equal, otherwise this determination wouldn't be reached.
     */
    public function equals($obj): bool
    {
        return $this->name  === $obj->name
            && $this->email === $obj->email;
    }
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
