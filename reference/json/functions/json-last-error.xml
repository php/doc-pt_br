<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: willian-rosa Status: ready --><!-- CREDITS: Jefersson Nathan,willian-rosa -->
<refentry xml:id="function.json-last-error" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_last_error</refname>
  <refpurpose>Retorna o último erro ocorrido</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>json_last_error</methodname>
   <void />
  </methodsynopsis>
  <para>
   Retorna o erro (se houver) ocorrido durante a última codificação/decodificação JSON,
   que não especificou <constant>JSON_THROW_ON_ERROR</constant>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um inteiro, o valor pode ser uma das seguintes
   constantes:
  </para>
  <table>
   <title>JSON códigos de erro </title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Constante</entry>
      <entry>Significado</entry>
      <entry>Disponibilidade</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><constant>JSON_ERROR_NONE</constant></entry>
      <entry>Não ocorreu nenhum erro</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_DEPTH</constant></entry>
      <entry>A profundidade máxima da pilha foi excedida</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_STATE_MISMATCH</constant></entry>
      <entry>JSON inválido ou mal formado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_CTRL_CHAR</constant></entry>
      <entry>Erro de caractere de controle, possivelmente codificado incorretamente</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_SYNTAX</constant></entry>
      <entry>Erro de sintaxe</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UTF8</constant></entry>
      <entry>Caracteres UTF-8 malformados, possivelmente codificados incorretamente</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_RECURSION</constant></entry>
      <entry>Uma ou mais referências recursivas no valor a ser codificado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_INF_OR_NAN</constant></entry>
      <entry>
       Um ou mais valores
       <link linkend="language.types.float.nan"><constant>NAN</constant></link>
       ou <link linkend="function.is-infinite"><constant>INF</constant></link>
       no valor a ser codificado
      </entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UNSUPPORTED_TYPE</constant></entry>
      <entry>Fornecido um valor de um tipo que não pode ser codificado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant></entry>
      <entry>Fornecido um nome de propriedade que não pode ser codificado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UTF16</constant></entry>
      <entry>Caracteres UTF-16 malformados, possivelmente codificados incorretamente</entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>json_last_error</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Uma string json válida
$json[] = '{"Organização": "Time de Documentação PHP"}';

// Uma string json inválida que causará uma sintaxe
// erro, neste caso usamos ' em vez de " para cotação
$json[] = "{'Organização': 'Time de Documentação PHP'}";


foreach ($json as $string) {
    echo 'Decodificando: ' . $string;
    json_decode($string);

    switch (json_last_error()) {
        case JSON_ERROR_NONE:
            echo ' - Sem Erros';
        break;
        case JSON_ERROR_DEPTH:
            echo ' - Profundidade máxima da pilha foi excedida';
        break;
        case JSON_ERROR_STATE_MISMATCH:
            echo ' - subfluxo ou os modos não combinam';
        break;
        case JSON_ERROR_CTRL_CHAR:
            echo ' - Caractere de controle inesperado encontrado';
        break;
        case JSON_ERROR_SYNTAX:
            echo ' - Erro de sintaxe, JSON malformado';
        break;
        case JSON_ERROR_UTF8:
            echo ' - Caracteres UTF-8 malformados, possivelmente codificados incorretamente';
        break;
        default:
            echo ' - Erro desconhecido';
        break;
    }

    echo PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Decodificando: {"Organização": "Time de Documentação PHP"} - Sem erros
Decodificando: {'Organização': 'Time de Documentação PHP'} - Erro de sintaxe, Json mal formatado
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>json_last_error</function> com <function>json_encode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Uma sequência UTF8 inválida
$text = "\xB1\x31";

$json  = json_encode($text);
$error = json_last_error();

var_dump($json, $error === JSON_ERROR_UTF8);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "null"
bool(true)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>json_last_error</function> and <constant>JSON_THROW_ON_ERROR</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
// Uma sequência UTF8 inválida que causa JSON_ERROR_UTF8
json_encode("\xB1\x31");

// O seguinte não causa um erro JSON
json_encode('okay', JSON_THROW_ON_ERROR);

// O estado de erro global não foi alterado pelo antigo json_encode()
var_dump(json_last_error() === JSON_ERROR_UTF8);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_last_error_msg</function></member>
    <member><function>json_decode</function></member>
    <member><function>json_encode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
