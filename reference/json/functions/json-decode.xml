<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ce1856e7b95807615565d2f1427582e107c450a9 Maintainer: leonardolara Status: ready --><!-- CREDITS: felipe,willian-rosa,leonardolara -->
<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>Decodifica uma string JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>bool</type><type>null</type></type><parameter>associative</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Recebe uma string codificada em JSON e converte em um valor do PHP.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       A <type>string</type> <parameter>json</parameter> a ser decodificada.
      </para>
      <para>
       Esta função funciona apenas com strings codificadas em UTF-8.
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>associative</parameter></term>
     <listitem>
      <para>
       Quando &true;, objetos JSON serão retornados como
       &array;s associativo; quando &false;, objetos JSON serão retornados como &object;s.
       Quando &null;, objetos JSON serão retornados como &array;s ou
       &object;s dependendo se <parameter>flags</parameter>
       <constant>JSON_OBJECT_AS_ARRAY</constant> estiver definida.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Profundidade máxima da estrutura que será decodificada.
       O valor deve ser maior que <literal>0</literal>,
       e menor ou igual a <literal>2147483647</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Máscara de bits de
       <constant>JSON_BIGINT_AS_STRING</constant>,
       <constant>JSON_INVALID_UTF8_IGNORE</constant>,
       <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>,
       <constant>JSON_OBJECT_AS_ARRAY</constant>,
       <constant>JSON_THROW_ON_ERROR</constant>.
       O comportamento dessas constantes é descrito na página de
       <link linkend="json.constants">constantes JSON</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o valor codificado em <parameter>json</parameter> como um tipo apropriado
   do PHP. Valores sem aspas <literal>true</literal>, <literal>false</literal>
   e <literal>null</literal> são retornados como &true;,
   &false; e &null; respectivamente. &null; é retornado se o
   <parameter>json</parameter> não puder ser decodificado ou se os dados codificados tiverem
   profundidade maior que o limite de aninhamento.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se a <parameter>depth</parameter> estiver fora do intervalo permitido,
   um <classname>ValueError</classname> é lançado a partir do PHP 8.0.0,
   enquanto anteriormente, era gerado um erro do nível <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Foi adicionado <constant>JSON_THROW_ON_ERROR</constant>
        em <parameter>flags</parameter>
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <parameter>associative</parameter> agora é nullable.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Foi adicionado <constant>JSON_INVALID_UTF8_IGNORE</constant>, e
        <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>
        em <parameter>flags</parameter>.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Uma chave JSON vazia ("") pode ser codificada para a propriedade
        vazia de objeto, em vez de usar uma chave com o valor <literal>_empty_</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>json_decode</function> exemplos</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
   <example>
    <title>Acessando propriedades inválidas do objeto</title>
    <simpara>
     Acessar elementos dentro de um objeto que contém caracteres não
     permitidos pela convenção de nomenclatura do PHP (por exemplo, o hífen) pode ser
     realizado encapsulando o nome do elemento entre chaves e apóstrofo.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>erros comuns usando <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// as seguintes strings são JavaScript válidas, mas não JSON válidos

// o nome e o valor devem ser colocados entre aspas duplas
// aspas simples não são válidas
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// o nome deve ser colocado entre aspas duplas
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// virgulas à direita não são permitidas
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>erros de <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Codifica alguns dados com uma profundidade máxima de 4 (array -> array -> array -> string)
$json = json_encode(
    array(
        1 => array(
            'English' => array(
                'One',
                'January'
            ),
            'French' => array(
                'Une',
                'Janvier'
            )
        )
    )
);

// Mostrar os erros para diferentes profundidades.
var_dump(json_decode($json, true, 4));
echo 'Last error: ', json_last_error_msg(), PHP_EOL, PHP_EOL;

var_dump(json_decode($json, true, 3));
echo 'Last error: ', json_last_error_msg(), PHP_EOL, PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Last error: No error

NULL
Last error: Maximum stack depth exceeded
]]>
    </screen>
   </example>
   <example>
    <title><function>json_decode</function> de inteiros grandes</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"number": 12345678901234567890}';

var_dump(json_decode($json));
var_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["number"]=>
  float(1.2345678901235E+19)
}
object(stdClass)#1 (1) {
  ["number"]=>
  string(20) "12345678901234567890"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    A especificação JSON não é JavaScript, mas um subconjunto de JavaScript.
   </para>
  </note>
  <note>
   <para>
    No caso de falha na decodificação, <function>json_last_error</function>
    pode ser usado para determinar a exata natureza do erro.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
