<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cdc9d28d334bbc08386fecf8aade66080004a9dd Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.define" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>define</refname>
  <refpurpose>Define uma constante com nome</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>define</methodname>
   <methodparam><type>string</type><parameter>constant_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>case_insensitive</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Define uma constante com nome em tempo de execução.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>constant_name</parameter></term>
     <listitem>
      <para>
       O nome da constante.
      </para>
      <note>
       <para>
        É possível definir constante pela função <function>define</function> com nome reservado
        ou até mesmo com nome inválido, cujo valor pode (somente) ser recuperado com
        a função <function>constant</function>. Entretanto, isto não é recomendado.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       O valor da constante. No PHP 5, <parameter>value</parameter> precisa ser
       um valor do tipo <type>scalar</type> (<type>int</type>,
       <type>float</type>, <type>string</type>, <type>bool</type> ou
       &null;). No PHP 7, valores do tipo <type>array</type> também são aceitos.
      </para>
      <warning>
       <para>
        Apesar de ser possível definir constantes do tipo <type>resource</type>, não é
        recomendado e pode causar comportamento imprevisível.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>case_insensitive</parameter></term>
     <listitem>
      <para>
       Se definido para &true;, a constante será definida sem diferenciação de maiúsculas/minúsculas.
       O comportamento padrão é diferenciar, isto é,
       <literal>CONSTANT</literal> e <literal>Constant</literal> representam
       valores diferentes.
      </para>
      <warning>
       <simpara>
        Definir constantes sem diferenciar maiúsculas/minúsculas tornou-se defasado a partir do PHP 7.3.0.
        A partir do PHP 8.0.0, somente &false; é um valor aceitável para este parâmetro, passar
        &true; irá gerar um alerta.
       </simpara>
      </warning>
      <note>
       <para>
        Constantes insensíveis a maiúsculas/minúsculas são armazenadas em minúsculas.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Passar &true; para <parameter>case_insensitive</parameter> agora emite um <constant>E_WARNING</constant>. Passar &false; ainda é permitido.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        <parameter>case_insensitive</parameter> tornou-se defasado e será removido na versão 8.0.0.
       </entry>
      </row>
      <row>
       <entry>7.0.0</entry>
       <entry>
        Valores do tipo <type>array</type> são permitidos.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Defining Constants</title>
    <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // mostra "Hello world."
echo Constant; // mostra "Constant" e emite uma nota.

define("GREETING", "Hello you.", true);
echo GREETING; // mostra "Hello you."
echo Greeting; // mostra "Hello you."

// Funciona a partir do PHP 7
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // mostra "cat"

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Constantes com Nomes Reservados</title>
    <para>
     Este exemplo ilustra a <emphasis>possibilidade</emphasis> de definir uma
     constante com o mesmo nome de uma
     <link linkend="language.constants.predefined">constante mágica</link>.
     Como o comportamento resultante obviamente é confuso, não é portanto
     recomendado fazê-lo na prática.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(defined('__LINE__'));
var_dump(define('__LINE__', 'test'));
var_dump(constant('__LINE__'));
var_dump(__LINE__);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(true)
string(4) "test"
int(5)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>defined</function></member>
    <member><function>constant</function></member>
    <member>A seção sobre <link linkend="language.constants">Constantes</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
