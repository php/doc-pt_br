<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b95d28e6ec86e4a71e012737d36ebdc1cf009180 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->

<refentry xml:id="rararchive.open" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RarArchive::open</refname>
  <refname>rar_open</refname>
  <refpurpose>Abre arquivo RAR</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop; (method):</para>
   <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type class="union"><type>RarArchive</type><type>false</type></type><methodname>RarArchive::open</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>password</parameter><initializer>NULL</initializer></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>volume_callback</parameter><initializer>NULL</initializer></methodparam>
   </methodsynopsis>
  <para>&style.procedural;:</para>
  <methodsynopsis>
   <type class="union"><type>RarArchive</type><type>false</type></type><methodname>rar_open</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>password</parameter><initializer>NULL</initializer></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>volume_callback</parameter><initializer>NULL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Abre o arquivo RAR especificado e retorna a instância <type>RarArchive</type> que o representa.
  </para>
  <note>
   <para>
    Se estiver abrindo um arquivo multivolume, o caminho do primeiro volume deverá ser passado como o primeiro parâmetro.
    Caso contrário, nem todos os arquivos serão mostrados. Isso ocorre intencionalmente.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Caminho para o arquivo Rar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       Uma senha simples, se necessária para descriptografar os cabeçalhos. Ele também será usado por padrão
       se forem encontrados arquivos criptografados. Observe que os arquivos podem ter
       senhas diferentes em relação aos cabeçalhos e entre eles.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>volume_callback</parameter></term>
     <listitem>
      <para>
       Uma função que recebe um parâmetro – o caminho do volume
       que não foi encontrado – e retorna uma string com o caminho correto
       para tal volume ou &null; se tal volume
       não existir ou não for conhecido. O programador deve garantir que
       a função passada não cause loops, pois esta função é chamada
       repetidamente se o caminho retornado em uma chamada anterior não
       corresponder ao volume necessário. A especificação deste parâmetro omite
       o aviso que seria emitido sempre que um volume não
       fosse encontrado; uma implementação que retorna apenas &null;
       pode, portanto, ser usado para simplesmente omitir tais avisos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <para>
    Antes da versão 2.0.0, esta função não manipulava caminhos relativos
    corretamente. Use <function>realpath</function> como solução alternativa.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a instância <type>RarArchive</type> solicitada &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL rar 3.0.0</entry>
       <entry>
        <parameter>volume_callback</parameter> foi adicionado.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>&style.oop;</title>
    <programlisting role="php">
<![CDATA[
<?php
$rar_arch = RarArchive::open('encrypted_headers.rar', 'samplepassword');
if ($rar_arch === FALSE)
    die("Failed opening file");

$entries = $rar_arch->getEntries();
if ($entries === FALSE)
    die("Failed fetching entries");

echo "Found " . count($entries) . " files.\n";

if (empty($entries))
    die("No valid entries found.");

$stream = reset($entries)->getStream();
if ($stream === FALSE)
    die("Failed opening first file");

$rar_arch->close();

echo "Content of first one follows:\n";
echo stream_get_contents($stream);

fclose($stream);
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
<![CDATA[
Found 2 files.
Content of first one follows:
Encrypted file 1 contents.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>&style.procedural;</title>
    <programlisting role="php">
<![CDATA[
<?php
$rar_arch = rar_open('encrypted_headers.rar', 'samplepassword');
if ($rar_arch === FALSE)
    die("Failed opening file");

$entries = rar_list($rar_arch);
if ($entries === FALSE)
    die("Failed fetching entries");

echo "Found " . count($entries) . " files.\n";

if (empty($entries))
    die("No valid entries found.");

$stream = reset($entries)->getStream();
if ($stream === FALSE)
    die("Failed opening first file");

rar_close($rar_arch);

echo "Content of first one follows:\n";
echo stream_get_contents($stream);

fclose($stream);
?>
]]>
     </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Retorno de chamada de volume</title>
    <programlisting role="php">
<![CDATA[
<?php
/* In this example, there's a volume named multi_broken.part1.rar
 * whose next volume is named multi.part2.rar */
function resolve($vol) {
    if (preg_match('/_broken/', $vol))
        return str_replace('_broken', '', $vol);
    else
        return null;
}
$rar_file1 = rar_open(dirname(__FILE__).'/multi_broken.part1.rar', null, 'resolve');
$entry = $rar_file1->getEntry('file2.txt');
$entry->extract(null, dirname(__FILE__) . "/temp_file2.txt");
?>
]]>
     </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>Empacotador <link linkend="wrappers.rar"><literal>rar://</literal></link></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
