<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<reference xml:id="class.evwatcher" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EvWatcher</title>
 <titleabbrev>EvWatcher</titleabbrev>
 <partintro>
<!-- {{{ EvWatcher intro -->
  <section xml:id="evwatcher.intro">
   &reftitle.intro;
   <para>
    <classname>EvWatcher</classname>
    é uma classe base para todos os observadores (
    <classname>EvCheck</classname>
    ,
    <classname>EvChild</classname>
    etc.). Como
    o construtor de
    <classname>EvWatcher</classname> é
    <modifier>abstract</modifier>,
    não se pode (e não precisa) criar objetos EvWatcher
    diretamente.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evwatcher.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvWatcher</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>abstract</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.is-active">is_active</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.data">data</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.is-pending">is_pending</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.priority">priority</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvWatcher properties -->
  <section xml:id="evwatcher.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evwatcher.props.is-active">
     <term>
      <varname>is_active</varname>
     </term>
     <listitem>
      <para>
       <emphasis>Somente leitura</emphasis>
       . &true; se o observador está ativo. &false; caso contrário.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.data">
     <term>
      <varname>data</varname>
     </term>
     <listitem>
      <para>
       Dados personalizados do usuário associados ao inspetor
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.is-pending">
     <term>
      <varname>is_pending</varname>
     </term>
     <listitem>
      <para>
       <emphasis>Somente leitura</emphasis>
       .&true; se o observador estiver pendente, ou seja, possui eventos pendentes, mas
       seu retorno de chamada ainda não foi invocado. &false; caso contrário. Enquanto um observador
       estiver pendente (mas não ativo),
       <emphasis>não</emphasis>
       deve-se alterar sua prioridade.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.priority">
     <term>
      <varname>priority</varname>
     </term>
     <listitem>
      <para>
       <type>int</type>
       entre
       <constant>Ev::MINPRI</constant>
       e
       <constant>Ev::MAXPRI</constant>
       . Os observadores pendentes com prioridade mais alta serão invocados antes dos observadores
       com prioridade mais baixa, mas a prioridade não impedirá que os observadores sejam
       executados (exceto os
       observadores
       <classname>EvIdle</classname>).
       Os observadores <classname>EvIdle</classname>
       fornecem funcionalidade para suprimir a invocação quando eventos de prioridade
       mais alta estão pendentes.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evwatcher;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
