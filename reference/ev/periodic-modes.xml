<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bbfa9738785f054752e6cb565cd0a58e71015bc6 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<chapter  xml:id="ev.periodic-modes" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Modos de operação do observador periódico</title>
 <para>
  O observador <classname>EvPeriodic</classname>
  funciona em diferentes modos dependendo dos
  parâmetros
  <parameter>offset</parameter>
  ,
  <parameter>interval</parameter>
  e
  <parameter>reschedule_cb</parameter>.
 </para>
 <orderedlist>
  <listitem>
   <para>
    <emphasis>Temporizador absoluto</emphasis>.
    Neste modo
    <parameter>interval</parameter>
    =
    <literal>0</literal>
    ,
    <parameter>reschedule_cb</parameter>
    = &null;. Este tempo simplesmente dispara no horário do relógio
    <parameter>offset</parameter>
    e não se repete. Ele não será ajustado quando ocorrer um salto no tempo, ou seja,
    se for executado em
    <emphasis>1º de janeiro
    de 2014</emphasis>
    então será executado quando a hora do sistema atingir ou ultrapassar esse horário.
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>Temporizador de intervalo de repetição</emphasis>.
    Neste modo
    <parameter>interval</parameter>
    &gt;
    <literal>0</literal>
    ,
    <parameter>reschedule_cb</parameter>
    = &null;; o inspetor sempre será programado para atingir o tempo limite no próximo
    <parameter>offset</parameter>
    +
    <constant>N</constant>
    *
    <parameter>interval</parameter>
    tempo (para algum número inteiro
    <constant>N</constant>
    ) e repita, independentemente de quaisquer saltos de tempo.
   </para>
   <para>
    Isso pode ser usado para criar temporizadores que não variam em relação à hora do
    sistema:
    <programlisting role="php">
<![CDATA[
<?php
$hourly = EvPeriodic(0, 3600, NULL, function () {
  echo "uma vez por hora\n";
});
?>
]]>
    </programlisting>
    Isso não significa que sempre haverá
    <literal>3600</literal>
    segundos entre os acionadores, mas apenas que o retorno de chamada será chamado
    quando a hora do sistema mostrar uma hora completa (
    <emphasis>UTC</emphasis>
    ).
   </para>
   <para>
    <classname>EvPeriodic</classname>
    tentará executar o retorno de chamada neste modo no próximo horário possível, onde
    <varname>time</varname>
    =
    <parameter>offset</parameter>
    (
    <literal>mod</literal>
    <parameter>interval</parameter>
    ), independentemente de quaisquer saltos de tempo.
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>Modo de reprogramação manual</emphasis>.
    Neste modo,
    <parameter>reschedule_cb</parameter>
    é um <type>callable</type>
    .
   </para>
   <para>
    <parameter>interval</parameter>
    e
    <parameter>offset</parameter>
    estão sendo ignorados. Em vez disso, cada vez que o inspetor periódico for
    agendado, o retorno de chamada de reprogramação (
     <parameter>reschedule_cb</parameter>
     ) será chamado com o inspetor como primeiro e a hora atual como segundo
     argumento.
   </para>
   <para>
    Este retorno de chamada
    <emphasis>não deve</emphasis>
    parar ou destruir este ou qualquer outro observador periódico, e
    <emphasis>não deve</emphasis>
    chamar quaisquer funções ou métodos de loop de eventos. Para pará-lo, retorne
    <literal>1e30</literal>
    e pare depois. Um
    observador <classname>EvPrepare</classname>
    pode ser usado para esta tarefa.
   </para>
   <para>
    Ele deve retornar o próximo tempo de disparo, com base no valor de tempo passado
    (ou seja, o menor valor de tempo maior ou igual ao segundo
    argumento). Geralmente será chamado logo antes do retorno de chamada ser
    acionado, mas também poderá ser chamado em outros momentos.
   </para>
   <example>
    <title>Usando retorno de chamada de reagendamento</title>
    <programlisting role="php">
<![CDATA[
<?php
// Marcação a cada 10,5 segundos

function reschedule_cb ($watcher, $now) {
   return $now + (10.5. - fmod($now, 10.5));
}

$w = new EvPeriodic(0., 0., "reschedule_cb", function ($w, $revents) {
   echo time(), PHP_EOL;
});

Ev::run();
?>
]]>
    </programlisting>
   </example>
  </listitem>
 </orderedlist>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
