<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bbfa9738785f054752e6cb565cd0a58e71015bc6 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<chapter  xml:id="ev.watcher-callbacks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Retornos de chamada do observador</title>
 <para>
  Todos os observadores podem estar ativos (aguardando eventos) ou inativos (pausados). Somente
  observadores ativos terão seus retornos de chamada invocados. Todos os retornos de chamada serão
  chamados com pelo menos dois argumentos:
 <parameter>watcher</parameter>
 - o observador e
 <parameter>revents</parameter>
 uma máscara de bits de eventos recebidos.
 </para>
 <para>
   Os retornos de chamada do observador são passados para os construtores do inspetor (as classes derivadas
   de
   <classname>EvWatcher</classname>
   -
   <methodname>EvCheck::__construct</methodname>
   ,
   <methodname>EvChild::__construct</methodname>
   etc.). Um retorno de chamada do observador deve corresponder ao seguinte protótipo:
 </para>
 <methodsynopsis>
  <type>void</type>
  <methodname>callback</methodname>
  <methodparam
   choice="opt">
   <type>object</type>
   <parameter>watcher</parameter>
   <initializer>NULL</initializer>
  </methodparam>
  <methodparam
   choice="opt">
   <type>int</type>
   <parameter>revents</parameter>
   <initializer>NULL</initializer>
  </methodparam>
 </methodsynopsis>
 <para>
  <variablelist>
   <varlistentry>
    <term>
     <parameter>watcher</parameter>
    </term>
    <listitem>
     <para>
      A instância do observador (de uma classe que estende
      <classname>EvWatcher</classname>
      ).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>revents</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-revents">Eventos recebidos pelo observador</link>
      .
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  Cada tipo de observador tem seu bit associado em
  <parameter>revents</parameter>,
  portanto, pode-se usar o mesmo retorno de chamada para vários observadores. A máscara de evento é
  nomeada de acordo com o tipo, ou seja,
  <classname>EvChild</classname>
  (ou
  <methodname>EvLoop::child</methodname>
  ) define
  <constant>EV::CHILD</constant>
  ,
  <classname>EvPrepare</classname>
  (ou
  <methodname>EvLoop::prepare</methodname>
  ) define
  <constant>Ev::PREPARE</constant>
  , <classname>EvPeriodic</classname>
  (ou
  <methodname>EvLoop::periodic</methodname>
  ) define
  <constant>Ev::PERIODIC</constant>
  e assim por diante, com exceção de eventos de E/S (que podem definir ambos
  bits
  <constant>Ev::READ</constant>
  e <constant>Ev::WRITE</constant>).
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
