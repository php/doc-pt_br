<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<reference xml:id="class.evio" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EvIo</title>
 <titleabbrev>EvIo</titleabbrev>
 <partintro>
<!-- {{{ EvIo intro -->
  <section xml:id="evio.intro">
   &reftitle.intro;
   <para>
    Os observadores <classname>EvIo</classname>
    verificam se um descritor de arquivo (ou socket, ou um fluxo convertível
    em descritor de arquivo numérico) é legível ou gravável em cada iteração do
    loop de eventos, ou, mais precisamente, quando a leitura não bloquearia o
    processo e escrita seriam pelo menos capazes de gravar alguns dados. Esse
    comportamento é chamado de
    <emphasis>acionamento de nível</emphasis>
    porque os eventos continuam sendo recebidos enquanto a condição persistir. Para
    parar de receber eventos, basta parar o observador.
   </para>
   <para>
    O número de observadores de eventos de leitura e/ou gravação por
    <parameter>fd</parameter>
    é ilimitado. Definir todos os descritores de arquivo para o modo sem bloqueio também
    costuma ser uma boa ideia (mas não é obrigatório).
   </para>
   <para>
    Outra coisa a observar é que é muito fácil receber falsas
    notificações de prontidão, ou seja, o retorno de chamada pode ser chamado com
    <constant>Ev::READ</constant>
    mas um
    <emphasis>read()</emphasis>
    subsequente irá na verdade, bloquear porque não há dados. É muito fácil entrar
    nesta situação. Portanto, é melhor sempre usar E/S sem bloqueio: Um
    <emphasis>read()</emphasis>
    extra retornando
    <constant>EAGAIN</constant>
    (ou similar) é muito preferível a um programa suspenso até que alguns dados
    cheguem.
   </para>
   <para>
    Se por algum motivo for impossível executar o
    <parameter>fd</parameter>
    no modo sem bloqueio, teste novamente separadamente se um descritor de arquivo está
    realmente pronto. Algumas pessoas usam
    <constant>SIGALRM</constant>
    e um temporizador de intervalo, apenas para ter certeza de que o thry não bloqueará infinitamente.
   </para>
   <para>
    Sempre considere usar o modo sem bloqueio.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evio.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvIo</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvIo</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.fd">fd</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.events">events</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvIo properties -->
  <section xml:id="evio.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evio.props.fd">
     <term>
      <varname>fd</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evio.props.events">
     <term>
      <varname>events</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evio;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
