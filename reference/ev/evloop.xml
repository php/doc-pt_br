<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<reference xml:id="class.evloop" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EvLoop</title>
 <titleabbrev>EvLoop</titleabbrev>
 <partintro>
<!-- {{{ EvLoop intro -->
  <section xml:id="evloop.intro">
   &reftitle.intro;
   <para>
    Representa um loop de eventos que é sempre distinto do
    <emphasis>loop
    padrão</emphasis>.
    Ao contrário do
    <emphasis>loop padrão</emphasis>,
    ele não pode lidar
    com observadores
    <classname>EvChild</classname>.
   </para>
   <para>
    Tendo threads, temos que criar um loop por thread e usar o
    <emphasis>loop padrão</emphasis>
    no thread pai.
   </para>
   <para>
    O
    <emphasis>loop de eventos padrão</emphasis>
    é inicializado automaticamente por
    <emphasis>Ev</emphasis>.
    É acessível através de métodos
    da classe
    <classname>Ev</classname>, ou através
    do método
    <methodname>EvLoop::defaultLoop</methodname>.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evloop.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvLoop</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>EvLoop</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.data">data</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.backend">backend</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.is-default-loop">is_default_loop</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.iteration">iteration</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.pending">pending</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.io-interval">io_interval</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.timeout-interval">timeout_interval</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evloop.props.depth">depth</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evloop')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evloop')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvLoop properties -->
  <section xml:id="evloop.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evloop.props.data">
     <term>
      <varname>data</varname>
     </term>
     <listitem>
      <para>
       Dados personalizados anexados ao loop
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.backend">
     <term>
      <varname>backend</varname>
     </term>
     <listitem>
      <para>
       <emphasis>Somente Leitura</emphasis>.
        As
        <link linkend="ev.constants.watcher-backends">opções de backend</link>
        indicando o backend do evento em uso.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.is-default-loop">
     <term>
      <varname>is_default_loop</varname>
     </term>
     <listitem>
      <para>
       <emphasis>Somente Leitura</emphasis>.
       &true; se for o loop de eventos padrão.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.iteration">
     <term>
      <varname>iteration</varname>
     </term>
     <listitem>
      <para>
       A contagem de iterações atuais do loop. Veja
       <methodname>Ev::iteration</methodname>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.pending">
     <term>
      <varname>pending</varname>
     </term>
     <listitem>
      <para>
       O número de observadores pendentes.
       <literal>0</literal>
       indica que não há observadores pendentes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.io-interval">
     <term>
      <varname>io_interval</varname>
     </term>
     <listitem>
      <para>
       Um
       <varname>io_interval</varname> mais alto
       permite que
       <emphasis>libev</emphasis>
       gaste mais tempo coletando eventos
       <classname>EvIo</classname>,
       para que mais eventos possam ser tratados por iteração, ao custo de
       aumentar a latência. Os tempos limite
       (<classname>EvPeriodic</classname>
       e
       <classname>EvTimer</classname>
       ) não serão afetados. Definir isso com um valor diferente de zero introduzirá
       uma chamada
       <literal>sleep()</literal>
       adicional na maioria das iterações de loop. O tempo de suspensão garante que
       <emphasis>libev</emphasis>
       não pesquisará eventos
       <classname>EvIo</classname>
       mais de uma vez por esse intervalo, em média. Muitos
       programas geralmente podem se beneficiar configurando o
       <varname>io_interval</varname>
       para um valor próximo de
       <literal>0.1</literal>,
       o que geralmente é suficiente para servidores interativos (não para jogos). Geralmente
       não faz muito sentido defini-lo com um valor inferior a
       <literal>0.01</literal>,
       pois isso se aproxima da granularidade de tempo da maioria dos sistemas.
      </para>
      <para>
       Veja também
       <link
      xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS">FUNÇÕES DE
      CONTROLE DE LOOPS DE EVENTOS</link>
       .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.timeout-interval">
     <term>
      <varname>timeout_interval</varname>
     </term>
     <listitem>
      <para>
       Um
       <varname>timeout_interval</varname>
       maior permite que
       <emphasis>libev</emphasis>
       gaste mais tempo coletando tempos limite, às custas de maior
       latência/jitter/inexatidão (o retorno de chamada do inspetor será chamado mais tarde).
       Os observadores de <classname>EvIo</classname>
       não serão afetados. Definir isso como um valor não nulo não
       introduzirá nenhuma sobrecarga no
       <emphasis>libev</emphasis>
       . Veja também
       <link
      xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS">FUNÇÕES DE
      CONTROLE DE LOOPS DE EVENTOS</link>
       .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evloop.props.depth">
     <term>
      <varname>depth</varname>
     </term>
     <listitem>
      <para>
       A profundidade da recursão. Veja
       <methodname>Ev::depth</methodname>
       .
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evloop;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
