<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<reference xml:id="class.evidle" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EvIdle</title>
 <titleabbrev>EvIdle</titleabbrev>
 <partintro>
<!-- {{{ EvIdle intro -->
  <section xml:id="evidle.intro">
   &reftitle.intro;
   <para>
    Os observadores <classname>EvIdle</classname>
    acionam eventos quando nenhum outro evento de prioridade igual ou superior
    está pendente (
    <classname>EvPrepare</classname>
    ,
    <classname>EvCheck</classname>
    e outros observadores
    <classname>EvIdle</classname>
    não contam como receptores
    de <emphasis>eventos</emphasis>
    ).
   </para>
   <para>
    Assim, enquanto o processo estiver ocupado manipulando sockets ou timeouts (ou mesmo
    sinais) de prioridade igual ou superior, ele não será acionado. Mas quando
    o processo está ocioso(ou apenas observadores de prioridade mais baixa estão pendentes), os
    observadores <classname>EvIdle</classname>
    estão sendo chamados uma vez por iteração do loop de eventos - até serem interrompidos,
    isto é, ou o processo receber mais eventos e fica ocupado novamente com
    coisas de maior prioridade.
   </para>
   <para>
    Além de manter o processo sem bloqueio (o que às vezes é útil por
    si só),
    os observadores <classname>EvIdle</classname>
    são um bom lugar para fazer
    <emphasis>"processamento de pseudo-background"</emphasis>,
    ou atrasar processando coisas depois que o loop de eventos tiver tratado todos
    os eventos pendentes.
   </para>
   <para>
    O efeito mais notável é que enquanto quaisquer observadores
    <emphasis>idle</emphasis>
    estiverem ativos, o processo
    <emphasis>não</emphasis>
    será bloqueado enquanto aguarda por novos eventos.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evidle.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvIdle</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvIdle</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
<!--<classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>-->
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evidle')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evidle')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evidle;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
