<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: be295015d068095fc92880baef4e47038646adbd Maintainer: rogeriopradoj Status: ready --><!-- CREDITS: rogeriopradoj,lisaldo -->

<refentry xml:id="function.password-hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>password_hash</refname>
  <refpurpose>Cria um password hash</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>password_hash</methodname>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>int</type><parameter>algo</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>password_hash</function> cria um novo password hash usando um algoritmo forte
   de hash de via única. <function>password_hash</function> é compatível com <function>crypt</function>.
   Por isso, os password hashes criados com <function>crypt</function> podem ser utilizados com
   <function>password_hash</function>.
  </para>
  <simpara>
   Os seguintes algoritmos são suportados atualmente:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> - Usa o algoritmo bcrypt (padrão desde o PHP 5.5.0).
      Perceba que essa constante foi desenhada para mudar ao longo do tempo a medida que novos algoritmos mais fortes forem adicionados
      ao PHP. Por essa razão, o comprimento do resultado da utilização desse identificador pode mudar ao longo
      do tempo. Por isso, é recomendado que armazene o resultado em uma coluna do banco de dados que possa ser expandida
      além dos 60 caracteres (255 caracteres seria uma boa escolha).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> - Usa o algoritmo <constant>CRYPT_BLOWFISH</constant> para
      criar o hash. Produzirá um hash compatível com o padrão <function>crypt</function> usando
      o identificador "$2y$". O resultado será sempre uma string de 60 caracteres, &return.falseforfailure;.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> - Usa o algoritmo Argon2 para criar o hash.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Opções suportadas por <constant>PASSWORD_BCRYPT</constant>:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>salt</literal> (<type>string</type>) - para fornecer manualmente um salt a ser usado quando estiver sendo feito o hash do password.
      Perceba que isso irá sobrepor e evitar que um salt seja gerado automaticamente.
     </para>
     <para>
      Se omitido, um salt aleatório será gerado pela função <function>password_hash</function> para
      cada password sofrendo hash. Esse é o modo de operação desejado.
     </para>
     <warning>
      <para>
       A opção salt foi descontinuada no PHP 7.0.0. Agora é
       preferível que simplesmente se utilize o salt que é gerado por padrão.
      </para>
     </warning>
    </listitem>
    <listitem>
     <para>
      <literal>cost</literal> - indica o custo de algoritmo que deve ser usado.
      Exemplos desses valores podem ser encontrados na página da função <function>crypt</function>.
     </para>
     <para>
      Se omitido, um valor padrão <literal>10</literal> será usado. Este é um bom
      patamar de custo, mas pode-se considerar aumentar esse valor dependendo do hardware.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Opções suportadas por <constant>PASSWORD_ARGON2I</constant>:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>memory_cost</literal> (<type>integer</type>) - Máximo de mémoria (em bytes) que pode 
      ser utilizado para computar o hash Argon2. O valor padrão é <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>time_cost</literal> (<type>integer</type>) - Quantidade máxima de tempo que pode 
      levar para computar o hash Argon2. O valor padrão é <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>threads</literal> (<type>integer</type>) - Número de threads para computar
      o hash Argon2. O valor padrão é <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      &password.parameter.password;
     </para>
      <caution>
       <para>
        Usando <constant>PASSWORD_BCRYPT</constant> como
        algoritmo, resultará
        no parâmetro <parameter>password</parameter> sendo truncado em um
        comprimento máximo de 72 caracteres.
       </para>
      </caution>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      &password.parameter.algo;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      &password.parameter.options;
     </para>
     <para>
      Se omitido, um salt aleatório será gerado e o custo padrão será
      usado.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o hash do password, &return.falseforfailure;.
  </para>
  <para>
   O algoritmo, o custo e o salt utilizados são retornados como parte do hash. Dessa forma,
   toda informação necessária para verificar o hash é incluída nele. Isso permite
   que a função <function>password_verify</function> verifique o hash sem precisar
   de um armazenamento separado para a informação do salt ou do algoritmo.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>password_hash</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * We just want to hash our password using the current DEFAULT algorithm.
 * This is presently BCRYPT, and will produce a 60 character result.
 *
 * Beware that DEFAULT may change over time, so you would want to prepare
 * By allowing your storage to expand past 60 characters (255 would be good)
 */
echo password_hash("rasmuslerdorf", PASSWORD_DEFAULT);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a
]]>
    </screen>
   </example>
  </para> 
  <para>
   <example>
    <title>Exemplo de configuração do custo de <function>password_hash</function> manualmente</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * In this case, we want to increase the default cost for BCRYPT to 12.
 * Note that we also switched to BCRYPT, which will always be 60 characters.
 */
$options = [
    'cost' => 12,
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$12$QjSH496pcT5CEbzjD/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example>
    <title>Exemplo de configuração do salt de <function>password_hash</function> manualmente</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Note that the salt here is randomly generated.
 * Never use a static salt or one that is not randomly generated.
 *
 * For the VAST majority of use-cases, let password_hash generate the salt randomly for you
 */
$options = [
    'cost' => 11,
    'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$11$q5MkhSBtlsJcNEVsYh64a.aCluzHnGog7TQAKVmQwO9C8xb.t89F.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo de busca de um bom custo para <function>password_hash</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * This code will benchmark your server to determine how high of a cost you can
 * afford. You want to set the highest cost that you can without slowing down
 * you server too much. 8-10 is a good baseline, and more is good if your servers
 * are fast enough. The code below aims for ≤ 50 milliseconds stretching time,
 * which is a good baseline for systems handling interactive logins.
 */
$timeTarget = 0.05; // 50 milliseconds 

$cost = 8;
do {
    $cost++;
    $start = microtime(true);
    password_hash("test", PASSWORD_BCRYPT, ["cost" => $cost]);
    $end = microtime(true);
} while (($end - $start) < $timeTarget);

echo "Appropriate Cost Found: " . $cost;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Appropriate Cost Found: 10
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo do <function>password_hash</function> usando Argon2</title>
    <programlisting role="php">
<![CDATA[
<?php
echo 'Argon2 hash: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Argon2 hash: $argon2i$v=19$m=1024,t=2,p=2$YzJBSzV4TUhkMzc3d3laeg$zqU/1IN0/AogfP4cmSJI1vc8lpXRW9/S0sYY2i2jHT0
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    É fortemente recomendado que não seja gerado um salt próprio para esta
    função. Ela criará um salt seguro automaticamente se um não for
    especificado.
   </para>
   <para>
    Como apontado acima, fornecer a opção <literal>salt</literal> no PHP 7.0
    gerará um erro deprecation warning. O suporte para fornecer um salt manualmente
    será removido em uma futura versão do PHP.
   </para>
  </caution>
  <note>
   <para>
    É recomendado que você teste esta função sem seus servidores, e ajuste o parâmetro custo
    para que a execução da função leve menos do que 100 milisegundos em sistemas interativos.
    O script do exemplo acima ajudará a escolher um bom valor de custo para seu hardware.
   </para>
  </note>
  <note>
   <simpara>
    Atualizações dos algoritmos suportados por esta função (ou alterações no algoritmo padrão) precisam seguir
    as seguintes regras:
   </simpara>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>
      Qualquer novo algoritmo precisa estar no core por pelo menos 1 versão completa do PHP
      antes de se tornar padrão. Assim se, por exemplo, um novo algoritmo for adicionado
      na versão 7.5.5, ela não seria elegível para padrão até a versão 7.7 (uma vez que a 7.6
      seria a primeira versão completa). Mas se um algoritmo diferente for adicionado
      na versão 7.6.0, ela seria elegível para padrão na 7.7.0.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       O padrão deve mudar apenas em uma versão completa (7.3.0, 8.0.8 etc.)
       e não em uma versão de revisão. A única exceção seria uma
       emergênca caso uma falha de segurança crítica fosse encontrada no padrão
       atual.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Suporte para passwords Argon2 usando <constant>PASSWORD_ARGON2I</constant> foi adicionado.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_verify</function></member>
    <member><function>crypt</function></member>
    <member><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="&url.password.compat;">implementação userland</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
