<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b2cbcaea5b0e967d2b2cc6bbfa631343e49a7c28 Maintainer: ae Status: ready --><!-- CREDITS: fernandoc,ae -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>Executa um assert</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>Throwable</type><type>string</type><type>null</type></type><parameter>description</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function>
   permite a definição de expectativas: asserções são verificadas em
   ambientes de desenvolvimento ou testes, mas que são removidas por otimização
   a custo zero em produção.
  </para>
  <para>
   Asserções devem ser utilizadas como uma ferramenta apenas de debug.
   Um dos usos é para funcionar como validações graves, para precondições
   que precisam ser &true; e caso isso não ocorra, isto indica
   algum erro de programação.
   Outro uso é garantir a presença de certos recursos, como por exemplo
   funções de extensões ou certos recursos ou limites de sistema.
  </para>
  <para>
   As asserções podem ser configurados para serem eliminados, e elas
   <emphasis>não</emphasis> não devem ser utilizados em operações comuns como por
   exemplo a validação de parâmetros. Como regra geral, o código deve se comportar igual
   mesmo no caso das asserções estarem desativadas.
  </para>
  <para>
   <function>assert</function> verificará se a expectativa informada no parâmetro
   <parameter>assertion</parameter> é válida.
   Se não, o resultado avaliado é &false;, ocorrerá a ação apropriada,
   dependendo em como <function>assert</function> está configurado.
  </para>

  <para>
   O comportamento de <function>assert</function> é ditado pelas seguintes
   configurações INI:
   <table>
    <title>Assert &ConfigureOptions;</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&Name;</entry>
       <entry>&Default;</entry>
       <entry>&Description;</entry>
       <entry>&Changelog;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><link linkend="ini.zend.assertions">zend.assertions</link></entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: gera e executa o código (modo de desenvolvimento)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: gera o código mas ignora durante a execução
         </member>
         <member>
          <literal>-1</literal>: não gera o código (modo de produção)
         </member>
        </simplelist>
       </entry>
       <entry/>
      </row>
      <row>
       <entry><link linkend="ini.assert.active">assert.active</link></entry>
       <entry>&true;</entry>
       <entry>
        Se &false;, <function>assert</function> não verifica a expectativa
        e retorna &true; imediatamente.
       </entry>
       <entry>
        Desencorajado desde o PHP 8.3.0.
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.callback">assert.callback</link></entry>
       <entry>&null;</entry>
       <entry>
        Uma função definida pelo usuário a ser chamada quando a asserção falha.
        A assinatura deve ser:
        <methodsynopsis role="procedural">
         <type>void</type><methodname>assert_callback</methodname>
         <methodparam><type>string</type><parameter>file</parameter></methodparam>
         <methodparam><type>int</type><parameter>line</parameter></methodparam>
         <methodparam><type>null</type><parameter>assertion</parameter></methodparam>
         <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
        </methodsynopsis>
       </entry>
       <entry>
        Anteriormente ao PHP 8.0.0, a assinatura deveria ser:
        <methodsynopsis role="procedural">
         <type>void</type><methodname>assert_callback</methodname>
         <methodparam><type>string</type><parameter>file</parameter></methodparam>
         <methodparam><type>int</type><parameter>line</parameter></methodparam>
         <methodparam><type>string</type><parameter>assertion</parameter></methodparam>
         <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
        </methodsynopsis>
        Desencorajado desde o PHP 8.3.0.
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.exception">assert.exception</link></entry>
       <entry>&true;</entry>
       <entry>
        Se &true; irá lançar um <classname>AssertionError</classname> no caso
        da expectativa não ser válida.
       </entry>
       <entry>
        Desencorajado desde o PHP 8.3.0.
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.bail">assert.bail</link></entry>
       <entry>&false;</entry>
       <entry>
        Se &true; então a execução do script PHP será abortada
        caso a expectativa não seja válida.
       </entry>
       <entry>
        Desencorajado desde o PHP 8.3.0.
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.warning">assert.warning</link></entry>
       <entry>&true;</entry>
       <entry>
        Se &true;, será emitido um <constant>E_WARNING</constant> no
        caso da expectativa não seja válida. Essa configuração INI é inefetiva caso
        <link linkend="ini.assert.exception">assert.exception</link>
        esteja ativo.
       </entry>
       <entry>
        Desencorajado desde o PHP 8.3.0.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       Pode ser qualquer expressão que retorna um valor, qual será executado
       e o resultado é utilizado para indicar se a asserção deve passar ou falhar.
      </para>

      <warning>
       <para>
        Anteriormente ao PHP 8.0.0, se <parameter>assertion</parameter> era uma
        <type>string</type> ela era interpretada como código PHP e executada via
        <function>eval</function>.
        A string era passada para o argumento do callback no terceiro argumento.
        Este comportamento está <emphasis>OBSOLETO</emphasis> desde o PHP 7.2.0,
        e foi <emphasis>REMOVIDO</emphasis> no PHP 8.0.0.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       Se <parameter>description</parameter> é uma instância de
       <classname>Throwable</classname>, ela será lançada somente se
       <parameter>assertion</parameter> for executada e falhar.
       <note>
        <para>
         A partir do 8.0.0, isto ocorria <emphasis>antes</emphasis> de chamar
         a função de callback potencialmente definida.
        </para>
       </note>
       <note>
        <para>
         A partir do PHP 8.0.0, o &object; será lançado independente da configuração de
         <link linkend="ini.assert.exception">assert.exception</link>.
        </para>
       </note>
       <note>
        <para>
         A partird do PHP 8.0.0, a configuração
         <link linkend="ini.assert.bail">assert.bail</link>
         não terá efeito nesse caso.
        </para>
       </note>
      </para>
      <para>
       Se <parameter>description</parameter> é uma &string; esta mensagem
       será utilizada em uma exceção ou em um aviso.
       Uma descrição opcional que será incluída na mensagem de falha no caso
       da <parameter>assertion</parameter> falhar.
      </para>
      <para>
       Se <parameter>description</parameter> é omitido.
       <!-- This does not happen if &null; is passed ... -->
       Uma descrição padrão, igual ao código fonte na invocação de
       <function>assert</function> é criada em tempo de compilação.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>assert</function> sempre retorna &true; se ao menos uma das seguintes condições forem verdadeiras:
  </para>
  <simplelist>
   <member><literal>zend.assertions=0</literal></member>
   <member><literal>zend.assertions=-1</literal></member>
   <member><literal>assert.exception=1</literal></member>
   <member><literal>assert.bail=1</literal></member>
   <member>Um objeto exception foi passado em <parameter>description</parameter>.</member>
  </simplelist>
  <para>
   Se nenhuma das condições forem verdadeiras <function>assert</function> ainda pode retornar &true; se
   <parameter>assertion</parameter> possa ser convertido em um valor verdadeiro, ou &false; nos demais casos.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Todas as configurações INI <literal>assert.</literal> estão desencorajadas.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
         <function>assert</function> não mais avaliará argumentos strings, e por outro lado elas serão
         tratadas como um argumento comum. <code>assert($a == $b)</code> deve ser utilizado ao invés de
         <code>assert('$a == $b')</code>. A diretiva <literal>assert.quiet_eval</literal> &php.ini; e
         a constante <constant>ASSERT_QUIET_EVAL</constant> também foram removidos, dado que elas
         não tem mais nenhum efeito.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Se <parameter>description</parameter> é uma instância de
        <classname>Throwable</classname>, a exceção é lançada no caso da asserção
        falhar, independentemente do valor de
        <link linkend="ini.assert.exception">assert.exception</link>.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Se <parameter>description</parameter> é uma instância de
        <classname>Throwable</classname>, o callback não é chamado, mesmo que
        ele seja informado.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Declarar uma função chamada <literal>assert()</literal> dentro de um namespace
        não é mais permitido, e emite um <constant>E_COMPILE_ERROR</constant>.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Declarar uma função chamada <literal>assert()</literal> dentro de um namespace
        se tornou obsoleto. Uma declaração assim emite um <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Uso de <type>string</type>s no argumento <parameter>assertion</parameter>
        se tornou obsoleto. Isto agora emite um aviso <constant>E_DEPRECATED</constant>
        quando ambos <link linkend="ini.assert.active">assert.active</link>
        e <link linkend="ini.zend.assertions">zend.assertions</link> estão configurados
        para <literal>1</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <example>
    <title>Exemplo de <function>assert</function></title>
    <programlisting role="php">
<![CDATA[
<?php
assert(1 > 2);
echo 'Hi!';
]]>
    </programlisting>
    <para>
     Se assertions estiver ativo (<link linkend="ini.zend.assertions"><literal>zend.assertions=1</literal></link>),
     o exemplo acima emitirá:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(1 > 2) in example.php:2
Stack trace:
#0 example.php(2): assert(false, 'assert(1 > 2)')
#1 {main}
  thrown in example.php on line 2
]]>
    </screen>
    <para>
     Se assertions estiver desativado (<literal>zend.assertions=0</literal> ou <literal>zend.assertions=-1</literal>)
     o exemplo acima emitirá:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
   </example>
   <example>
    <title>Utilizando uma mensagem customizada</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(1 > 2, "Expected one to be greater than two");
echo 'Hi!';
]]>
    </programlisting>
    <para>
     Se assertions estiverem ativadas, o código acima emitirá:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: Expected one to be greater than two in example.php:2
Stack trace:
#0 example.php(2): assert(false, 'Expected one to...')
#1 {main}
  thrown in example.php on line 2
]]>
    </screen>
    <para>
     Se assertions estiverem desativados, o código acima emitirá:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
   </example>
   <example>
    <title>Utilizando uma classe exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class ArithmeticAssertionError extends AssertionError {}

assert(1 > 2, new ArithmeticAssertionError("Expected one to be greater than two"));
echo 'Hi!';
]]>
    </programlisting>
    <para>
     Se assertions estiver ativo o exemplo acima emitirá:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticAssertionError: Expected one to be greater than two in example.php:4
Stack trace:
#0 {main}
  thrown in example.php on line 4
]]>
    </screen>
    <para>
     Se assertions estiver desativado, o exemplo acima emitirá:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
   </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
