<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<refentry xml:id="function.sprintf" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sprintf</refname>
  <refpurpose>Retorna a string formatada</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sprintf</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retorna uma string produzida de acordo com a string de formatação
   <parameter>format</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
     A string e formatação é composta de zero ou mais diretivas:
     caracteres normais (excluindo <literal>%</literal>) que são copiados diretamente 
     para o resultado, e <emphasis>especificações de conversão</emphasis>,
     cada um dos quais resulta em obter o seu próprio parâmetro. 
     Isto se aplica para <function>sprintf</function>
     e <function>printf</function>.
    </para>
    <para>
     Cada especificação de conversão consiste em um símbolo de porcento
     (<literal>%</literal>), seguido por um ou mais destes elementos em ordem:
     <orderedlist>
      <listitem>
       <simpara>
         Um opcional <emphasis>sinal especificador</emphasis> que indica
          (- ou +) pode ser usado no número. Por padrão, somente o sinal - é usado
          no número se ele é negativo. Este especificador força números positivos
          a ter o sinal +, foi adicionado no PHP 4.3.0.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
        Um <emphasis>especificador de prenchimento</emphasis> opcional que diz
        qual caractere será usado para prencher o resultado para
        o tamanho certo. Isto pode ser um espaço ou
        <literal>0</literal> (zero character). O padrão é prencher com
        espaços. Um caractere alternativo de prenchimento pode
        ser especificado colocando uma aspa simples (<literal>'</literal>)
        antes. Veja os exemplos abaixo.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um <emphasis>especificador de alinhamento</emphasis> opcional que diz se o resultado
        deve ser alinhado a esquerda ou a direita.
        O padrão é alinhar a direita; um caractere <literal>-</literal>
        fará com que seja alinhado a esquerda.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um número opcional, um <emphasis>especificador de tamanho</emphasis>
        que diz quantos caracteres (mínimo) deve resultar desta conversão.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Um <emphasis>especificador de precisão</emphasis> opcional que diz
        quantos digitos decimais devem ser mostrados para números de ponto flutuante.
        Quando usando este especificador na string, ele age como um
        ponto delimitador, definindo o máximo de caracteres limit para a string.
       </simpara>
      </listitem>
      <listitem>
       <para>
        Um <emphasis>especificador de tipo</emphasis> que diz que o argumento deve ser
        tratado como do tipo. Os tipos possivéis são:
        <simplelist>
         <member>
          <literal>%</literal> - Um caractere porcento. Não
          é requerido neenhum argumento.
         </member>
         <member>
          <literal>b</literal> - O argumento é tratado com um inteiro,
          e mostrado como um binário.
         </member>
         <member>
          <literal>c</literal> - O argumento é tratado como um inteiro,
          e mostrado como o caractere ASCII correspondente.
         </member>
         <member>
          <literal>d</literal> - O argumento é tratado como um inteiro,
          e mostrado como um número decimal com sinal.
         </member>
         <member>
            <literal>e</literal> - o argumento é tratado como notação
            científica (e.g. 1.2e+2).
            O especificador de precisão indica o número de dígitos depois do
            ponto decimal desde o PHP 5.2.1. Em versões anteriores, ele pegava
            o número de dígitos significantes (ou menos).
         </member>
           <member>
          <literal>u</literal> - O argumento é tratado com um inteiro,
          e mostrado como um número decimal sem sinal.
         </member>
         <member>
          <literal>f</literal> - O argumento é tratado como um float,
          e mostrado como um número de ponto flutuante (do locale).
         </member>
           <member>
            <literal>F</literal> - o argumento é tratado como um
            float, e mostrado como um número de ponto flutuante (não usado o locale).
            Disponível desde o PHP 4.3.10 e PHP 5.0.3.
           </member>
         <member>
          <literal>o</literal> - O argumento é tratado com um inteiro,
          e mostrado como un número octal.
         </member>
         <member>
          <literal>s</literal> - O argumento é tratado e mostrado como
          uma string.
         </member>
         <member>
          <literal>x</literal> - O argumento é tratado como um inteiro,
          e mostrado como um número hexadecimal
          (com as letras minúsculas).
         </member>
         <member>
          <literal>X</literal> - O argumento é tratado como um inteiro,
          e mostrado como um número hexadecimal
          (com as letras maiúsculas).
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <para>
     A string de formato suporta argumentos com numeração/troca. Aqui está um exemplo:
     <example>
      <title>Troca de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = 'There are %d monkeys in the %s';
printf($format,$num,$location);
?>
]]>
      </programlisting>
     </example>
     Este deve mostrar, "There are 5 monkeys in the tree". Mas 
     imagine que nós estejamos criando a string de formatação em um arquivo separado,
     normalmente para internacionalizar e rescrevemos como:
     <example>
      <title>Troca de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = 'The %s contains %d monkeys';
printf($format,$num,$location);
?>
]]>
      </programlisting>
     </example>
     Agora nós temos um problema. A ordem dos argumentos
     na string de formatação não combina com os argumentos no código.
     Nós gostariamos de deixar o código como esta e simplesmente
     indicar na string de formatação quais argumentos pertencem aonde.
     Podemos escrever a string de formatação assim:
     <example>
      <title>Troca de argumento</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = 'The %2$s contains %1$d monkeys';
printf($format,$num,$location);
?>
]]>
      </programlisting>
     </example>
     Um beneficio adicional disto é ue você pode repetir os especificadores de
     conversão sem adicionar mais argumentos em seu código. Por exemplo:
     <example>
      <title>Troca de argumento</title>
      <programlisting role="php">
<![CDATA[
<?php
$format = 'The %2$s contains %1$d monkeys.
           That\'s a nice %2$s full of %1$d monkeys.';
printf($format, $num, $location);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a string produzida de acordo com as strings de formatação
   <parameter>format</parameter>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>printf</function>: vários exemplos</title>
   <programlisting role="php">
<![CDATA[
<?php
$n =  43951789;
$u = -43951789;
$c = 65; // ASCII 65 is 'A'

// notice the double %%, this prints a literal '%' character
printf("%%b = '%b'\n", $n); // binary representation
printf("%%c = '%c'\n", $c); // print the ascii character, same as chr() function
printf("%%d = '%d'\n", $n); // standard integer representation
printf("%%e = '%e'\n", $n); // scientific notation
printf("%%u = '%u'\n", $n); // unsigned integer representation of a positive integer
printf("%%u = '%u'\n", $u); // unsigned integer representation of a negative integer
printf("%%f = '%f'\n", $n); // floating point representation
printf("%%o = '%o'\n", $n); // octal representation
printf("%%s = '%s'\n", $n); // string representation
printf("%%x = '%x'\n", $n); // hexadecimal representation (lower-case)
printf("%%X = '%X'\n", $n); // hexadecimal representation (upper-case)

printf("%%+d = '%+d'\n", $n); // sign specifier on a positive integer
printf("%%+d = '%+d'\n", $u); // sign specifier on a negative integer
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'
]]>
   </screen>
  </example>
  <example>
   <title><function>printf</function>: especificadores de string</title>
   <programlisting role="php">
<![CDATA[
<?php
$s = 'monkey';
$t = 'many monkeys';

printf("[%s]\n",      $s); // standard string output
printf("[%10s]\n",    $s); // right-justification with spaces
printf("[%-10s]\n",   $s); // left-justification with spaces
printf("[%010s]\n",   $s); // zero-padding works on strings too
printf("[%'#10s]\n",  $s); // use the custom padding character '#'
printf("[%10.10s]\n", $t); // left-justification but with a cutoff of 10 characters
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
[monkey]
[    monkey]
[monkey    ]
[0000monkey]
[####monkey]
[many monke]
]]>
   </screen>
  </example>
     <example>
      <title><function>sprintf</function>: inteiros prenchidos com zero</title>
      <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title><function>sprintf</function>: formatando dinheiro</title>
      <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money irá mostrar "123.1";
$formatted = sprintf("%01.2f", $money);
// echo $formatted irá mostrar "123.10"
?>
]]>
      </programlisting>
     </example>
  <example>
   <title><function>sprintf</function>: notação científica</title>
   <programlisting role="php">
<![CDATA[
<?php
$number = 362525200;

echo sprintf("%.3e", $number); // imprime 3.625e+8
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>printf</function></member>
    <member><function>sscanf</function></member>
    <member><function>fscanf</function></member>
    <member><function>vsprintf</function></member>
    <member><function>number_format</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
