<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 49299f8b46e7d259b78f22c057be1cdefe22da43 Maintainer: leonardolara Status: ready --><!-- CREDITS: fernandoc,leonardolara -->
<refentry xml:id="function.substr" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>substr</refname>
  <refpurpose>Retorna parte de uma string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>substr</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>int</type><parameter>offset</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>length</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Retorna a parte de <parameter>string</parameter> especificada pelo
   parâmetro <parameter>offset</parameter> e <parameter>length</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string de entrada
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Se <parameter>offset</parameter> for não-negativo, a string retornada iniciará
       na posição <parameter>offset</parameter> em
       <parameter>string</parameter>, começando em zero. Por exemplo,
       na string '<literal>abcdef</literal>', o caractere na posição
       <literal>0</literal> é '<literal>a</literal>', na
       posição <literal>2</literal> é
       '<literal>c</literal>', e assim por diante.
      </para>
      <para>
       Se <parameter>offset</parameter> for negativo, a string retornada
       irá começar no caractere <parameter>offset</parameter>
       contado a partir do fim da <parameter>string</parameter>.
      </para>
      <para>
       Se a <parameter>string</parameter> for mais curta que o parâmetro
       <parameter>offset</parameter>, uma string vazia será retornada.
      </para>
      <para>
       <example>
        <title>Usando um <parameter>offset</parameter> negativo</title>
        <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", -1);    // retorna "f"
$rest = substr("abcdef", -2);    // retorna "ef"
$rest = substr("abcdef", -3, 1); // retorna "d"
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Se <parameter>length</parameter> for fornecido e for positivo,
       a string retornada irá conter, no máximo, <parameter>length</parameter> caracteres
       começando em <parameter>offset</parameter> (dependendo do tamanho da
       <parameter>string</parameter>).
      </para>
      <para>
       Se <parameter>length</parameter> for informado e for negativo, então esta quantidade
       caracteres será omitida do final da <parameter>string</parameter>
       (após a posicão de inicio ter sido calculada quando
       <parameter>offset</parameter> for negativo). Se
       <parameter>offset</parameter> denota a posição da truncagem ou
       além, uma string vazia será retornada.
      </para>
      <para>
       Se <parameter>length</parameter> for informado e for igual a <literal>0</literal>,
       uma string vazia será retornada.
      </para>
      <para>
       Se <parameter>length</parameter> for omitido ou &null;, a substring iniciando em
       <parameter>offset</parameter> será
       retornada.
      </para>
      <example>
       <title>Usando um <parameter>length</parameter> negativo</title>
       <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", 0, -1);  // retorna "abcde"
$rest = substr("abcdef", 2, -1);  // retorna "cde"
$rest = substr("abcdef", 4, -4);  // retorna ""; antes do PHP 8.0.0, falso era retornado
$rest = substr("abcdef", -3, -1); // retorna "de"
?>
]]>
       </programlisting>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a parte extraída da <parameter>string</parameter>, ou
   uma string vazia.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
    <row>
     <entry>8.0.0</entry>
     <entry>
      <parameter>length</parameter> agora pode ser nulo.
      Quando <parameter>length</parameter> for especificamente definido para &null;,
      a função retorna uma substring terminando no final da string, quando anteriormente retornava uma string vazia.
     </entry>
    </row>
    <row>
     <entry>8.0.0</entry>
     <entry>
      A função retorna uma string vazia quando antes retornava &false;.
     </entry>
    </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso básico de <function>substr</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo substr('abcdef', 1);     // bcdef
echo substr("abcdef", 1, null); // bcdef; antes do PHP 8.0.0, string vazia era retornada
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// O acesso a caracteres individuais pode
// ser feito atravéz de indexação
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Comportamento de conversão no <function>substr</function></title>
    <programlisting role="php">
<![CDATA[
<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) ''
6) ''
7) '1200'
]]>
    </screen>
   </example>
   <example>
    <title>Faixa Inválida de Caracteres</title>
    <para>
     Se uma faixa inválida de caracteres for requisitada, <function>substr</function> retorna
     uma string vazia a partir do PHP 8.0.0; anteriormente, &false; era retornado.
    </para>
    <example>
     <programlisting role="php">
<![CDATA[
<?php
var_dump(substr('a', 2));
?>
]]>
     </programlisting>
     &example.outputs.8;
     <screen>
<![CDATA[
string(0) ""
]]>
     </screen>
     &example.outputs.7;
     <screen>
<![CDATA[
bool(false)
]]>
     </screen>
    </example>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strrchr</function></member>
    <member><function>substr_replace</function></member>
    <member><function>preg_match</function></member>
    <member><function>trim</function></member>
    <member><function>mb_substr</function></member>
    <member><function>wordwrap</function></member>
    <member><link linkend="language.types.string.substr">Acesso e modificação de strings por caractere</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
