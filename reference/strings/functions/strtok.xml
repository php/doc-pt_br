<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: felipe Status: ready --><!-- CREDITS: surfmax -->
<refentry xml:id="function.strtok" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>strtok</refname>
  <refpurpose>Tokeniza uma string</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>strtok</methodname>
    <methodparam><type>string</type><parameter>str</parameter></methodparam>
    <methodparam><type>string</type><parameter>token</parameter></methodparam>
   </methodsynopsis>
  <para>
   <function>strtok</function> divide uma string (<parameter>str</parameter>)
   em strings menores (tokens), com cada token sendo delimitado por qualquer caractere
   de <parameter>token</parameter>.
   Quer dizer que, se você tem uma string como "Esta é uma string de exemplo" você poderia
    "tokenizá-la" em suas palavras individuais usando o caractere de espaço como
    delimitador do token.
  </para>
  <para>
   Note que só a primeira chamada a strtok usa o argumento string.
   Cada chamada subseqüente a strtok só precisa do delimitador a ser usado, já que
   ele mantém o caminho de onde ele está na string atual. Para iniciar novamente,
   ou tokenizar uma nova string você simplesmente chama strtok com o argumento de
   string novamente para inicializá-la. Veja que você pode por múltiplos
   delimitadores como parâmetro. A string será tokenizada quando um dos caracteres
   no argumento são encontrados.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       A <type>string</type> a ser repartida em pequenos pedaços (tokens).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>token</parameter></term>
     <listitem>
      <para>
       O delimitador usado para repatir a <parameter>str</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Uma <type>string</type> de token.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo da <function>strtok</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = "This is\tan example\nstring";
/* Use tab e newline como caractere delimitador, que funciona bem  */
$tok = strtok($string," \n\t");

while ($tok !== false) {
    echo "Word=$tok<br/>";
    $tok = strtok(" \n\t");
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   O comportamento quando uma parte vazia foi encontrada mudou com o PHP 4.1.0.
   O antigo comportamento retornava uma string vazia, enquanto a nova, a correta,
   simplesmente pula a parte da string:
  </para>
  <para>
   <example>
    <title>Comportamento antigo da <function>strtok</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump ($first_token, $second_token);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
    string(9) "something"
    string(0) ""

]]>
    </screen>
   </example>
   <example>
    <title>Novo comportamento da <function>strtok</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump ($first_token, $second_token);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
    string(9) "something"
    bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  &return.falseproblem;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>split</function></member>
    <member><function>explode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
