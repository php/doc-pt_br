<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7a3899eea90f3df8dcfe8fd350900162f3490bed Maintainer: leonardolara Status: ready --><!-- CREDITS: felipe, surfmax, rogeriopradoj, leonardolara -->
<refentry xml:id="function.print" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>print</refname>
  <refpurpose>Mostra uma string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>print</methodname>
   <methodparam><type>string</type><parameter>expression</parameter></methodparam>
  </methodsynopsis>
  <para>
   Mostra o conteúdo de <parameter>expression</parameter>.
  </para>
  <para>
   <literal>print</literal> não é uma função, é uma construção de linguagem.
   Seu argumento é a expressão logo após da palavra-chave <literal>print</literal>,
   e não é delimitada por parênteses.
  </para>
  <para>
   As principais diferenças para <function>echo</function> são que
   <literal>print</literal> aceita apenas um único argumento e sempre retorna
   <literal>1</literal>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>expression</parameter></term>
     <listitem>
      <para>
       A expressão a ser mostrada. Valores não-string serão convertidos coercitivamente para strings,
       mesmo quando <link linkend="language.types.declarations.strict">a diretiva
       <literal>strict_types</literal></link> estiver habilitada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna <literal>1</literal>, sempre.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplos <literal>print</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
print "print não requer parênteses.";

// Não é adicionado espaço ou quebra de linha; o exemplo abaixo mostra "olámundo" em uma só linha
print "olá";
print "mundo";

print "Este string ocupa
múltiplas linhas. As quebras de linha
também serão mostradas.";

print "Este string ocupa\nmúltiplas linhas. As quebras de linha\ntambém serão mostradas.";

// O argumento pode ser qualquer expressão que produza uma string
$foo = "exemplo";
print "foo é um $foo"; // foo é um exemplo

$frutas = ["limão", "laranja", "banana"];
print implode(" e ", $frutas); // limão e laranja e banana

// Expressões não string são convertidas coercitivamente para strings, mesmo que declare(strict_types=1) seja usado
print 6 * 7; // 42

// Como print tem um valor de retorno, pode ser usado em expressões
// O código a seguir mostra "olá mundo"
if ( print "olá" ) {
    echo " mundo";
}

// O código a seguir mostra "verdadeiro"
( 1 === 1 ) ? print 'verdadeiro' : print 'falso';
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  <note>
   <title>Usando com parênteses</title>
   <para>
    Envolver o argumento de <literal>print</literal> com parênteses não irá
    causar um erro de sintaxe, e produz uma sintaxe que se parece com uma chamada
    normal de função. Entretanto, isso pode causar confusão, porque os parênteses são na verdade
    parte da expressão sendo mostrada, e não parte da sintaxe de <literal>print</literal>
    propriamente.
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
print "olá";
// mostra "olá"

print("hello");
// também mostra "olá", porque ("olá") é uma expressão válida

print(1 + 2) * 3;
// mostra "9"; os parênteses fazem com que 1+2 seja avaliado primeiro, e depois 3*3
// a declaração print enxerga toda a expressão como um único argumento

if ( print("olá") && false ) {
    print " - dentro do if";
}
else {
    print " - dentro do else";
}
// Mostra " - dentro do if"
// A expressão ("olá") && false é avaliada primeiro, produzindo resultado falso.
// Isto é convertido à força para a string vazia "" e mostrado.
// A declaração print á partir daí retorna 1, então o código dentro do bloco if é executado
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Ao usar <literal>print</literal> com uma expressão maior, colocar tanto a
    palavra-chave quanto seu argumento entre parênteses pode ser necessário para gerar
    o resultado desejado:
   </para>

   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
if ( (print "olá") && false ) {
    print " - dentro do if";
}
else {
    print " - dentro do else";
}
// Mostra "olá - dentro do else"
// Diferentemente do exemplo anterior, a expressão (print "olá") é avaliada primeiro.
// Depois de mostrar "olá", print retorna 1.
// Já que 1 && false é falso, o código dentro do bloco else é executado.

print "olá " && print "mundo";
// Mostra "mundo1"; print "mundo" é avaliado primeiro,
// e depois a expressão "olá " && 1 é passada ao print da esquerda

(print "olá ") && (print "mundo");
// Mostra "olá mundo"; os parênteses forçam a avaliação das expressões print
// antes da operação &&
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>

  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>echo</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string">Maneiras de especificar strings literais</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
