<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 873f4a3d5027bd1b584f1d1e590e22cd4a08ae84 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.metaphone" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>metaphone</refname>
  <refpurpose>Calcula a chave de Metaphone de uma string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>metaphone</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>max_phonemes</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Calcula a chave de Metaphone da <parameter>string</parameter>.
  </para>
  <para>
   Parecida com a função <function>soundex</function>, metaphone cria a mesma chave para
   palavras que soam de forma similar. É mais precisa que
   <function>soundex</function> já que ela conhece as regras básicas de pronúncia
   em inglês. As chaves geradas têm comprimento variável.
  </para>
  <para>
   Metaphone foi desenvolvido por Lawrence Philips
   &lt;lphilips at verity dot com&gt;. É descrita em ["Practical
   Algorithms for Programmers", Binstock &amp; Rex, Addison Wesley,
   1995].
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>max_phonemes</parameter></term>
     <listitem>
      <para>
       Este parâmetro restringe o comprimento da chave retornada ao número máximo de
       <emphasis>characters</emphasis> especificado em <parameter>max_phonemes</parameter>.
       Entretanto, os fonemas resultantes são sempre transcritos completamente, portanto o
       comprimento resultante da string pode ser um pouco maior que <parameter>max_phonemes</parameter>.
       O valor padrão de <literal>0</literal> significa sem restrição.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a chave de Metaphone como uma string.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Esta função retornava &false; em caso de falha.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="metaphone.example.basic"><!-- {{{ -->
    <title>Exemplo básico de <function>metaphone</function></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(metaphone('programming'));
var_dump(metaphone('programmer'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(7) "PRKRMNK"
string(6) "PRKRMR"
]]>
    </screen>
   </example><!-- }}} -->
  </para>
  <para>
   <example xml:id="metaphone.example.phonemes"><!-- {{{ -->
    <title>Usando o parâmetro <parameter>max_phonemes</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(metaphone('programming', 5));
var_dump(metaphone('programmer', 5));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "PRKRM"
string(5) "PRKRM"
]]>
    </screen>
   </example><!-- }}} -->
  </para>
  <para>
   <example xml:id="metaphone.example.phonemes-overlong">
    <title>Usando o parâmetro <parameter>max_phonemes</parameter></title>
    <simpara>
     Neste exemplo, <function>metaphone</function> é instruída a produzir uma string
     de cinco caracteres, mas isso iria separar o fonema final
     (<literal>'x'</literal> deve ser transcrito para <literal>'KS'</literal>),
     portanto a função retorna uma string com seis caracteres.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(metaphone('Asterix', 5));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(6) "ASTRKS"
]]>
    </screen>
   </example>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>levenshtein</function></member>
    <member><function>similar_text</function></member>
    <member><function>soundex</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
