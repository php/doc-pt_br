<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e095023e408c8cb6378ae16bb6870343a3946919 Maintainer: leonardolara Status: ready --><!-- CREDITS: surfmax,fernandoc,leonardolara -->
<refentry xml:id="function.crc32" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>crc32</refname>
  <refpurpose>Calcula polinômio crc32 de uma string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>crc32</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   Gera a soma de verificação de redundância cíclica de 32-bits
   de comprimento da <parameter>string</parameter>. É usado geralmente
   para validar a integridade de um dado sendo transferido.
  </para>
  <warning>
   <simpara>
    Pelo fato do tipo inteiro do PHP ser com sinal, muitas somas de verificação crc32
    resultarão em inteiros negativos em plataformas de 32 bits. Em instalações de 64 bits
    todos os resultados de <function>crc32</function> serão inteiros positivos.
   </simpara>
   <simpara>
    Por isso, é necessário usar o formatador "%u" da função <function>sprintf</function> ou
    <function>printf</function> para obter a representação em string da
    soma de verificação sem sinal da função <function>crc32</function> em formato decimal.
   </simpara>
   <simpara>
    Para uma representação hexadecimal da soma de verificação, pode-se usar tanto
    o formatador "%x" de <function>sprintf</function> ou <function>printf</function>
    quanto as funções de conversão <function>dechex</function>, ambas destas soluções
    também tomam o cuidado de converter o resultado de <function>crc32</function> para um
    inteiro sem sinal.
   </simpara>
   <simpara>
    Foi considerado que instalações de 64 bits também retornassem inteiros negativos para
    valores mais altos de resultados, porém isto iria quebrar a conversão para hexadecimal,
    já que os negativos teriam um deslocamento extra de 0xFFFFFFFF######## neste caso. Como
    a representação hexadecimal parece ser o uso de caso mais comum, decidiu-se
    não quebrar esta conversão mesmo que ela quebre comparações diretas em decimal
    em aproximadamente 50% dos casos ao mover de 32 para 64 bits.
   </simpara>
   <simpara>
    Em retrospecto, fazer com que a função retornasse um inteiro talvez não tenha sido a
    melhor ideia, e retornar uma representação hexadecimal em string diretamente (como, por
    exemplo, a função <function>md5</function> faz) poderia ter sido um plano melhor para
    se começar.
   </simpara>
   <simpara>
    Para uma solução mais portável, pode-se considerar a função genérica
    <function>hash</function>. <code>hash("crc32b", $str)</code> retornará
    a mesma string que <code>str_pad(dechex(crc32($str)), 8, '0', STR_PAD_LEFT)</code>.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Os dados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a soma de verificação crc32 da <parameter>string</parameter> como um inteiro.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <para>
    <example>
     <title>Mostrando uma soma de verificação crc32</title>
    <para>
     Este exemplo mostra como exibir uma soma de verificação convertida com a função
     <function>printf</function>:
    </para>
      <programlisting role="php">
<![CDATA[
<?php
$checksum = crc32("The quick brown fox jumped over the lazy dog.");
printf("%u\n", $checksum);
?>
]]>
    </programlisting>
  </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash</function></member>
    <member><function>md5</function></member>
    <member><function>sha1</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
