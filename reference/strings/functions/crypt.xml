<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: felipe Status: ready --><!-- CREDITS: surfmax -->
<refentry xml:id="function.crypt" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>crypt</refname>
  <refpurpose>Encriptação unidirecional de string (hashing)</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>crypt</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>salt</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>crypt</function> retornará uma string criptografada usando o
   algoritmo de encriptação Unix Standard <abbrev>DES</abbrev>-based ou
   algoritmos alternativos disponíveis no sistema. 
  </para>
  <para>
   Alguns SO suportam mais de um tipo de codificação. De
   fato, algumas vezes a codificação Standard DES-based é substituído por
   MD5-based . O tipo de codificação é definido pelo argumento salt.
    Na instalação, o PHP determina as possíveis funções de codificação
   e aceitará salts para outros tipos. Se nenhum salt é fornecido,
   o PHP auto-gera um salt padrão de 2 caracateres por definição,
   a menos que o tipo de codificação padrão do sistema seja MD5, nesse caso
   um salt MD5-compatible aleatório será gerado. O PHP define uma constante
   com nome <constant>CRYPT_SALT_LENGTH</constant> que dirá se um salt de 2 
   caracteres aplica-se ao seu sistema ou se o salt mais comprido de 12 caracteres
   é aplicável.
  </para>
  <para>
   O Standard DES-based <function>crypt</function> retorna o salt como o 
   primeiro  two characters da saída. Ele também usa apenas
   os oito primeiros caracteres da <parameter>str</parameter>, então
   strings longas que começam com os mesmos oito caracteres gerarão o mesmo
   resultado (quando o mesmo salt é usado).
  </para>
  <simpara>
   Em sistemas onde a função crypt() suporta variados 
   tipos de codificação, as seguintes funções são definidas para 0 ou 1
    a depender se um dado tipo está disponível:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <constant>CRYPT_STD_DES</constant> - Codificação Standard DES-based com um salt de 2 caracteres 
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_EXT_DES</constant> - Codificação Extended DES-based com um salt de 9 caracateres 
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_MD5</constant> - Codificação MD5 com um salt de 12 caracteres começando com
     $1$
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_BLOWFISH</constant> - Codificação Blowfish com um salt de 16 caracteres
     começando com $2$
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       A string a ser encriptada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Uma opcional string de salt para base da encriptação. Se não fornecido,
       será gerado randomicamente pelo PHP cada vez que chamar esta função.
      </para>
      <para>
       Se você está usando um salt fornecido, você está ciente que o salt é gerado
       uma vez. Se você está chamando essa função repetidamente, isto pode afetar
       a aparência e a segurança.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a string encriptada.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplos da <function>crypt</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$password = crypt('mypassword'); // let the salt be automatically generated

/* You should pass the entire results of crypt() as the salt for comparing a
   password, to avoid problems when different hashing algorithms are used. (As
   it says above, standard DES-based password hashing uses a 2-character salt,
   but MD5-based hashing uses 12.) */
if (crypt($user_input, $password) == $password) { 
   echo "Password verified!";
}
?>
]]>
     </programlisting>
    </example>
   <example>
    <title>Usando <function>crypt</function> com htpasswd</title>
    <programlisting role="php">
<![CDATA[
<?php
// Set the password
$password = 'mypassword';

// Get the hash, letting the salt be automatically generated
$hash = crypt($password);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Usando <function>crypt</function> com diferente tipos de encriptação</title>
    <programlisting role="php">
<![CDATA[
<?php
if (CRYPT_STD_DES == 1) {
    echo 'Standard DES: ' . crypt('rasmuslerdorf', 'rl') . "\n";
}

if (CRYPT_EXT_DES == 1) {
    echo 'Extended DES: ' . crypt('rasmuslerdorf', '_J9..rasm') . "\n";
}

if (CRYPT_MD5 == 1) {
    echo 'MD5:          ' . crypt('rasmuslerdorf', '$1$rasmusle$') . "\n";
}

if (CRYPT_BLOWFISH == 1) {
    echo 'Blowfish:     ' . crypt('rasmuslerdorf', '$2a$07$rasmuslerd...........$') . "\n";
}
?>
]]>
    </programlisting>
     &example.outputs.similar;
    <screen>
<![CDATA[
Standard DES: rl.3StKT.4T8M
Extended DES: _J9..rasmBYk8r9AiWNc
MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0
Blowfish:     $2a$07$rasmuslerd............nIdrcHdxcUxWomQX9j6kvERCFjTg7Ra
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Não há função decrypt, visto que <function>crypt</function> usa um
    algoritmo unidirecional.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>md5</function></member>
    <member>A extensão <link linkend="ref.mcrypt">Mcrypt</link></member>
    <member>A man page do Unix para sua função crypt para mais informação</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
