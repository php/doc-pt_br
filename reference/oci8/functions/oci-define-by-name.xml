<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.oci-define-by-name" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_define_by_name</refname>
  <refpurpose>Associa uma variável PHP a uma coluna para buscas de consulta</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_define_by_name</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam><type>string</type><parameter>column</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Associa uma variável PHP a uma coluna para buscas de consulta usando <function>oci_fetch</function>.
  </para>
  <para>
   A chamada <function>oci_define_by_name</function> deve ocorrer antes
   de executar <function>oci_execute</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
       &oci.arg.statement.id;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       O nome da coluna usada na consulta.
      </para>
      <para>
       Use letras maiúsculas para os nomes de colunas padrão do Oracle, que não diferenciam maiúsculas
       de minúsculas. Use a forma exata do nome da coluna para nomes de colunas
       que diferenciam maiúsculas de minúsculas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       A variável PHP que conterá o valor da coluna retornada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       O tipo de dado a ser retornado. Geralmente não é necessário. Observe que
       conversões de dados no estilo Oracle não são realizadas. Por exemplo,
       <constant>SQLT_INT</constant> será ignorado e o tipo de dado
       retornado ainda será <constant>SQLT_CHR</constant>.
      </para>
      <para>
       Opcionalmente, podem ser usada a função <function>oci_new_descriptor</function>
       para alocar descritores LOB/ROWID/BFILE.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>oci_define_by_name</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';
$stid = oci_parse($conn, $sql);

// As definições DEVEM ser feitas antes da execução
oci_define_by_name($stid, 'LOCATION_ID', $locid);
oci_define_by_name($stid, 'CITY', $city);

oci_execute($stid);

// Cada busca preenche as variáveis ​​definidas anteriormente com os dados da próxima linha
while (oci_fetch($stid)) {
    echo "location_id $locid é $city<br>\n";
}

// Resultado:
//   location_id 1000 é Roma
//   location_id 1100 é Venice

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_define_by_name</function> com nomes de colunas que diferenciam maiúsculas de minúsculas</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  Antes de executar, crie a tabela com um nome de coluna que diferencie maiúsculas de minúsculas:
    CREATE TABLE mytab (id NUMBER, "MyDescription" VARCHAR2(30));
    INSERT INTO mytab (id, "MyDescription") values (1, 'Iced Coffee');
    COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT * FROM mytab');

// Use letras maiúsculas para nomes de colunas que não diferenciam maiúsculas de minúsculas
oci_define_by_name($stid, 'ID', $id);

// Use a caixa exata para nomes de colunas que diferenciam maiúsculas de minúsculas
oci_define_by_name($stid, 'MyDescription', $mydesc);

oci_execute($stid);

while (oci_fetch($stid)) {
    echo "id $id é $mydesc<br>\n";
}

// Resultado:
//   id 1 é Iced Coffee

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_define_by_name</function> com colunas LOB</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  Antes de executar, crie a tabela:
    CREATE TABLE mytab (id NUMBER, fruit CLOB);
    INSERT INTO mytab (id, fruit) values (1, 'apple');
    INSERT INTO mytab (id, fruit) values (2, 'orange');
    COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT * FROM mytab');

// As definições DEVEM ser feitas antes da execução
oci_define_by_name($stid, 'ID', $id);
oci_define_by_name($stid, 'FRUIT', $fruit);  // $fruit will become a LOB descriptor

oci_execute($stid);

while (oci_fetch($stid)) {
    echo $id . " é " . $fruit->load(100) . "<br>\n";
}

// Resultado:
//   1 é apple
//   2 é orange

$fruit->free();
oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_define_by_name</function> com um tipo explícito</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  Antes de executar, crie a tabela:
    CREATE TABLE mytab (id NUMBER, fruit CLOB);
    INSERT INTO mytab (id, fruit) values (1, 'apple');
    INSERT INTO mytab (id, fruit) values (2, 'orange');
    COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT * FROM mytab');

// As definições DEVEM ser feitas antes da execução
oci_define_by_name($stid, 'ID', $id);

$fruit = oci_new_descriptor($conn, OCI_D_LOB);
oci_define_by_name($stid, 'FRUIT', $fruit, OCI_D_CLOB);

oci_execute($stid);

while (oci_fetch($stid)) {
    echo $id . " é " . $fruit->load(100) . "<br>\n";
}

// Resultado:
//   1 é apple
//   2 é orange

$fruit->free();
oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_fetch</function></member>
    <member><function>oci_new_descriptor</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
