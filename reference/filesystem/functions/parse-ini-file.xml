<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: a5346daf2bb2fab250fa03f0f6639a408d0b2240 Maintainer: leonardolara Status: ready --><!-- CREDITS: ae,diogo,leonardolara -->
<refentry xml:id="function.parse-ini-file" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_ini_file</refname>
  <refpurpose>Interpreta um arquivo de configuração</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>parse_ini_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>process_sections</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scanner_mode</parameter><initializer><constant>INI_SCANNER_NORMAL</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>parse_ini_file</function> carrega o arquivo INI
   especificado em <parameter>filename</parameter> e retorna
   as configurações contidas nele em um array associativo.
  </para>
  <para>
   A estrutura do arquivo INI é a mesma do &php.ini;.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       O nome do arquivo INI sendo interpretado. Se um caminho relativo for usado,
       será avaliado relativamente ao diretório atual de trabalho, e depois no caminho
       <link linkend="ini.include-path">include_path</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>process_sections</parameter></term>
     <listitem>
      <para>
       Definindo o parâmetro <parameter>process_sections</parameter>
       para &true;, obtém-se um array multidimensional com os nomes
       das seções e configurações incluídos. O padrão para
       <parameter>process_sections</parameter> é &false;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scanner_mode</parameter></term>
     <listitem>
      <para>
       Pode ser <constant>INI_SCANNER_NORMAL</constant> (padrão) ou
       <constant>INI_SCANNER_RAW</constant>. Se <constant>INI_SCANNER_RAW</constant>
       for fornecido, os valores das opções não serão interpretados.
      </para>
      &ini.scanner.typed;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   As configurações são retornadas como um <type>array</type> associativo em caso de sucesso,
   and &false; on failure.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Conteúdo de <filename>sample.ini</filename></title>
    <programlisting>
<![CDATA[
; Este é um arquivo de configuração de exemplo
; Comentários iniciam com ';', como no php.ini

[primeira_secao]
um = 1
cinco = 5
animal = PASSARO

[segunda_secao]
path = "/usr/local/bin"
URL = "http://www.example.com/~username"

[terceira_secao]
versaophp[] = "5.0"
versaophp[] = "5.1"
versaophp[] = "5.2"
versaophp[] = "5.3"

urls[svn] = "http://svn.php.net"
urls[git] = "http://git.php.net"
]]>
    </programlisting>
   </example>
   <example>
    <title>Exemplo de <function>parse_ini_file</function></title>
    <para>
     <link linkend="language.constants">Constantes</link> (mas não "constantes mágicas" como <constant>__FILE__</constant>)
     também podem ser interpretadas
     no arquivo INI. Se for definida uma constante como um valor INI antes
     de executar <function>parse_ini_file</function>, ela será intergrada aos
     resultados. Somente valores INI são avaliados e o valor deve ser apenas a constante. Por exemplo:
    </para>
    <programlisting role="php">
<![CDATA[
<?php

define('PASSARO', 'Pássaro Dodo');

// Interpreta sem as seções
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Interpreta com as seções
$ini_array = parse_ini_file("sample.ini", true);
print_r($ini_array);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array
(
    [um] => 1
    [cinco] => 5
    [animal] => Pássaro Dodo
    [path] => /usr/local/bin
    [URL] => http://www.example.com/~username
    [versaophp] => Array
        (
            [0] => 5.0
            [1] => 5.1
            [2] => 5.2
            [3] => 5.3
        )

    [urls] => Array
        (
            [svn] => http://svn.php.net
            [git] => http://git.php.net
        )

)
Array
(
    [primeira_secao] => Array
        (
            [um] => 1
            [cinco] => 5
            [animal] = Pássaro Dodo
        )

    [segunda_secao] => Array
        (
            [path] => /usr/local/bin
            [URL] => http://www.example.com/~username
        )

    [terceira_secao] => Array
        (
            [versaophp] => Array
                (
                    [0] => 5.0
                    [1] => 5.1
                    [2] => 5.2
                    [3] => 5.3
                )

            [urls] => Array
                (
                    [svn] => http://svn.php.net
                    [git] => http://git.php.net
                )

        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>parse_ini_file</function> interpretando um arquivo php.ini</title>
    <programlisting role="php">
<![CDATA[
<?php
// Uma função simples usada para comparar os resultados abaixo
function sim_nao($expression)
{
    return($expression ? 'Sim' : 'Não');
}

// Obtém o caminho para o php.ini usando a função php_ini_loaded_file()
$ini_path = php_ini_loaded_file();

// Interpreta o php.ini
$ini = parse_ini_file($ini_path);

// Mostra e compara os valores, note que usar get_cfg_var()
// levará aos mesmos resultados para interpretado e carregado aqui
echo '(interpretado) magic_quotes_gpc = ' . sim_nao($ini['magic_quotes_gpc']) . PHP_EOL;
echo '(carregado) magic_quotes_gpc = ' . sim_nao(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
(parsed) magic_quotes_gpc = Sim
(loaded) magic_quotes_gpc = Sim
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Interpolação de Valor</title>
    <para>
     Além de avaliar constantes, alguns caracteres possuem significado especial em um valor INI.
     Adicionamente, variáveis de ambiente e opções de configuração previamente definidas (consulte <function>get_cfg_var</function>) podem ser lidas usando
     a sintaxe <code>${}</code>.
    </para>
    <programlisting>
<![CDATA[
; | é usado par OR bit a bit
tres = 2|3

; & é usado para AND bit a bit
quatro = 6&5

; ^ é usado para XOR bit a bit
cinco = 3^6

; ~ é usado para inversão bit a bit
dois_negativo = ~1

; () é usado para agrupamento
sete = (8|7)&(6|5)

; Interpola a variável de ambiente PATH
path = ${PATH}

; Interpola a opção de configuração 'memory_limit'
limite_de_memoria_configurado = ${memory_limit}

]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Fazendo Escape de Caracteres</title>
    <para>
     Alguns caracteres têm significado especial em strings com aspas duplas e devem ser escapados pela barra invertida prefixada.
     Primeiramente, eles são as aspas duplas <code>"</code> como marcação dos limites, e a barra invertida <code>\</code> em si
     (se seguida por um dos caracteres especiais):
    </para>
    <programlisting>
<![CDATA[
fala = "Ela disse \"Exatamente meu ponto\"." ; Resulta em uma string contendo aspas duplas.
dica = "Use \\\" para escapar aspas duplas" ; Resulta em: Use \" para escapar aspas duplas
]]>
    </programlisting>
    <para>
     Há uma excecão feita para caminhos do tipo Windows: é possível não escapar barra invertida no final
     se a string entre aspas for diretamente seguida por uma quebra de linha:
    </para>
    <programlisting>
<![CDATA[
save_path = "C:\Temp\"
]]>
    </programlisting>
    <para>
     Se for necessário escapar aspas duplas seguidas pode quebra de linha em um valor com várias linhas,
     é possível usar concatenação de valores da seguinte forma
     (há uma string com aspas duplas diretamente seguida por outra):
    </para>
    <programlisting>
<![CDATA[
long_text = "Lorem \"ipsum\"""
 dolor" ; Resulta em: Lorem "ipsum"\n dolor
]]>
    </programlisting>
    <para>
     Outro caractere com significado especial é <code>$</code> (sinal de cifrão).
     Deve ser escapado se for seguido de chave:
    </para>
    <programlisting>
<![CDATA[
code = "\${test}"
]]>
    </programlisting>
    <para>
     Escapar caracteres não é suportado no modo <constant>INI_SCANNER_RAW</constant>
     (neste modo todos os caracateres são processados como eles são).
    </para>
    <para>
     Note que o interpretador INI não suporta sequências escape padrões (<code>\n</code>, <code>\t</code> etc.).
     Se necessário, faça pós processamento do resultado de <function>parse_ini_file</function> com a função <function>stripcslashes</function>.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Essa função não tem relação nenhuma com o
    arquivo &php.ini;. Ele já está processado no momento
    em o script é executado. Esta função pode ser usada para
    ler os arquivos de configuração da própria aplicação do usuário.
   </para>
  </note>
  <note>
   <para>
    Se um valor no arquivo INI tiver algum caractere não
    alfanumérico, ele precisará ser envolvido em aspas duplas (").
   </para>
  </note>
  <note>
   <simpara>
    Existem algumas palavras reservadas que não podem ser usadas como
    chaves em arquivos INI. Elas incluem: <literal>null</literal>, <literal>yes</literal>,
    <literal>no</literal>, <literal>true</literal>, <literal>false</literal>,
    <literal>on</literal>, <literal>off</literal> e <literal>none</literal>.
    Valores <literal>null</literal>, <literal>off</literal>, <literal>no</literal> e
    <literal>false</literal> resultam em <literal>""</literal>, e os valores
    <literal>on</literal>, <literal>yes</literal> e <literal>true</literal> resultam
    em <literal>"1"</literal>, a menos que o modo <constant>INI_SCANNER_TYPED</constant> seja usado.
    Os caracteres <literal>?{}|&amp;~!()^"</literal> não devem ser usados em nenhum lugar da
    chave e têm um significado especial no valor.
   </simpara>
  </note>
  <note>
   <para>
    Entradas sem um sinal de igualdade são ignoradas. Por exemplo, "foo"
    é ignorado enquanto que "bar =" é interpretado e adicionado com um valor
    vazio. Por exemplo, o MySQL tem uma configuração "no-auto-rehash"
    no arquivo <filename>my.cnf</filename> que não leva um valor, portanto
    ela é ignorada.
   </para>
  </note>
  <note>
   <para>
    Arquivos INI são feralmente tratados como texto puro por servidores web e depois enviados aos navegadores se requisitados.
    Isto quer dizer que para segurança deve-se manter os arquivos INI fora da raiz de documentos da web ou reconfigurar seu
    servidor web para não disponibilizá-los. Falha em fazer isso pode introduzir um risco de segurança.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_ini_string</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
