<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0bfb0eb957e0468912af86bba09fae588010c1df Maintainer: leonardolara Status: ready --><!-- CREDITS: rarruda, ae, felipe, leonardolara -->
<refentry xml:id="function.flock" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>flock</refname>
  <refpurpose>Travamento consultivo portável de arquivo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>flock</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>int</type><parameter>operation</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">would_block</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>flock</function> permite realizar um modelo simple de leitura/escrita
   que pode ser usado virtualmente em qualquer plataforma (incluindo na maioria dos derivados Unix
   e até mesmo no Windows).
  </para>
  <para>
   A trava é liberada também por <function>fclose</function>,
   ou quando o fluxo <parameter>stream</parameter> sofrer coleta de lixo.
  </para>
  <para>
   O PHP suporta uma maneira portável de travamento de arquivos completos de forma consultiva
   (que significa que todos programas de acesso devem usar a mesma forma de travamento
   ou ela não irá funcionar). Por padrão, esta função irá bloquear até que
   a trava solicitada seja adquirida; isto pode ser controlado com a opção <constant>LOCK_NB</constant> documentada abaixo.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      &fs.file.pointer;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operation</parameter></term>
     <listitem>
      <para>
       <parameter>operation</parameter> deve ser uma das opções a seguir:
       <itemizedlist>
        <listitem>
         <simpara>
           <constant>LOCK_SH</constant> para obter uma trava compartilhada (leitura).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
           <constant>LOCK_EX</constant> para obter uma trava exclusiva (escrita).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
           <constant>LOCK_UN</constant> para liberar uma trava (compartilhada ou exclusiva).
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       É possível também adicionar <constant>LOCK_NB</constant> como uma máscara de bits a uma
       das operações acima, caso seja necessário que <function>flock</function> não
       bloqueie durante a tentativa de travamento.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>would_block</parameter></term>
     <listitem>
      <para>
       O terceiro argumento opcional é definido como 1 se a trava for bloquear
       (condição de erro número EWOULDBLOCK).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>flock</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$fp = fopen("/tmp/lock.txt", "r+");

if (flock($fp, LOCK_EX)) {  // adquire uma trava exclusiva
    ftruncate($fp, 0);      // trunca o arquivo
    fwrite($fp, "Escreve alguma coisa aqui\n");
    fflush($fp);            // descarrega a saída antes de liberar a trava
    flock($fp, LOCK_UN);    // libera a trava
} else {
    echo "Não foi possível obter a trava!";
}

fclose($fp);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>flock</function> usando a opção <constant>LOCK_NB</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('/tmp/lock.txt', 'r+');

/* Ativa a opção LOCK_NB em uma operação LOCK_EX */
if(!flock($fp, LOCK_EX | LOCK_NB)) {
    echo 'Não foi possível obter a trava';
    exit(-1);
}

/* ... */

fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>flock</function> usa travamento mandatório no lugar de travamento
    consultivo no Windows. Travamento mandatório também é suportado no Linux e
    em sistemas operacionais baseados em System V através do mecanismo usual suportado pela
    chamada de sistema fcntl(): isto é, se o arquivo em questão tem a o bit de permissão
    setgid ligado e o bit de execução do grupo desligado. No Linux, o sistema de
    arquivos também precisará ser montado com a opção mand para que isto funcione.
   </para>
  </note>
  <note>
   <para>
    Pelo motivo de <function>flock</function> requerer um ponteiro de arquivo, pode ser
    necessário usar um arquivo de trava especial para proteger o acesso a um aqruivo que deseja-se
    truncar abrindo-o em modo de escrita (com um argumento "w" ou "w+" para
    <function>fopen</function>).
   </para>
  </note>
  <note>
   <para>
    Pode somente ser usado em ponteiros de arquivos retornados por <function>fopen</function>
    para arquivos locais, ou ponteiros de arquivos que apontam para fluxo no espaço do usuário que
    implementam o método <function>streamWrapper::stream_lock</function>.
   </para>
  </note>
  <warning>
   <para>
    Atribuir outro valor ao argumento <parameter>stream</parameter> em
    código subsequente irá liberar a trava.
   </para>
  </warning>
  <warning>
   <para>
    Em alguns sistemas operacionais, <function>flock</function> é implementado no nível
    de processos. Ao usar uma API de servidor multi-tarefa pode ser que
    se consiga confiar em <function>flock</function> para proteger arquivos
    contra outros scripts PHP sendo executados em tarefas parelelas da mesma
    instância do servidor!
   </para>
   <para>
    <function>flock</function> não é suportado em sistemas de arquivos antiquados como
    <literal>FAT</literal> e seus derivativos e portanto sempre
    retornará &false; nestes ambientes.
   </para>
  </warning>
  <note>
   <para>
    No Windows, se o processo de travamento abrir o arquivo uma segunda vez, ele não
    poderá acessar o arquivo através deste segundo manipulador até que destrave o arquivo.
   </para>
  </note>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
