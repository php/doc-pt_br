<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e82ff8a846af03b863c4a57fbedc0a93af0e68db Maintainer: leonardolara Status: ready --><!-- CREDITS: rarruda, ae, leonardolara -->
<refentry xml:id="function.clearstatcache" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>clearstatcache</refname>
  <refpurpose>Limpa o cache de estado de arquivos</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>clearstatcache</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>clear_realpath_cache</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>filename</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Quando são chamadas as funções <function>stat</function>, <function>lstat</function> ou
   qualquer uma das funções afetadas (listadas abaixo),
   o PHP mantém em cache as informações que essas funções retornam para fornecer
   desempenho mais rápido. Entretanto, em certos casos pode ser necessário limpar as
   informações em cache. Por exemplo, se um mesmo arquivo é verificado
   várias vezes em um único script, e esse arquivo corre o risco de
   ser apagado ou modificado durante a operação do script, pode ser necessário
   limpar os dados do cache. Nesses casos, pode-se utilizar a função
   <function>clearstatcache</function> para limpar as informações que
   o PHP mantém em cache sobre um arquivo.
  </para>
  <para>
   Deve-se notar também que o PHP não guarda informação em cache sobre arquivos
   não existente. Assim, a função <function>file_exists</function> for chamada em um arquivo que
   não existe, ela retornará &false; até que o arquivo seja criado. Se o arquivo
   for criado, ela retornará &true; mesmo que o arquivo seja removido.
   Entretanto, a função <function>unlink</function> limpa o cache automaticamente.
  </para>
  <note>
   <para>
     Esta função guarda infomações em cache sobre nomes de arquivos específicos, de forma que somente
     será necessário chamar <function>clearstatcache</function> se estão sendo realizadas
     várias operações sobre o mesmo nome de arquivo e seja necessário que a informação
     sobre esse arquivo em particular não seja armazenada em cache.
   </para>
  </note>
  <para>
   As funções afetadas incluem <function>stat</function>,
   <function>lstat</function>,
   <function>file_exists</function>,
   <function>is_writable</function>,
   <function>is_readable</function>,
   <function>is_executable</function>,
   <function>is_file</function>,
   <function>is_dir</function>,
   <function>is_link</function>,
   <function>filectime</function>,
   <function>fileatime</function>,
   <function>filemtime</function>,
   <function>fileinode</function>,
   <function>filegroup</function>,
   <function>fileowner</function>,
   <function>filesize</function>,
   <function>filetype</function>, e
   <function>fileperms</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>clear_realpath_cache</parameter></term>
     <listitem>
      <para>
       Se deve-se <emphasis>também</emphasis> limpar o cache de caminho real.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Limpa o cache de caminho real para um arquivo específico somente; apenas
       usado se <parameter>clear_realpath_cache</parameter> for &true;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>clearstatcache</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$file = 'output_log.txt';

function get_owner($file)
{
    $stat = stat($file);
    $user = posix_getpwuid($stat['uid']);
    return $user['name'];
}

$format = "UID @ %s: %s\n";

printf($format, date('r'), get_owner($file));

chown($file, 'ross');
printf($format, date('r'), get_owner($file));

clearstatcache();
printf($format, date('r'), get_owner($file));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
UID @ Sun, 12 Oct 2008 20:48:28 +0100: root
UID @ Sun, 12 Oct 2008 20:48:28 +0100: root
UID @ Sun, 12 Oct 2008 20:48:28 +0100: ross
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
