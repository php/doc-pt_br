<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6ceccac7860f382f16ac1407baf54f656e85ca0b Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<phpdoc:classref xml:id="class.eventbufferevent" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EventBufferEvent</title>
 <titleabbrev>EventBufferEvent</titleabbrev>
 <partintro>
<!-- {{{ EventBufferEvent intro -->
  <section xml:id="eventbufferevent.intro">
   &reftitle.intro;
   <para>
    Representa o evento buffer do Libevent.
   </para>
   <para>
    Normalmente, uma aplicação deseja realizar uma certa quantidade de buffer de dados
    além de apenas responder aos eventos. Quando queremos escrever dados, por
    por exemplo, o padrão usual se parece com:
   </para>
   <orderedlist>
    <listitem>
     <para>
      Decidimos que queremos gravar alguns dados em uma conexão; coloque esses dados
      em um buffer.
     </para>
    </listitem>
    <listitem>
     <para>
      Aguarde até que a conexão se torne gravável
     </para>
    </listitem>
    <listitem>
     <para>
      Escreva o máximo de dados que pudermos
     </para>
    </listitem>
    <listitem>
     <para>
      Lembre-se de quanto escrevemos e se ainda tivermos mais dados para escrever,
      espere que a conexão se torne gravável novamente.
     </para>
    </listitem>
   </orderedlist>
   <para>
    Este padrão de E/S em buffer é comum o suficiente para que o Libevent forneça um
    mecanismo genérico para isso. Um "evento buffer" consiste num evento subjacente
    transporte (como um socket), um buffer de leitura e um buffer de gravação. Em vez de
    eventos regulares, que fornecem retornos de chamada quando o transporte subjacente está
    pronto para ser lido ou escrito, um evento buffer invoca seu evento fornecido pelo usuário
    pelos retornos de chamada quando leu ou gravou dados suficientes.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="eventbufferevent.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EventBufferEvent</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>EventBufferEvent</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.reading">EventBufferEvent::READING</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.writing">EventBufferEvent::WRITING</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.eof">EventBufferEvent::EOF</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.error">EventBufferEvent::ERROR</varname>
     <initializer>32</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.timeout">EventBufferEvent::TIMEOUT</varname>
     <initializer>64</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.connected">EventBufferEvent::CONNECTED</varname>
     <initializer>128</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-close-on-free">EventBufferEvent::OPT_CLOSE_ON_FREE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-threadsafe">EventBufferEvent::OPT_THREADSAFE</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-defer-callbacks">EventBufferEvent::OPT_DEFER_CALLBACKS</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.opt-unlock-callbacks">EventBufferEvent::OPT_UNLOCK_CALLBACKS</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.ssl-open">EventBufferEvent::SSL_OPEN</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.ssl-connecting">EventBufferEvent::SSL_CONNECTING</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.constants.ssl-accepting">EventBufferEvent::SSL_ACCEPTING</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.props.fd">fd</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type>int</type>
     <varname linkend="eventbufferevent.props.priority">priority</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>EventBuffer</type>
     <varname linkend="eventbufferevent.props.input">input</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>EventBuffer</type>
     <varname linkend="eventbufferevent.props.output">output</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.eventbufferevent')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EventBufferEvent properties -->
  <section xml:id="eventbufferevent.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="eventbufferevent.props.fd">
     <term>
      <varname>fd</varname>
     </term>
     <listitem>
      <para>
       Descritor de arquivo numérico associado ao evento de buffer. Normalmente
       representa um socket vinculado. É igual a &null;, se não houver arquivo
       descritor (socket) associado ao evento buffer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.props.priority">
     <term>
      <varname>priority</varname>
     </term>
     <listitem>
      <para>
       A prioridade dos eventos usados ​​para implementar o evento buffer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.props.input">
     <term>
      <varname>input</varname>
     </term>
     <listitem>
      <para>
       Objeto de buffer de entrada subjacente(
       <classname>EventBuffer</classname>
       )
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.props.output">
     <term>
      <varname>output</varname>
     </term>
     <listitem>
      <para>
       Objeto de buffer de saída subjacente(
       <classname>EventBuffer</classname>
       )
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
<!-- {{{ EventBufferEvent constants -->
  <section xml:id="eventbufferevent.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="eventbufferevent.constants.reading">
     <term>
      <constant>EventBufferEvent::READING</constant>
     </term>
     <listitem>
      <para>
       Ocorreu um evento durante uma operação de leitura no bufferevent. Veja
       outras opções para qual evento foi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.writing">
     <term>
      <constant>EventBufferEvent::WRITING</constant>
     </term>
     <listitem>
      <para>
       Ocorreu um evento durante uma operação de gravação no bufferevent. Veja
       outras opções para qual evento foi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.eof">
     <term>
      <constant>EventBufferEvent::EOF</constant>
     </term>
     <listitem>
      <para>
       Obteve uma indicação de fim de arquivo no evento buffer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.error">
     <term>
      <constant>EventBufferEvent::ERROR</constant>
     </term>
     <listitem>
      <para>
       Ocorreu um erro durante uma operação bufferevent. Para informações sobre
       qual foi o maior erro, chame
       <methodname>EventUtil::getLastSocketErrno</methodname>
       e/ou
       <methodname>EventUtil::getLastSocketError</methodname>
       .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.timeout">
     <term>
      <constant>EventBufferEvent::TIMEOUT</constant>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.connected">
     <term>
      <constant>EventBufferEvent::CONNECTED</constant>
     </term>
     <listitem>
      <para>
       Concluiu uma conexão solicitada no bufferevent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-close-on-free">
     <term>
      <constant>EventBufferEvent::OPT_CLOSE_ON_FREE</constant>
     </term>
     <listitem>
      <para>
       Quando o evento buffer for liberado, fecha o transporte subjacente. Esse
       fechará um socket subjacente, liberará um evento de buffer subjacente, etc.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-threadsafe">
     <term>
      <constant>EventBufferEvent::OPT_THREADSAFE</constant>
     </term>
     <listitem>
      <para>
       Alocar bloqueios automaticamente para o bufferevent, para que seja seguro
       usar em vários threads.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-defer-callbacks">
     <term>
      <constant>EventBufferEvent::OPT_DEFER_CALLBACKS</constant>
     </term>
     <listitem>
      <para>
       Quando essa opção estiver definida, o bufferevent adia todos os seus retornos de chamada. Veja
       <link
       xlink:href="http://www.wangafu.net/~nickm/libevent-book/Ref6_bufferevent.html#_deferred_callbacks">Rápida
       programação de rede portátil sem bloqueio com Libevent, retornos de chamada diferidos</link>
       .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.opt-unlock-callbacks">
     <term>
      <constant>EventBufferEvent::OPT_UNLOCK_CALLBACKS</constant>
     </term>
     <listitem>
      <para>
       Por padrão, quando o bufferevent está configurado para ser threadsafe, o buffer
       dos bloqueios do evento são cancelados sempre que qualquer retorno de chamada fornecido pelo usuário for
       invocado. Definir esta opção faz com que o Libevent libere o buffer
       de bloqueio do evento quando ele estiver invocando os retornos de chamada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.ssl-open">
     <term>
      <constant>EventBufferEvent::SSL_OPEN</constant>
     </term>
     <listitem>
      <para>
       O handshake SSL está concluído
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.ssl-connecting">
     <term>
      <constant>EventBufferEvent::SSL_CONNECTING</constant>
     </term>
     <listitem>
      <para>
       SSL está atualmente realizando negociações como um cliente
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbufferevent.constants.ssl-accepting">
     <term>
      <constant>EventBufferEvent::SSL_ACCEPTING</constant>
     </term>
     <listitem>
      <para>
       SSL está atualmente realizando negociações como um servidor
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.eventbufferevent;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
