<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bbfa9738785f054752e6cb565cd0a58e71015bc6 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<chapter  xml:id="event.constructing.signal.events" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Construindo eventos de sinalização</title>
 <para>
  O evento também pode observar sinais do estilo POSIX. Para construir um manipulador para um
  sinal, use
  o construtor <methodname>Event::__construct</methodname>
  com a opção
  <constant>Event::SIGNAL</constant>
  ou
  o método de fábrica (factory)
  <methodname>Event::signal</methodname>.
 </para>
 <example>
  <title>Tratamento do sinal <literal>SIGTERM</literal></title>
  <programlisting role="php">
<![CDATA[
<?php
/*
Inicie-o em uma janela de terminal:

$ php examples/signal.php

Em outra janela do terminal descubra o pid e envie o SIGTERM, por exemplo:

$ ps aux | grep examp
ruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php
ruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp
$ kill -TERM 3976

Na primeira janela do terminal você deve pegar o seguinte:

Caught signal 15
*/
class MyEventSignal {
    private $base, $ev;

    public function __construct($base) {
        $this->base = $base;
        $this->ev = Event::signal($base, SIGTERM, array($this, 'eventSighandler'));
        $this->ev->add();
    }

    public function eventSighandler($no, $c) {
        echo "Caught signal $no\n";
        $this->base->exit();
    }
}

$base = new EventBase();
$c    = new MyEventSignal($base);

$base->loop();
?>
]]>
  </programlisting>
 </example>
 <para>
  Observe que os retornos de chamada de sinal são executados no loop de eventos após a ocorrência do sinal,
  portanto, é seguro para eles chamarem funções que você não deveria
  chamar de um manipulador de sinal POSIX regular.
 </para>
 <para></para>
 <para>
  See also
  <link
  xlink:href="http://www.wangafu.net/~nickm/libevent-book/Ref4_event.html#_constructing_signal_events">Programação
  de rede rápida e portátil sem bloqueio com Libevent, Construindo Eventos de
  Sinal</link>
  .
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
