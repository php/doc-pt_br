<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f80105b4fc1196bd8d5fecb98d686b580b1ff65d Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<phpdoc:classref xml:id="class.eventbuffer" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EventBuffer</title>
 <titleabbrev>EventBuffer</titleabbrev>
 <partintro>
<!-- {{{ EventBuffer intro -->
  <section xml:id="eventbuffer.intro">
   &reftitle.intro;
   <para>
    <classname>EventBuffer</classname>
    representa o "evbuffer" do Libevent, uma funcionalidade de utilitário para E/S
    em buffer.
   </para>
   <para>
    Os buffers de eventos devem ser geralmente úteis para fazer a parte do "buffer"
    de E/S de rede com buffer.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="eventbuffer.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EventBuffer</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EventBuffer</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-any">EventBuffer::EOL_ANY</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-crlf">EventBuffer::EOL_CRLF</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-crlf-strict">EventBuffer::EOL_CRLF_STRICT</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-lf">EventBuffer::EOL_LF</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.ptr-set">EventBuffer::PTR_SET</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.ptr-add">EventBuffer::PTR_ADD</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.props.length">length</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.props.contiguous-space">contiguous_space</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.eventbuffer')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EventBuffer properties -->
  <section xml:id="eventbuffer.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="eventbuffer.props.length">
     <term>
      <varname>length</varname>
     </term>
     <listitem>
      <para>
       O número de bytes armazenados em um buffer de eventos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.props.contiguous-space">
     <term>
      <varname>contiguous_space</varname>
     </term>
     <listitem>
      <para>
       O número de bytes armazenados contiguamente na frente do buffer. Os
       bytes em um buffer podem ser armazenados em vários pedaços separados de memória;
       a propriedade retorna o número de bytes atualmente armazenados no primeiro
       pedaço.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
<!-- {{{ EventBuffer constants -->
  <section xml:id="eventbuffer.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="eventbuffer.constants.eol-any">
     <term>
      <constant>EventBuffer::EOL_ANY</constant>
     </term>
     <listitem>
      <para>
       O fim da linha é qualquer sequência de qualquer número de caracteres de retorno de carro e
       avanço de linha. Este formato não é muito útil; ele existe principalmente
       para compatibilidade com versões anteriores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.eol-crlf">
     <term>
      <constant>EventBuffer::EOL_CRLF</constant>
     </term>
     <listitem>
      <para>
       O final da linha é um retorno de carro opcional, seguido por um
       avanço de linha. (Em outras palavras, é um
       <literal>"\r\n"</literal>
       ou um
       <literal>"\n"</literal>
       .) Este formato é útil na análise de protocolos de Internet baseados em texto,
       uma vez que os padrões geralmente prescrevem um
       <literal>"\r\n"</literal>
       terminador de linha, mas clientes não conformes às vezes dizem apenas
       <literal>"\n"</literal>
       .
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.eol-crlf-strict">
     <term>
      <constant>EventBuffer::EOL_CRLF_STRICT</constant>
     </term>
     <listitem>
      <para>
       O final de uma linha é um único retorno de carro, seguido por um único
       avanço de linha. (Isso também é conhecido como
       <literal>"\r\n"</literal>
       . Os valores ASCII são
       <literal>0x0D</literal>
       <literal>0x0A</literal>
       ).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.eol-lf">
     <term>
      <constant>EventBuffer::EOL_LF</constant>
     </term>
     <listitem>
      <para>
       O final de uma linha é um único caractere de avanço de linha. (Isso também é conhecido
       como
       <literal>"\n"</literal>
       . O valor ASCII é
       <literal>0x0A</literal>
       .)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.ptr-set">
     <term>
      <constant>EventBuffer::PTR_SET</constant>
     </term>
     <listitem>
      <para>
       Sinalizador usado como argumento do método
       <methodname>EventBuffer::setPosition</methodname>
       Se este sinalizador for especificado, o ponteiro de posição será movido para uma
       posição absoluta dentro do buffer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.ptr-add">
     <term>
      <constant>EventBuffer::PTR_ADD</constant>
     </term>
     <listitem>
      <para>
       O mesmo que
       <constant>EventBuffer::PTR_SET</constant>
       , exceto que este sinalizador causa ao método
       <methodname>EventBuffer::setPosition</methodname>
       para mover a posição para frente até o número especificado de
       bytes (em vez de definir a posição absoluta).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.eventbuffer;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
