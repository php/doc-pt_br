<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8a0ab242e83ec201615c947eaa0e1c5719576c12 Maintainer: ae Status: ready -->
<refentry xml:id="function.min" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>min</refname>
  <refpurpose>Encontra o menor valor</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>mixed</type><methodname>min</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
   </methodsynopsis>
   <simpara>Assintura alternativa, não suportada com argumentos nomeados:</simpara>
   <methodsynopsis>
    <type>mixed</type><methodname>min</methodname>
    <methodparam><type>array</type><parameter>value_array</parameter></methodparam>
   </methodsynopsis>
  <para>
   Se o primeiro e único argumento é um array, <function>min</function>
   retorna o menor valor no array. Se no mínimo dois parâmetros são fornecidos,
   <function>min</function> retorna o menor deles.
  </para>
  <note>
   <para>
    Valores de tipos diferentes serão comparados utilizando <link linkend="language.operators.comparison">
    as regras padrões de comparação</link>. Por exemplo, uma <type>string</type> não numérica será
    comparada com um inteiro <type>int</type> como se fosse <literal>0</literal>, mas vários valores não numéricos
    <type>string</type>s serão comparadas alfabeticamente. O valor retornado terá o tipo
    original, sem nenhuma conversão aplicada.
   </para>
  </note>
  <caution>
   <simpara>
    Cuidado ao passar argumentos de vários tipos, o que deixa o resultado de
    <function>min</function> imprevisível.
   </simpara>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Qualquer valor <link linkend="language.operators.comparison">comparável</link>.
       <!---->
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       Qualquer valor <link linkend="language.operators.comparison">comparável</link>.
       <!---->
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value_array</parameter></term>
     <listitem>
      <para>
       Um array contendo os valores.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>min</function> retorna o valor considerado o "menor" de acordo com as comparações
   padrão. Se valores de diferentes tipos forem avaliados como iguais (por exemplo <literal>0</literal>
   e <literal>'abc'</literal>) então o primeiro valor fornecido será retornado.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se um array vazio for informado, <function>min</function> lança um <classname>ValueError</classname>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>min</function> lança um <classname>ValueError</classname> em caso de falhas;
       anteriormente retornava &false; e emitia um aviso <constant>E_WARNING</constant>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Como as <link linkend="migration80.incompatible.core.string-number-comparision">
       comparações de número e string</link> mudaram,
       <function>min</function> não mais retorna um valor
       diferente por conta da ordem dos argumentos informados.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplos de <function>min</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo min(2, 3, 1, 6, 7);  // 1
echo min(array(2, 4, 5)); // 2

// Aqui a comparação que ocorre é -1 < 0, e -1 é o menor valor
echo min('hello', -1);    // -1

// Quando comparando arrays de vários comprimentos, min retorna o mais curto
$val = min(array(2, 2, 2), array(1, 1, 1, 1)); // array(2, 2, 2)

// Vários arrays de mesmo tamanho, a comparação ocorre nos elementos, da esquerda para direita
// so in our example: 2 == 2, but 4 < 5
$val = min(array(2, 4, 8), array(2, 5, 1)); // array(2, 4, 8)

// Se for fornecido um array e um primitivo, o array nunca é retornado
// pois as comparações tratam os arrays como maiores que outros valores
$val = min('string', array(2, 5, 7), 42);   // string

// Se um argumento é null ou booleando, ele será comparado com outros valores
// usando a regra que FALSE < TRUE e NULL == FALSE,
// independente dos tipos envolvidos
// Nos exemplos abaixo -10 e 10 são tratados como TRUE nas comparações
$val = min(-10, FALSE, 10); // FALSE
$val = min(-10, NULL, 10);  // NULL

// 0 é tratado como FALSE, então é menor que TRUE
$val = min(0, TRUE); // 0
?>
]]>
    </programlisting>
   </example>
  </para>

 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>max</function></member>
    <member><function>count</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
