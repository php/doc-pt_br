<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 96c9d88bad9a7d7d44bfb7f26c226df7ee9ddf26 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->

<chapter xml:id="mbstring.php4.req" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Requisitos de Codificação de Caracteres em PHP</title>
 <para>
  As codificações dos seguintes tipos são seguras para uso com o PHP.
  <itemizedlist>
   <listitem>
    <para>
     Uma codificação de byte único,
     <itemizedlist>
      <listitem>
       <simpara>
        que possui mapeamentos compatíveis com ASCII (compatíveis com ISO646) para os
        caracteres no intervalo de <literal>00h</literal> a
        <literal>7fh</literal>.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </listitem>
   <listitem>
    <para>
     Uma codificação multibyte,
     <itemizedlist>
      <listitem>
       <simpara>
        que possui mapeamentos compatíveis com ASCII para os caracteres no intervalo de
        <literal>00h</literal> a <literal>7fh</literal>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        que não usa sequências de escape ISO2022.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        que não usa um valor de <literal>00h</literal> a
        <literal>7fh</literal> em nenhum dos bytes compostos
        que representam um único caractere.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </listitem>
  </itemizedlist>
 </para>
 <para>
  Esses são exemplos de codificações de caracteres que provavelmente não funcionarão
  corretamente com o PHP.
  <informalexample>
   <programlisting>
<![CDATA[
JIS, SJIS, ISO-2022-JP, BIG-5
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Embora scripts PHP escritos em qualquer uma dessas codificações possam não funcionar,
  especialmente no caso em que strings codificadas aparecem como identificadores
  ou literais no script, você pode evitar o uso dessas codificações configurando a
  função de filtro de codificação transparente do <literal>mbstring</literal> para
  consultas HTTP de entrada.
 </para>
 <note>
  <para>
   É altamente desencorajado usar SJIS, BIG5, CP936, CP949 e GB18030 para
   a codificação interna, a menos que você esteja familiarizado com o analisador, o
   scanner e a codificação de caracteres.
  </para>
 </note>
 <note>
  <para>
   Se você estiver se conectando a um banco de dados com PHP, é recomendável
   que você use a mesma codificação de caracteres para tanto o banco de dados quanto o
   <literal>codificação interna</literal> para facilitar o uso e obter melhor
   desempenho.
  </para>
  <para>
   Se estiver usando o PostgreSQL, a codificação de caracteres usada no
   banco de dados e aquela usada no PHP podem diferir, pois ele oferece suporte
   à conversão automática de conjunto de caracteres entre o backend e o frontend.
  </para>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
