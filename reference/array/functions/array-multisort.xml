<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 6a6f43d1c490a57b452656db285de6d136055ed2 Maintainer: ae Status: ready --><!-- CREDITS: lucasr,amandavale,ae,lhsazevedo -->
<refentry xml:id="function.array-multisort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_multisort</refname>
  <refpurpose>Ordena múltiplos arrays ou arrays multidimensionais</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_multisort</methodname>
   <methodparam><type>array</type><parameter role="reference">array1</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>array1_sort_order</parameter><initializer>SORT_ASC</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>array1_sort_flags</parameter><initializer>SORT_REGULAR</initializer></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>rest</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_multisort</function> pode ser usada para ordenar
   vários arrays de uma vez, ou um array multidimensional por uma
   ou mais dimensões.
  </para>
  <para>
   Chaves associativas (<type>string</type>) serão mantidas, mas chaves
   númericas serão reindexadas.
  </para>
  &note.sort-unstable;
  &note.reset-index;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array1</parameter></term>
     <listitem>
      <para>
       Um <type>array</type> a ser ordenado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array1_sort_order</parameter></term>
     <listitem>
      <para>
       A ordenação para ser utilizada no argumento <type>array</type> anterior. Pode ser
       <constant>SORT_ASC</constant> para ordenar na ascendente (crescente) <constant>SORT_DESC</constant>
       para ordernar na descendente (decrescente).
      </para>
      <para>
       Este argumento pode ser trocado com <parameter>array1_sort_flags</parameter>
       ou ser omitido completamente, e nesse caso é utilizado <constant>SORT_ASC</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array1_sort_flags</parameter></term>
     <listitem>
      <para>
       Opções de ordenamento para o argumento <type>array</type> anterior:
      </para>
      <para>
       Flags:
       <itemizedlist>
        <listitem>
         <simpara><constant>SORT_REGULAR</constant> - comparar itens normalmente
         (não modidifica tipos)</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_NUMERIC</constant> - compare itens numericamente</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_STRING</constant> - compare itens como strings</simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_LOCALE_STRING</constant> - compare itens como
          strings, utilizando o locate atual. Utiliza o locale,
          que pode ser modificado com <function>setlocale</function>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_NATURAL</constant> - compare itens como strings
          utilizando a "ordenação natural" de <function>natsort</function>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_FLAG_CASE</constant> - pode ser combinado
          (bitwise OR) com
          <constant>SORT_STRING</constant> ou
          <constant>SORT_NATURAL</constant> para ordenar as strings sem considerar maiúsculas e minúsculas
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Este argumento pode ser trocado com <parameter>array1_sort_order</parameter>
       ou completamente omitido, e nesse caso é utilizado <constant>SORT_REGULAR</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rest</parameter></term>
     <listitem>
      <para>
       Outros arrays, podendo informar também ordem e flags de ordenação. Somente elementos
       correspondentes a elementos equivalentes nos arrays anteriores são comparados.
       Em outras palavras, a ordem é lexigráfica.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ordenando vários arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar1 = array(10, 100, 100, 0);
$ar2 = array(1, 3, 2, 4);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>
]]>
    </programlisting>
    <para>
     Nesse exemplo, após a ordenação o primeiro array conterá 0,
     10, 100, 100. O segundo array conterá 4, 1, 2, 3. Os
     itens no segundo array correspondentes ao itens idênticos
     do primeiro array (100 e 100) também são ordenados.
    </para>
    <screen>
<![CDATA[
array(4) {
  [0]=> int(0)
  [1]=> int(10)
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(4)
  [1]=> int(1)
  [2]=> int(2)
  [3]=> int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordenando arrays multi dimensionais</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1,  2, "2",   3,   1)
      );
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
    </programlisting>
    <para>
     Neste exemplo, após a ordenação o primeiro array será transformado para
     "10", 100, 100, 11, "a" (ordenado os itens como strings em ordem
     crescente). O segundo conterá 1, 3, "2", 2, 1 (ordenado como números,
     em ordem decrescente).
    </para>
    <screen>
<![CDATA[
array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordenando resultados de bancos de dados</title>
    <para>
     Neste exemplo, cada elemento no array <varname>data</varname>
     representa um iten em uma tabela. Esse tipo de conjunto de dados é típico
     de registros de base de dados.
    </para>
    <para>
     Exemplo:
    </para>
    <screen>
<![CDATA[
volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
]]>
    </screen>
    <para>
     Os dados estão em um array, chamado <varname>data</varname>. Isso pode ser obtido,
     por exemplo, de rodar <function>mysqli_fetch_assoc</function> em loop.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>
]]>
    </programlisting>
    <para>
     Vamos ordenar <varname>volume</varname> decrescente e
     <varname>edition</varname> crescente.
    </para>
    <para>
     Aqui temos um array de registros, mas <function>array_multisort</function>
     exige um array de colunas, então é preciso converter os dados utilizando o código abaixo
     para então executar a ordenação.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Obtain a list of columns
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// Você pode usar array_column() em vez do código acima
$volume  = array_column($data, 'volume');
$edition = array_column($data, 'edition');

// Ordena os dados por volume decrescente, edição crescente.
// Adiciona $data como último parâmetro, para ordenar por uma chave comum.
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>
]]>
    </programlisting>
    <para>
     O conjunto de dados agora está ordenado, assim:
    </para>
    <screen>
<![CDATA[
volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordenação case insensitive</title>
    <para>
     <constant>SORT_STRING</constant> e
     <constant>SORT_REGULAR</constant> são sensíveis a maiúsculas e minúsculas, de forma que strings
     começando com maiúsculas aparecerão primeiro que strings começando com
     minúsculas.
    </para>
    <para>
     Para realizar uma ordenação case insensitive é preciso forçar a ordenação
     a rodar com uma cópia do array original, transformado em minúsculas.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>usort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
