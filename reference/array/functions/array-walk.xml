<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d45ff7a3e78243470d1b7e5141d7ded022286d7f Maintainer: ae Status: ready --><!-- CREDITS: felipe,lucasr,cautnew,ae -->
<refentry xml:id="function.array-walk" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk</refname>
  <refpurpose>Aplica uma determinada função em cada elemento de um array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk</methodname>
   <methodparam><type class="union"><type>array</type><type>object</type></type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Aplica uma função definida pelo usuário passada pelo argumento
   <parameter>callback</parameter> em cada elemento de <parameter>array</parameter>.
  </simpara>
  <para>
   <function>array_walk</function> não é afetado pelo ponteiro interno de
   <parameter>array</parameter>.  <function>array_walk</function>
   percorrerá por todo array desconsiderando a posição do ponteiro.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       O array de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Normalmente, o <parameter>callback</parameter> recebe dois parâmetros.
       O valor do parâmetro <parameter>array</parameter> sendo o primeiro, e
       a chave/índice o segundo.
      </para>
      <note>
       <para>
        Se <parameter>callback</parameter> precisar alterar realmente os valores
        do array, especifique que o primeiro parâmetro de
        <parameter>callback</parameter> deve ser passado por
        <link linkend="language.references">referência</link>. Então
        qualquer mudança feita nesses elementos serão feitas
        no próprio array também.
       </para>
      </note>
      <note>
        <para>
          Muitas funções internas (por exemplo <function>strtolower</function>)
          lançarão um alerta se forem passados mais argumentos
          que o esperado e não forem utilizados diretamente no
          <parameter>callback</parameter>.
        </para>
      </note>
      <para>
       Apenas os valores de um <parameter>array</parameter> podem potencialmente
       ser alterados; sua estrutura não pode ser alterada, por exemplo, o programador não pode
       adicionar, remover ou reordenar elementos. Se o callback não respeitar esta regra,
       o comportamento desta função é indefinido e
       imprevisível.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       Se o parâmetro opcional <parameter>arg</parameter> é fornecido,
       será passado como o terceiro parâmetro para o callback
       <parameter>callback</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   A partir do PHP 7.1.0, uma exceção <classname>ArgumentCountError</classname> será lançada se a função <parameter>callback</parameter>
   requerer mais de 2 parâmetros (o valor e a chave do item de array),
   ou se mais de 3 argumentos no caso de <parameter>arg</parameter> ser informado.
   Anteriormente, nesses casos
   um erro de nível <link linkend="errorfunc.constants">E_WARNING</link> seria gerado em cada vez que
   <function>array_walk</function> chamasse o <parameter>callback</parameter>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Se <parameter>callback</parameter> espera que o segundo ou terceiro parâmetro seja passado
       por referência, essa função agora emite um <constant>E_WARNING</constant>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo da <function>array_walk</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$frutas = array("d" => "limao", "a" => "laranja", "b" => "banana", "c" => "melancia");

function test_alter(&$item1, $key, $prefix)
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key)
{
    echo "$key. $item2\n";
}

echo "Antes ...:\n";
array_walk($frutas, 'test_print');

array_walk($frutas, 'test_alter', 'fruta');
echo "... e depois:\n";

array_walk($frutas, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Antes ...:
d. limao
a. laranja
b. banana
c. melancia
... e depois:
d. fruit: limao
a. fruit: laranja
b. fruit: banana
c. fruit: melancia
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo de <function>array_walk</function> e funções anônimas</title>
    <programlisting role="php">
<![CDATA[
<?php
$elements = ['a', 'b', 'c'];

array_walk($elements, function ($value, $key) {
  echo "{$key} => {$value}\n";
});

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
0 => a
1 => b
2 => c
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk_recursive</function></member>
    <member><function>iterator_apply</function></member>
    <member><function>list</function></member>
    <member><function>each</function></member>
    <member><function>call_user_func_array</function></member>
    <member><function>array_map</function></member>
    <member>&foreach;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
