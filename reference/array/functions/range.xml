<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 62421b98a97fe576987878055e17cf755eb395af Maintainer: ae Status: ready --><!-- CREDITS: lucasr,felipe,ae -->
<refentry xml:id="function.range" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>range</refname>
  <refpurpose>Cria um array contendo uma faixa de elementos</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>range</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>start</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>end</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>float</type></type><parameter>step</parameter><initializer>1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Cria um array contendo uma faixa de elementos.
  </para>
  <para>
   Se ambos <parameter>start</parameter> e <parameter>end</parameter> forem
   <type>string</type>s, e <parameter>step</parameter> é <type>int</type>,
   o array produzido será uma sequência de bytes.
   Em outros casos, o array produzido será uma sequência de números.
  </para>
  <para>
   A sequência é crescente se <parameter>start</parameter> é menor ou
   igual a <parameter>end</parameter>.
   Em outros casos, a sequência é decrescente.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
       O primeiro valor da sequência.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>end</parameter></term>
     <listitem>
      <para>
       O último valor possível da sequência.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step</parameter></term>
     <listitem>
      <para>
       <parameter>step</parameter> indica o tamanho do deslocamento entre os
       os valores produzidos na sequência.
      </para>
      <para>
       <parameter>step</parameter> pode ser negativo em sequências decrescentes.
      </para>
      <para>
       Se <parameter>step</parameter> é um <type>float</type> sem uma
       parte fracional, ele é interpretado como <type>int</type>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna uma sequência de elementos como um <type>array</type> onde o primeiro
   elemento é <parameter>start</parameter> progredindo a até
   <parameter>end</parameter>, com cada valor da sequência separados por
   <parameter>step</parameter> valores.
  </para>
  <para>
   O último elemento do array retornado pode ser <parameter>end</parameter>
   ou um valor anterior da sequência, a depender
   do valor de <parameter>step</parameter>.
  </para>
  <para>
   Se ambos <parameter>start</parameter> e <parameter>end</parameter> são
   <type>string</type>s, e <parameter>step</parameter> é <type>int</type>,
   o array produzido será uma sequẽncia de bytes,
   geralmente as letras latinas no padrão <abbrev>ASCII</abbrev>.
  </para>
  <para>
   Se <parameter>start</parameter>, <parameter>end</parameter>,
   ou <parameter>step</parameter> forem <type>float</type>,
   o array produzido será uma sequẽncia de <type>float</type>s.
  </para>
  <para>
   Em outros casos, o array produzido será uma sequência de <type>int</type>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Se <parameter>step</parameter> é <literal>0</literal>,
     um erro <classname>ValueError</classname> é lançado.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     se <parameter>start</parameter>, <parameter>end</parameter>,
     ou <parameter>step</parameter> não for <function>is_finite</function>,
     um erro <classname>ValueError</classname> é lançado.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se <parameter>step</parameter> é negativo,
     mas o array produzido é crescente
     (<code>$start &lt;= $end</code>),
     um erro <classname>ValueError</classname> é lançado.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se <parameter>start</parameter> ou <parameter>end</parameter>
     é um string vazia <literal>''</literal>,
     um aviso <constant>E_WARNING</constant> é emitido
     e a string vazia é interpretada como <literal>0</literal>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se <parameter>start</parameter> ou <parameter>end</parameter> forem uma
     <link linkend="language.types.numeric-strings">string não numérica</link>
     com mais de um byte, um aviso <constant>E_WARNING</constant> é emitido.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se <parameter>start</parameter> ou <parameter>end</parameter> é uma string
     que pode ser implicitamente convertida para um <type>int</type>,
     um aviso <constant>E_WARNING</constant> é emitido.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se <parameter>step</parameter> é um <type>float</type>,
     e <parameter>start</parameter> e <parameter>end</parameter> forem uma
     <link linkend="language.types.numeric-strings">string não numérica</link>,
     um aviso <constant>E_WARNING</constant> é emitido.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Se ambos <parameter>start</parameter> e <parameter>end</parameter>
       forem strings então <function>range</function> nem sempre produzirá
       um <type>array</type> de bytes.
       Anteriormente, se um dos valores limite for uma string numérica,
       então o outro valor string é implicitamente convertido para um <type>int</type>.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Um aviso <constant>E_WARNING</constant> agora é emitido se
       <parameter>start</parameter> ou <parameter>end</parameter>
       é uma string implicitamente conversível para <type>int</type>
       se quaisquer valores limite é interpretado como um número.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Um aviso <constant>E_WARNING</constant> agora é emitido se
       <parameter>start</parameter> ou <parameter>end</parameter>
       é uma string não numérica com mais de um byte.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Um aviso <constant>E_WARNING</constant> agora é emitido se
       <parameter>start</parameter> ou <parameter>end</parameter>
       é uma string vazia.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Se <parameter>step</parameter> é um <type>float</type> sem
       parte fracionária, ele será interpretado como um <type>int</type>.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Um erro <classname>ValueError</classname> agora é lançado se
       <parameter>step</parameter> é negativo quando da produção de
       um array crescente.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Um erro <classname>ValueError</classname> agora é lançado se
       <parameter>step</parameter> não for finito.
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Um erro <classname>TypeError</classname> agora é lançado se
       <parameter>start</parameter> ou <parameter>end</parameter>
       é um <type>array</type>, <type>object</type> ou <type>resource</type>.
       Anteriormente eles eram implicitamente convertidos para <type>int</type>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>range</function> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
echo implode(', ', range(0, 12)), PHP_EOL;

echo implode(', ', range(0, 100, 10)), PHP_EOL;

echo implode(', ', range('a', 'i')), PHP_EOL;

echo implode(', ', range('c', 'a')), PHP_EOL;

echo implode(', ', range('A', 'z')), PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100
a, b, c, d, e, f, g, h, i
c, b, a
A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, [, \, ], ^, _, `, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>shuffle</function></member>
    <member><function>array_fill</function></member>
    <member>&foreach;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
