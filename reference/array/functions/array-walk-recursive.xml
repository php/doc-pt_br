<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d42b32e96ba3a36544b453128b5f515166bfc14c Maintainer: lhsazevedo Status: ready --><!-- CREDITS: felipe,lhsazevedo -->
<refentry xml:id="function.array-walk-recursive" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk_recursive</refname>
  <refpurpose>Aplica um função do usuário recursivamente para cada membro de um array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk_recursive</methodname>
   <methodparam><type class="union"><type>array</type><type>object</type></type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Aplica a função <parameter>callback</parameter> definida pelo usuário para cada
   elemento do array <parameter>array</parameter>. Esta função irá recursar
   em arrays mais profundos.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       O array de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Tipicamente, <parameter>callback</parameter> usa dois
       parâmetros. O valor do parâmetro <parameter>array</parameter> sendo o primeiro, e
       a chave/índice o segundo.
      </para>
      <note>
       <para>
        Se <parameter>callback</parameter> precisa trabalhar com
        atuais valores da array, especifique o primeiro parâmetro da
        <parameter>callback</parameter> com uma
        <link linkend="language.references">referência</link>. Então,
        as modificações feitas para estes elementos serão feitas no
        próprio array original.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       Se o parâmetro opcional <parameter>arg</parameter> for fornecido,
       ele será passado como o terceiro parâmetro para o
       <parameter>callback</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>


 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo da <function>array_walk_recursive</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$doce = array('a' => 'maça', 'b' => 'banana');
$frutas = array('doce' => $doce, 'azedo' => 'limão');

function test_print($item, $chave)
{
    echo "$chave contém $item\n";
}

array_walk_recursive($frutas, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
a contém maça
b contém banana
azedo contém limão
]]>
    </screen>
    <para>
     Você pode notar que a chave '<literal>doce</literal>' nunca é exibida. Qualquer chave que contém um
     <type>array</type> não será passada para a função.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
