<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 3ef3e56c80f7ae6b6a7291b7eb57dc6250b50801 Maintainer: leonardolara Status: ready --><!-- CREDITS: lucasr,felipe,leonardolara -->

<refentry xml:id="function.count" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>count</refname>
  <refpurpose>Conta todos os elementos de um array ou de um objeto <interfacename>Countable</interfacename></refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
   <type>int</type><methodname>count</methodname>
   <methodparam><type class="union"><type>Countable</type><type>array</type></type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>COUNT_NORMAL</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Conta todos os elementos de um array quando usado com um array. Quando usado com um
   objeto que implementa a interface <interfacename>Countable</interfacename>, retorna
   o valor de retorno do método <methodname>Countable::count</methodname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Um array ou objeto <interfacename>Countable</interfacename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Se o parâmetro opcional <parameter>mode</parameter> for definido para
       <constant>COUNT_RECURSIVE</constant> (ou 1), a função <function>count</function>
       irá recursivamente contar o array. Isto é particularmente útil
       para contar todos os elementos de um array multidimensional.
      </para>
      <caution>
       <para>
        <function>count</function> pode detectar recursividade para evitar um loop
        infinito, mas irá emitir um aviso <constant>E_WARNING</constant> cada vez que
        o fizer (caso o array contenha a si mesmo mais de uma vez) e retornará uma
        contagem maior que a esperada.
       </para>
      </caution>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o número de elementos em <parameter>value</parameter>.
   Antes do PHP 8.0.0, se o parâmetro não fosse um &array; nem um &object; que
   implementa a interface <interfacename>Countable</interfacename>,
   <literal>1</literal> seria retornado,
   a menos que <parameter>value</parameter> fosse &null;, e neste caso
   <literal>0</literal> seria retornado.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>count</function> irá agora disparar <classname>TypeError</classname> em
       tipos contáveis inválidos passados no parâmetro <parameter>value</parameter>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       <function>count</function> irá agora emitir um aviso em tipos contáveis inválidos
       passados no parâmetro <parameter>value</parameter>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example xml:id="count.example.basic">
    <title>Exemplo da função <function>count</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$a[0] = 1;
$a[1] = 3;
$a[2] = 5;
var_dump(count($a));

$b[0]  = 7;
$b[5]  = 9;
$b[10] = 11;
var_dump(count($b));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(3)
int(3)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="count.example.badexample">
    <title>Exemplo de <function>count</function> em não-Countable|array (contra exemplo - não deve ser feito)</title>
    <programlisting role="php">
<![CDATA[
<?php
$b[0]  = 7;
$b[5]  = 9;
$b[10] = 11;
var_dump(count($b));

var_dump(count(null));

var_dump(count(false));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(3)
int(0)
int(1)
]]>
    </screen>
    &example.outputs.72;
    <screen role="php">
<![CDATA[
int(3)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 12
int(0)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 14
int(1)
]]>
    </screen>
    &example.outputs.8;
    <screen role="php">
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: count(): Argument #1 ($var) must be of type Countable .. on line 12
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="count.example.recursive">
    <title>Uso recursivo da função <function>count</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$comidas = array('frutas'   => array('laranja', 'banana', 'maçã'),
                 'vegetais' => array('cenoura', 'couve', 'ervilha'));

// contagem recursiva
var_dump(count($comidas, COUNT_RECURSIVE));

// contagem normal
var_dump(count($comidas));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(8)
int(2)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="count.example.countable">
    <title>Objeto <interfacename>Countable</interfacename></title>
    <programlisting role="php">
<![CDATA[
<?php
class CountOfMethods implements Countable
{
    private function someMethod()
    {
    }

    public function count(): int
    {
        return count(get_class_methods($this));
    }
}

$obj = new CountOfMethods();
var_dump(count($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(2)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>is_array</function></member>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><function>strlen</function></member>
    <member><function>is_countable</function></member>
    <member><link linkend="language.types.array">Arrays</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
