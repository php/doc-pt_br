<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c6534cb59e785d4fc77f123602132da74b07ac2a Maintainer: leonardolara Status: ready --><!-- CREDITS: lucasr,felipe,leonardolara -->
<refentry xml:id="function.array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array</refname>
  <refpurpose>Cria um array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>array</type><methodname>array</methodname>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
   </methodsynopsis>
  <para>
   Cria um array. Leia a seção sobre
   <link linkend="language.types.array">tipo array</link> para mais
   informação sobre o que é um array.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
       A sintaxe "índice =&gt; valores", separados por vírgulas, definem índice e
       valores respectivamente. O índice pode ser do tipo string ou inteiro.
       Quando o índice é omitido, um índice inteiro é automaticamente
       gerado, começando em 0. Se o índice é um inteiro, o próximo índice gerado
       será igual ao maior índice inteiro + 1. Note que quando dois
       índices idênticos são definidos, o último sobrescreve o primeiro.
      </para>
      <para>
       Inserir uma vírgula após a última entrada definida do array, mesmo
       sendo incomum, é uma sintaxe válida.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um array dos parâmetros.  Os parâmetros podem ser fornecidos com
   um índice com o operador <literal>=&gt;</literal>.  Leia a seção
   sobre <link linkend="language.types.array">tipo de array</link> para mais
   informação sobre o que é um array.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   O exemplo a seguir demonstra como criar um array de
   duas dimensões, como especificar chaves para arrays associativos,
   e como pular e continuar índices numéricos em arrays
   normais.
    <example>
     <title>Exemplo de <function>array</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$frutas = array (
    "frutas"  => array("a" => "laranja", "b" => "banana", "c" => "maçã"),
    "numeros" => array(1, 2, 3, 4, 5, 6),
    "buracos" => array("primeiro", 5 => "segundo", "terceiro")
);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Indexação automática com <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
     <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
     </screen>
   </example>
   </para>
   <para>
   Note que o índice 3 é definido duas vezes, e retêm seu último valor
   13. O índice 4 é definido depois do índice 8, e o índice gerado a seguir (valor 19)
   é 9, uma vez que o maior índice era 8.
  </para>
  <para>
   Esse exemplo cria um array com o índices iniciando em 1.
   <example>
    <title>Array com índices a partir do 1 com <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$firstquarter = array(1 => 'Janeiro', 'Fevereiro', 'Março');
print_r($firstquarter);
?>
]]>
    </programlisting>
    &example.outputs;
     <screen>
<![CDATA[
Array
(
    [1] => Janeiro
    [2] => Fevereiro
    [3] => Março
)
]]>
     </screen>
   </example>
  </para>
  <para>
   Como no Perl, pode-se acessar o valor de um array dentro de aspas.
   Entretanto, com o PHP é necessário envolver o array entre chaves {}.
  <example>
   <title>Acessando um array dentro de chaves</title>
    <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   <note>
    <para>
     <function>array</function> é um construtor de linguagem usado para
     representar arrays literais, e não uma função normal.
    </para>
   </note>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_pad</function></member>
    <member><function>list</function></member>
    <member><function>count</function></member>
    <member><function>range</function></member>
    <member>&foreach;</member>
    <member>O tipo <link linkend="language.types.array">array</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
