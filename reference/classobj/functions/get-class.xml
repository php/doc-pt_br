<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: fe33a5685ef58fd545cfacc1e19ba6411379feab Maintainer: leonardolara Status: ready --><!-- CREDITS: surfmax, felipe, leonardolara -->
<refentry xml:id="function.get-class" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_class</refname>
  <refpurpose>Retorna o nome da classe de um objeto</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>get_class</methodname>
    <methodparam choice="opt"><type>object</type><parameter>object</parameter></methodparam>
   </methodsynopsis>
  <para>
   Obtém o nome da classe do <parameter>object</parameter> informado.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       O objeto testado. Este parâmetro pode ser emitido quando dentro de uma classe.
      </para>
      <note>
       <simpara>
        Passar explicitamente &null; no parâmetro <parameter>object</parameter> não é
        mais permitido a partir do PHP 7.2.0 e emite um <constant>E_WARNING</constant>.
        A partir do 8.0.0, a <classname>TypeError</classname> é emitido quando
        &null; é usado.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o nome da classe da qual <parameter>object</parameter> é uma
   instância.
  </para>
  <para>
   Se <parameter>object</parameter> for omitido quando dentro de uma classe, o
   nome desta classe é retornado.
  </para>
  <para>
   Se o <parameter>object</parameter> é uma instância de uma classe que existe
   em um namespace, o nome da classe qualificado com namespace é retornado.
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se <function>get_class</function> for chamada com qualquer outro parâmetroque não seja
   um objeto, <classname>TypeError</classname> é disparado. Antes do PHP 8.0.0,
   um aviso <constant>E_WARNING</constant> era emitido.
  </para>
  <para>
   Se <function>get_class</function> for chamado sem parâmetros de fora de uma classe,
   um <classname>Error</classname> é disparado. Antes do PHP 8.0.0,
   um aviso <constant>E_WARNING</constant> era emitido.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Chamar esta função de fora de uma classe, sem argumentos,
        agora dispara um <classname>Error</classname>.
        Anteriormente, um aviso <constant>E_WARNING</constant> era emitido
        e a função retornava &false;.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Antes desta versão o valor padrão para <parameter>object</parameter>
        era &null; e tinha o mesmo efeito de não se passar nenhum valor. Agora,
        &null; foi removido do valor padrão para <parameter>object</parameter>,
        e não é mais uma entrada válida.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Usando <function>get_class</function></title>
    <programlisting role="php">
<![CDATA[
<?php

class foo {
    function name()
    {
        echo "Meu nome é " , get_class($this) , "\n";
    }
}

// cria um objeto
$bar = new foo();

// chamada externa
echo "Seu nome é " , get_class($bar) , "\n";

// chamada interna
$bar->name();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Meu nome é foo
Seu nome é foo
]]>
    </screen>
   </example>
   <example>
    <title>Usando <function>get_class</function> em superclasse</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class bar {
    public function __construct()
    {
        var_dump(get_class($this));
        var_dump(get_class());
    }
}

class foo extends bar {
}

new foo;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "foo"
string(3) "bar"
]]>
    </screen>
   </example>
   <example>
    <title>Usando <function>get_class</function> em classe com namespace</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foo\Bar;

class Baz {
    public function __construct()
    {

    }
}

$baz = new \Foo\Bar\Baz;

var_dump(get_class($baz));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "Foo\Bar\Baz"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_called_class</function></member>
    <member><function>get_parent_class</function></member>
    <member><function>gettype</function></member>
    <member><function>get_debug_type</function></member>
    <member><function>is_subclass_of</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
