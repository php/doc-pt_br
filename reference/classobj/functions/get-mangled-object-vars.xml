<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: d332b5ae70bd27873fa1b51b366a721957042e69 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.get-mangled-object-vars" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_mangled_object_vars</refname>
  <refpurpose>Retorna um array de nomes únicos e valores das propriedades do objeto</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>get_mangled_object_vars</methodname>
   <methodparam><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retorna um &array; cujos elementos são as propriedades de <parameter>object</parameter>.
   As chaves são os nomes das variáveis membras, com algumas exceções
   notáveis: variáveis privadas têm o nome da classe prefixada ao nome da variável,
   e variáveis protegidas têm um <literal>*</literal> prefixado ao nome da variável.
   Estes valores prefixados têm bytes <literal>NUL</literal> de cada um dos lados.
   <link linkend="language.oop5.properties.typed-properties">Propriedades tipadas</link>
   não inicializadas são silenciosamente descartadas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       Uma instância de objeto.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um &array; contendo todas as propriedades de <parameter>object</parameter>, independente da visibilidade.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>get_mangled_object_vars</function></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $public = 1;

    protected $protected = 2;

    private $private = 3;
}

class B extends A
{
    private $private = 4;
}

$object = new B;
$object->dynamic = 5;
$object->{'6'} = 6;

var_dump(get_mangled_object_vars($object));

class AO extends ArrayObject
{
    private $private = 1;
}

$arrayObject = new AO(['x' => 'y']);
$arrayObject->dynamic = 2;

var_dump(get_mangled_object_vars($arrayObject));
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(6) {
  ["Bprivate"]=>
  int(4)
  ["public"]=>
  int(1)
  ["*protected"]=>
  int(2)
  ["Aprivate"]=>
  int(3)
  ["dynamic"]=>
  int(5)
  [6]=>
  int(6)
}
array(2) {
  ["AOprivate"]=>
  int(1)
  ["dynamic"]=>
  int(2)
}

]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class_vars</function></member>
    <member><function>get_object_vars</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
