<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d530899344cd881b6d09ff188e24252651c2f394 Maintainer: ae Status: ready -->

<refentry xml:id="zmqsocket.connect" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQSocket::connect</refname>
  <refpurpose>Conecta o socket</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>ZMQSocket</type><methodname>ZMQSocket::connect</methodname>
   <methodparam><type>string</type><parameter>dsn</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>force</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Conecta o socket ao destino remoto. O destino é definido no formato <literal>transport://address</literal>, onde
   transporte é um dos seguintes itens: inproc, ipc, tcp, pgm or epgm.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dsn</parameter></term>
     <listitem>
      <para>
       O destino da conexão, por exemplo <literal>transport://address</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>force</parameter></term>
     <listitem>
      <para>
       Tenta conectar mesmo se o socket já foi conectado a um dado destino.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o objeto atual.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lança um erro <classname>ZMQSocketException</classname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <function>ZMQContext</function></title>
    <para>
     Constrói um novo contexto e aloca a requisição do socket a partir dele
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Nome do servidor */
$destino = "tcp://127.0.0.1:5555";

/* Cria um socket */
$socket = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ, 'meu socket');

/* Obtém uma lista dos destinos conectados */
$destinos = $socket->getEndpoints();

/* Verifica se o socket está conectado */
if (!in_array($destino, $destinos['connect'])) {
    echo "<p>Conectando em $destino</p>";
    $socket->connect($destino);
} else {
    echo "<p>Já está conectado em $destino</p>";
}

/* Envia e Recebe */
$socket->send("Olá!");
$mensagem = $socket->recv();

echo "<p>O servidor disse: {$mensagem}</p>";
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
