<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d530899344cd881b6d09ff188e24252651c2f394 Maintainer: @rafaelbernard Status: ready --><!-- CREDITS: @rafaelbernard -->

<refentry xml:id="zmqsocket.recv" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQSocket::recv</refname>
  <refpurpose>Recebe uma mensagem</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>ZMQSocket::recv</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Recebe uma mensagem a partir de um socket. Por padrão a recepção será bloqueada até que uma mensagem esteja disponível a menos que
   a constante <constant>ZMQ::MODE_DONTWAIT</constant> seja usada. A constante <constant>ZMQ::SOCKOPT_RCVMORE</constant>
   pode ser usada para receber mensagens de múltiplas partes. Consulte <function>ZMQSocket::setSockOpt</function>
   para mais informações.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Passa indicadores para a recepção de mensagens de múltiplas partes ou operações não bloqueantes.
       Consulte as constantes <constant>ZMQ::MODE_*</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a mensagem. Se <constant>ZMQ::MODE_DONTWAIT</constant>
   for usada e a operação for bloqueante, &false; deve ser retornado.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lança <classname>ZMQSocketException</classname> em erros.
  </para>
 </refsect1>

 <refsect1 role="examples">
 &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de envio/recepção</title>
    <para>
     Envio / recepção não bloqueantes
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Cria um novo objeto de enfileiramento, é necessário existir um servidor na outra ponta */
$fila = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ);
$fila->connect("tcp://127.0.0.1:5555");

/* Atribui o socket 1 à fila, envia e recebe */
$tentativas = 5;
$enviando = true;

/* Inicia um laço */
do {
    try {
        /* Tenta enviar / receber */
        if ($enviando) {
            echo "Enviando mensagem\n";
            $fila->send("Isso é uma mensagem", ZMQ::MODE_DONTWAIT);
            $enviando = false;
        } else {
            echo "Obteve resposta: " . $fila->recv(ZMQ::MODE_DONTWAIT) . "\n";
            break;
        }
    } catch (ZMQSocketException $e) {
        /* EAGAIN significa que a operação foi bloqueada, tentar novamente */
        if ($e->getCode() === ZMQ::ERR_EAGAIN) {
            echo " - Obteve EAGAIN, tentando novamente ($tentativas)\n";
        } else {
            die(" - Erro: " . $e->getMessage());
        }
    }
    /* Dá uma pausa durante as operações */
    usleep(5);
} while (--$tentativas);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Enviando mensagem
 - Obteve EAGAIN, tentando novamente (4)
Obteve resposta: Isso é uma mensagem
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
