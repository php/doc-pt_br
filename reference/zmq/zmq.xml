<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b1ef3427055358ff6d092ddb0a8b5e748a7bbbb2 Maintainer: ae Status: ready -->

<phpdoc:classref xml:id="class.zmq" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe ZMQ</title>
 <titleabbrev>ZMQ</titleabbrev>

 <partintro>

<!-- {{{ ZMQ intro -->
  <section xml:id="zmq.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="zmq.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>ZMQ</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>ZMQ</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-pair">ZMQ::SOCKET_PAIR</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-pub">ZMQ::SOCKET_PUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-sub">ZMQ::SOCKET_SUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-req">ZMQ::SOCKET_REQ</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-rep">ZMQ::SOCKET_REP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-xreq">ZMQ::SOCKET_XREQ</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-xrep">ZMQ::SOCKET_XREP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-push">ZMQ::SOCKET_PUSH</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-pull">ZMQ::SOCKET_PULL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-router">ZMQ::SOCKET_ROUTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-dealer">ZMQ::SOCKET_DEALER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-xpub">ZMQ::SOCKET_XPUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-xsub">ZMQ::SOCKET_XSUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.socket-stream">ZMQ::SOCKET_STREAM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-hwm">ZMQ::SOCKOPT_HWM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-sndhwm">ZMQ::SOCKOPT_SNDHWM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-rcvhwm">ZMQ::SOCKOPT_RCVHWM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-affinity">ZMQ::SOCKOPT_AFFINITY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-identity">ZMQ::SOCKOPT_IDENTITY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-subscribe">ZMQ::SOCKOPT_SUBSCRIBE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-unsubscribe">ZMQ::SOCKOPT_UNSUBSCRIBE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-rate">ZMQ::SOCKOPT_RATE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-recovery-ivl">ZMQ::SOCKOPT_RECOVERY_IVL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-reconnect-ivl">ZMQ::SOCKOPT_RECONNECT_IVL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-reconnect-ivl-max">ZMQ::SOCKOPT_RECONNECT_IVL_MAX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-mcast-loop">ZMQ::SOCKOPT_MCAST_LOOP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-sndbuf">ZMQ::SOCKOPT_SNDBUF</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-rcvbuf">ZMQ::SOCKOPT_RCVBUF</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-rcvmore">ZMQ::SOCKOPT_RCVMORE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-type">ZMQ::SOCKOPT_TYPE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-linger">ZMQ::SOCKOPT_LINGER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-backlog">ZMQ::SOCKOPT_BACKLOG</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-maxmsgsize">ZMQ::SOCKOPT_MAXMSGSIZE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-sndtimeo">ZMQ::SOCKOPT_SNDTIMEO</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-rcvtimeo">ZMQ::SOCKOPT_RCVTIMEO</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-ipv4only">ZMQ::SOCKOPT_IPV4ONLY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-last-endpoint">ZMQ::SOCKOPT_LAST_ENDPOINT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-tcp-keepalive-idle">ZMQ::SOCKOPT_TCP_KEEPALIVE_IDLE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-tcp-keepalive-cnt">ZMQ::SOCKOPT_TCP_KEEPALIVE_CNT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-tcp-keepalive-intvl">ZMQ::SOCKOPT_TCP_KEEPALIVE_INTVL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-tcp-accept-filter">ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-tcp-accept-filter">ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-delay-attach-on-connect">ZMQ::SOCKOPT_DELAY_ATTACH_ON_CONNECT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-xpub-verbose">ZMQ::SOCKOPT_XPUB_VERBOSE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-router-raw">ZMQ::SOCKOPT_ROUTER_RAW</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.sockopt-ipv6">ZMQ::SOCKOPT_IPV6</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.ctxopt-max-sockets">ZMQ::CTXOPT_MAX_SOCKETS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.poll-in">ZMQ::POLL_IN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.poll-out">ZMQ::POLL_OUT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.mode-noblock">ZMQ::MODE_NOBLOCK</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.mode-dontwait">ZMQ::MODE_DONTWAIT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.mode-sndmore">ZMQ::MODE_SNDMORE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.err-internal">ZMQ::ERR_INTERNAL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.err-eagain">ZMQ::ERR_EAGAIN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.err-enotsup">ZMQ::ERR_ENOTSUP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.err-efsm">ZMQ::ERR_EFSM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="zmq.constants.err-eterm">ZMQ::ERR_ETERM</varname>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.zmq')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

<!-- {{{ ZMQ constants -->
  <section xml:id="zmq.constants">
   &reftitle.constants;
   <section xml:id="zmq.constants.types">
    <title>Tipos de Constantes ZMQ</title>
    <variablelist>

     <varlistentry xml:id="zmq.constants.socket-pair">
      <term><constant>ZMQ::SOCKET_PAIR</constant></term>
      <listitem>
       <para>Padrão de paridade exclusiva</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-pub">
      <term><constant>ZMQ::SOCKET_PUB</constant></term>
      <listitem>
       <para>Socket de publicação</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-sub">
      <term><constant>ZMQ::SOCKET_SUB</constant></term>
      <listitem>
       <para>Socket de subscrição</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-req">
      <term><constant>ZMQ::SOCKET_REQ</constant></term>
      <listitem>
       <para>Socket de requisição</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-rep">
      <term><constant>ZMQ::SOCKET_REP</constant></term>
      <listitem>
       <para>Socket de resposta</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-xreq">
      <term><constant>ZMQ::SOCKET_XREQ</constant></term>
      <listitem>
       <para>Um pseudônimo para SOCKET_DEALER</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-xrep">
      <term><constant>ZMQ::SOCKET_XREP</constant></term>
      <listitem>
       <para>Um pseudônimo para SOCKET_ROUTER</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-push">
      <term><constant>ZMQ::SOCKET_PUSH</constant></term>
      <listitem>
       <para>Um socket para envio de fluxo</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-pull">
      <term><constant>ZMQ::SOCKET_PULL</constant></term>
      <listitem>
       <para>Um socket para recepção de fluxo</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-router">
      <term><constant>ZMQ::SOCKET_ROUTER</constant></term>
      <listitem>
       <para>Um socket de resposta extendido que pode rotear respostas para os solicitantes</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-dealer">
      <term><constant>ZMQ::SOCKET_DEALER</constant></term>
      <listitem>
       <para>Um socket extendido de requisição que equilibra a carga para todos os clientes conectados</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-xpub">
      <term><constant>ZMQ::SOCKET_XPUB</constant></term>
      <listitem>
       <para>Similar ao SOCKET_PUB, exceto que é possível receber subscrições como mensagens.
             A mensagem de subscrição é 0 (não subscrever) ou 1 (subscrever) seguido por um tópico.</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-xsub">
      <term><constant>ZMQ::SOCKET_XSUB</constant></term>
      <listitem>
       <para>Similar ao SOCKET_SUB, exceto que é possível enviar subscrições como mensagens. Consulte SOCKET_XPUB para saber o formato.</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-stream">
      <term><constant>ZMQ::SOCKET_STREAM</constant></term>
      <listitem>
       <para>Usado para enviar e receber dados via TCP de um cliente não ØMQ. Disponível se compilado em versão igual ou superior a 4.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-hwm">
      <term><constant>ZMQ::SOCKOPT_HWM</constant></term>
      <listitem>
       <para>O marcador High Water Mark (HWM) para as mensagens que entram e saem,  é um marcador de limite  do número máximo de mensagens que a ØMQ enfileira na memória para um cliente qualquer ao qual o socket especificado esteja se comunicando. Definir esta opção em um socket afetará apenas as conexões feitas após a configuração da opção. Na ZeroMQ 3.x esta opção é um wrapper para a configuração de SNDHWM e RCVHWM. (Valor: &integer;).</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-sndhwm">
      <term><constant>ZMQ::SOCKOPT_SNDHWM</constant></term>
      <listitem>
       <para>A opção ZMQ_SNDHWM define o limite HWM para as mensagens de saída no socket especificado. Disponível se compilado na versão 3.x ou maior da ZeroMQ (Valor: &integer;).</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rcvhwm">
      <term><constant>ZMQ::SOCKOPT_RCVHWM</constant></term>
      <listitem>
       <para>A opção ZMQ_RCVHWM define o limite HWM para as mensagens de entrada no socket especificado. Disponível se compilado na versão 3.x ou maior da ZeroMQ (Valor: &integer;).</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-affinity">
      <term><constant>ZMQ::SOCKOPT_AFFINITY</constant></term>
      <listitem>
       <para> Define a relação com a thread de I/O (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-identity">
      <term><constant>ZMQ::SOCKOPT_IDENTITY</constant></term>
      <listitem>
       <para>Define a identidade do socket (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-subscribe">
      <term><constant>ZMQ::SOCKOPT_SUBSCRIBE</constant></term>
      <listitem>
       <para>Estabelece um filtro de mensagens. Válido para o socket subscrito (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-unsubscribe">
      <term><constant>ZMQ::SOCKOPT_UNSUBSCRIBE</constant></term>
      <listitem>
       <para>Remove um filtro de mensagens. Válido para o socket subscrito (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rate">
      <term><constant>ZMQ::SOCKOPT_RATE</constant></term>
      <listitem>
       <para>Define a taxa de envio para sockets multicast (pgm) (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-recovery-ivl">
      <term><constant>ZMQ::SOCKOPT_RECOVERY_IVL</constant></term>
      <listitem>
       <para> Define o intervalo de recuperação multicast (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-reconnect-ivl">
      <term><constant>ZMQ::SOCKOPT_RECONNECT_IVL</constant></term>
      <listitem>
       <para> Define o intervalo de reconexão inicial (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-reconnect-ivl-max">
      <term><constant>ZMQ::SOCKOPT_RECONNECT_IVL_MAX</constant></term>
      <listitem>
       <para> Define o intervalo máximo de reconexão (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-mcast-loop">
      <term><constant>ZMQ::SOCKOPT_MCAST_LOOP</constant></term>
      <listitem>
       <para> Controla o retorno do multicast (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-sndbuf">
      <term><constant>ZMQ::SOCKOPT_SNDBUF</constant></term>
      <listitem>
       <para>Define o tamanho do buffer do kernel de transmissão (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rcvbuf">
      <term><constant>ZMQ::SOCKOPT_RCVBUF</constant></term>
      <listitem>
       <para> Define o tamanho do buffer do kernel de recepção (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rcvmore">
      <term><constant>ZMQ::SOCKOPT_RCVMORE</constant></term>
      <listitem>
       <para>Recebe mensagens com várias partes (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-type">
      <term><constant>ZMQ::SOCKOPT_TYPE</constant></term>
      <listitem>
       <para>Obtém o tipo de socket. Válido para o método getSockOpt (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-linger">
      <term><constant>ZMQ::SOCKOPT_LINGER</constant></term>
      <listitem>
       <para>O tempo de permanência após fechamento do socket. Especifica por quanto tempo o socket fica bloqueado
             enquanto tenta dar vazão às mensagens depois que ele tenha sido fechado (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-backlog">
      <term><constant>ZMQ::SOCKOPT_BACKLOG</constant></term>
      <listitem>
       <para>A opção SOCKOPT_BACKLOG define o comprimento máximo da fila de conexões de clientes para o socket especificado; isso só se aplica a transportes orientados a conexão. (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-maxmsgsize">
      <term><constant>ZMQ::SOCKOPT_MAXMSGSIZE</constant></term>
      <listitem>
       <para>Limita o tamanho máximo da mensagem de entrada. O valor -1 significa que não há limite. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-sndtimeo">
      <term><constant>ZMQ::SOCKOPT_SNDTIMEO</constant></term>
      <listitem>
       <para>Define o tempo limite para a operação de envio no socket. O valor -1 indica que não há limite. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rcvtimeo">
      <term><constant>ZMQ::SOCKOPT_RCVTIMEO</constant></term>
      <listitem>
       <para>Define o tempo limite para a operação de recepção no socket. O valor -1 indica que não há limite. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-ipv4only">
      <term><constant>ZMQ::SOCKOPT_IPV4ONLY</constant></term>
      <listitem>
       <para>Desabilita o suporte ao IPV6 caso o valor seja 1. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-last-endpoint">
      <term><constant>ZMQ::SOCKOPT_LAST_ENDPOINT</constant></term>
      <listitem>
       <para>Recupera o último destino conectado - para o uso com as portas * coringa. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-tcp-keepalive-idle">
      <term><constant>ZMQ::SOCKOPT_TCP_KEEPALIVE_IDLE</constant></term>
      <listitem>
       <para>Tempo de ociosidade para os pacotes TCP keepalive. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-tcp-keepalive-cnt">
      <term><constant>ZMQ::SOCKOPT_TCP_KEEPALIVE_CNT</constant></term>
      <listitem>
       <para>Contador para os pacotes TCp keepalive. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-tcp-keepalive-intvl">
      <term><constant>ZMQ::SOCKOPT_TCP_KEEPALIVE_INTVL</constant></term>
      <listitem>
       <para>Intervalo para os pacotes TCP keepalive. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-delay-attach-on-connect">
      <term><constant>ZMQ::SOCKOPT_DELAY_ATTACH_ON_CONNECT</constant></term>
      <listitem>
       <para>Define uma string CIDR para comparar com as conexões TCP de entrada. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &string;)</para>
      </listitem>
     </varlistentry>

      <varlistentry xml:id="zmq.constants.sockopt-tcp-accept-filter">
       <term><constant>ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</constant></term>
       <listitem>
        <para>Define uma string CIDR para comparar com as conexões TCP de entrada. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &string;)</para>
       </listitem>
      </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-xpub-verbose">
      <term><constant>ZMQ::SOCKOPT_XPUB_VERBOSE</constant></term>
      <listitem>
       <para>Define que a opção XPUB deve receber uma mensagem de aplicação em cada instância de subscrição. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-router-raw">
      <term><constant>ZMQ::SOCKOPT_ROUTER_RAW</constant></term>
      <listitem>
       <para>Define o modo raw (sem processamento) para o ROUTER, quando passado o valor 1. No modo raw,  ao usar um socket TCP, a leitura e escrita dos dados será realizada sem o processamento do ZeroMQ.
               Disponível se compilado em versão igual ou superior a 4.0 da ZeroMQ (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-ipv6">
      <term><constant>ZMQ::SOCKOPT_IPV6</constant></term>
      <listitem>
       <para>Habilita o protocolo IPV6. Disponível se compilado em versão igual ou superior a 4.0 da ZeroMQ (Valor: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.ctxopt-max-sockets">
      <term><constant>ZMQ::CTXOPT_MAX_SOCKETS</constant></term>
      <listitem>
       <para>O número máximo de sockets para o contexto. Disponível se compilado em versão igual ou superior a 3.x da ZeroMQ (Valor: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.poll-in">
      <term><constant>ZMQ::POLL_IN</constant></term>
      <listitem>
       <para>Consulta se há dados de entrada</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.poll-out">
      <term><constant>ZMQ::POLL_OUT</constant></term>
      <listitem>
       <para>Consulta se há dados e saída</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.mode-noblock">
      <term><constant>ZMQ::MODE_NOBLOCK</constant></term>
      <listitem>
       <para>Define a operação como não bloqueante. Constante descontinuada, use ZMQ::MODE_DONTWAIT em seu lugar</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.mode-dontwait">
      <term><constant>ZMQ::MODE_DONTWAIT</constant></term>
      <listitem>
       <para>Define a operação como não bloqueante</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.mode-sndmore">
      <term><constant>ZMQ::MODE_SNDMORE</constant></term>
      <listitem>
       <para>Envia uma mensagem particionada (com várias partes)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.device-forwarder">
      <term><constant>ZMQ::DEVICE_FORWARDER</constant></term>
      <listitem>
       <para>Define um dispositivo de encaminhamento</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.device-queue">
      <term><constant>ZMQ::DEVICE_QUEUE</constant></term>
      <listitem>
       <para>Define um dispositivo de enfileiramento</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.device-streamer">
      <term><constant>ZMQ::DEVICE_STREAMER</constant></term>
      <listitem>
       <para>Define um dispositivo de fluxo</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-internal">
      <term><constant>ZMQ::ERR_INTERNAL</constant></term>
      <listitem>
       <para>Erro interno na extensão ZMQ</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-eagain">
      <term><constant>ZMQ::ERR_EAGAIN</constant></term>
      <listitem>
       <para>Impleca que a operação será bloqueante caso ZMQ::MODE_DONTWAIT seja usada</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-enotsup">
      <term><constant>ZMQ::ERR_ENOTSUP</constant></term>
      <listitem>
       <para>A operação não é suportada pelo tipo de socket informado</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-efsm">
      <term><constant>ZMQ::ERR_EFSM</constant></term>
      <listitem>
       <para>A operação não pode ser executada porque o socket não está em um estado válido</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-eterm">
      <term><constant>ZMQ::ERR_ETERM</constant></term>
      <listitem>
       <para>O contexto foi encerrado</para>
      </listitem>
     </varlistentry>

    </variablelist>
   </section>
  </section>
<!-- }}} -->


 </partintro>

 &reference.zmq.entities.zmq;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
