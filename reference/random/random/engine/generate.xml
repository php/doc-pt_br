<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43756e54fb34ece9b83559ccdde98864b9c3fb5c Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="random-engine.generate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine::generate</refname>
  <refpurpose>Gera aleatoriedade</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Engine">
   <modifier>public</modifier> <type>string</type><methodname>Random\Engine::generate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Retorna aleatoriedade e avança o estado do algoritmo em uma etapa.
  </para>
  <para>
   A aleatoriedade é representada por uma string binária contendo bytes aleatórios. Esta representação
   permite interpretar de forma inequívoca os bits aleatórios gerados pelo algoritmo, por exemplo, para
   acomodar diferentes tamanhos de saída usados por diferentes algoritmos.
  </para>
  <para>
   Algoritmos que operam nativamente em valores inteiros devem retornar o inteiro na ordem de bytes
   Little-Endian, por exemplo, aproveitando a função <function>pack</function> com o código de formato
   <literal>P</literal>. A interface de alto nível fornecida pelo
   <classname>Random\Randomizer</classname> interpretará os bytes aleatórios retornados como inteiros
   Little-Endian sem sinal se uma representação numérica for necessária.
  </para>
  <para>
   É altamente recomendável que cada bit da string retornada seja selecionado de maneira uniforme e
   independente, pois alguns aplicativos exigem aleatoriedade com base no nível de bit para funcionar corretamente.
   Por exemplo, geradores congruentes lineares geralmente geram aleatoriedade de qualidade inferior para os bits
   menos significativos do valor inteiro de retorno e, portanto, não seriam apropriados para aplicações
   que exigem aleatoriedade em nível de bit.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Uma string não vazia contendo bytes aleatórios.
  </para>

  <note>
   <simpara>
    A <classname>Random\Randomizer</classname> funciona internamente com inteiros sem sinal de 64 bits.
    Se a string retornada contiver mais de 64 bits (8 bytes) de aleatoriedade, os bytes excedentes
    serão ignorados. Outros aplicativos podem processar mais de 64 bits ao mesmo tempo.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Se a geração de aleatoriedade falhar, uma <classname>Random\RandomException</classname> deverá
     ser lançada. Qualquer outra <classname>Exception</classname> lançada durante a geração deve
     ser capturada e agrupada em uma <classname>Random\RandomException</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se a string retornada estiver vazia, um <classname>Random\BrokenRandomEngineError</classname>
     será lançado pelo <classname>Random\Randomizer</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se o algoritmo implementado for severamente tendencioso, um <classname>Random\BrokenRandomEngineError</classname>
     pode ser lançado pelo <classname>Random\Randomizer</classname> para evitar loops infinitos
     se a amostragem de rejeição for necessária para retornar resultados imparciais.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>Random\Engine::generate</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/**
 * Implementa um Gerador Linear Congruente com módulo 65536,
 * multiplicador 61 e incremento 17 retornando um número inteiro de 8 bits.
 *
 * Nota: Este motor é adequado apenas para fins de demonstração.
 * Geradores Congruentes Lineares geralmente geram aleatoriedade
 * de baixa qualidade e esta implementação específica tem
 * um período muito curto de 16 bits que é inadequado para
 * quase todo caso de uso do mundo real.
 */
final class LinearCongruentialGenerator implements \Random\Engine
{
    private int $state;

    public function __construct(?int $seed = null)
    {
        if ($seed === null) {
            $seed = random_int(0, 0xffff);
        }

        $this->state = $seed & 0xffff;
    }

    public function generate(): string
    {
        $this->state = (61 * $this->state + 17) & 0xffff;

        return pack('C', $this->state >> 8);
    }
}

$r = new \Random\Randomizer(
    new LinearCongruentialGenerator(seed: 1)
);

echo "Número da Sorte: ", $r->getInt(0, 99), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Número da Sorte: 4
]]>
   </screen>
  </example>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
