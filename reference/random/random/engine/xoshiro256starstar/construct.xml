<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 1bcc40f8134305cbebf6c8378ee7e5fc8c569674 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="random-engine-xoshiro256starstar.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine\Xoshiro256StarStar::__construct</refname>
  <refpurpose>Constrói um novo mecanismo xoshiro256**</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="Random\\Engine\\Xoshiro256StarStar">
   <modifier>public</modifier> <methodname>Random\Engine\Xoshiro256StarStar::__construct</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>int</type><type>null</type></type><parameter>seed</parameter><initializer>&null;</initializer></methodparam>
  </constructorsynopsis>
  <para>

  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>seed</parameter></term>
    <listitem>
     <para>
      A forma como o estado interno de 256 bits (32 bytes) composto por quatro inteiros de 64 bits sem sinal é
      semeado depende do tipo usado como <parameter>seed</parameter>.
      <informaltable>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Type</entry>
          <entry>&Description;</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><type>null</type></entry>
          <entry>
           Preenche o estado com 32 bytes aleatórios gerados usando o <acronym>CSPRNG</acronym>.
          </entry>
         </row>
         <row>
          <entry><type>int</type></entry>
          <entry>
           Preenche o estado com quatro valores consecutivos gerados com o algoritmo SplitMix64
           que foi semeado com <parameter>seed</parameter> interpretado como um inteiro de 64 bits sem sinal.
          </entry>
         </row>
         <row>
          <entry><type>string</type></entry>
          <entry>
           Preenche o estado interpretando uma <type>string</type> de 32 bytes como quatro inteiros little-endian sem sinal
           de 64 bits.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <!-- Return values commented out, as constructors generally don't return a
      value. Uncomment this if you do need a return values section (for
      example, because there's also a procedural version of the method).
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>
 -->

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Se o comprimento de uma <type>string</type> <parameter>seed</parameter> não for
     32 bytes, um <classname>ValueError</classname> será gerado.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se uma <type>string</type> <parameter>seed</parameter> consistir em
     32 bytes NUL (<literal>"\x00"</literal>), um <classname>ValueError</classname>
     será gerado.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example annotations="non-interactive">
   <title>Exemplo de <function>Random\Engine\Xoshiro256StarStar::__construct</function></title>
   <programlisting role="php">
<![CDATA[
<?php
// Usa uma semente de 256 bits aleatória.
$e = new \Random\Engine\Xoshiro256StarStar();

$r = new \Random\Randomizer($e);
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Derivando uma semente de uma &string;</title>
   <programlisting role="php">
<![CDATA[
<?php
$string = "My string seed";

// Faça o hash da string com SHA-256 usando a saída binária para transformar a
// $string em uma semente de 256 bits. Usar a mesma string resultará
// na mesma sequência de aleatoriedade.
$e = new \Random\Engine\Xoshiro256StarStar(
    hash('sha256', $string, binary: true)
);

echo bin2hex($e->generate()), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
6e013453678388c2
]]>
   </screen>
  </example>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
