<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 68c2c871505aadf983f16113c5b077b335ce8d76 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
 <reference xml:id="ref.pdo-cubrid" xmlns="http://docbook.org/ns/docbook">
 <?phpdoc extension-membership="pecl" ?>
  <title>Funções CUBRID (PDO_CUBRID)</title>
  <titleabbrev>CUBRID (PDO)</titleabbrev>
  <partintro>

   <section xml:id="pdo-cubrid.intro">
   &reftitle.intro;
    <para>
     PDO_CUBRID é um driver que implementa a <link linkend="intro.pdo">interface PHP Data Objects (PDO)</link> para
     permitir acesso do PHP a bancos de dados CUBRID.
    </para>
    <note>
    <para>
     A versão atual do PDO_CUBRID não suporta conexão persistente agora.
    </para>
   </note>
   </section>

   <!-- Information found in configure.xml -->
   &reference.pdo-cubrid.configure;

   <section xml:id="ref.pdo-cubrid.features">
    <title>Recursos</title>
    <table>
     <title>Recursos do PDO_CUBRID</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Recurso</entry>
        <entry>Descrição</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Cursores Roláveis</entry>
        <entry>
         PDO_CUBRID suporta cursores roláveis. O tipo de cursor padrão é
         somente para frente, e você pode usar a opção do driver em
         <function>PDO::prepare</function> para mudar o tipo de cursor.
        </entry>
       </row>
       <row>
        <entry>Timeout</entry>
        <entry>PDO_CUBRID suporta definição de tempo limite de execução de declarações SQL;
         Você pode usar <function>PDO::setAttribute</function> para definir o valor do timeout.</entry>
       </row>
       <row>
        <entry>Modo de Autocommit e Transação</entry>
        <entry>
         PDO_CUBRID suporta tanto o modo de autocommit quanto transações, e
         o modo de autocommit está habilitado por padrão. Você pode usar
         <function>PDO::setAttribute</function> para mudar seu estado.

         <para>
          Se você usar <function>PDO::beginTransaction</function> para iniciar uma
          transação, ela desabilitará automaticamente o modo de autocommit e
          restaurará após <function>PDO::commit</function> ou
          <function>PDO::rollBack</function>. Note que antes de desabilitar o
          modo de autocommit, qualquer trabalho pendente é automaticamente cometido.
         </para>
        </entry>
       </row>
       <row>
        <entry>Múltiplas Declarações SQL</entry>
        <entry>PDO_CUBRID suporta Múltiplas declarações SQL. Múltiplas
         declarações SQL são separadas por ponto e vírgula (;)</entry>
       </row>
       <row>
        <entry>Informações de Esquema</entry>
        <entry>PDO_CUBRID implementa uma função
         <function>PDO::cubrid_schema</function> para obter informações de esquema.
        </entry>
       </row>
       <row>
        <entry>LOBs</entry>
        <entry>PDO_CUBRID suporta tipo de dado BLOB/CLOB. O LOB no PDO é
         representado como um fluxo, então você pode inserir LOBs vinculando um fluxo,
         e obter LOBs lendo um fluxo retornado pelo CUBRID PDO. Por exemplo:

         <para>
          <example><title>Inserir LOBs no CUBRID PDO</title>
           <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('lob_test.png', 'rb');

$sql_stmt = "INSERT INTO lob_test(name, content) VALUES('lob_test.png', ?)";

$stmt = $dbh->prepare($sql_stmt);
$ret = $stmt->bindParam(1, $fp, PDO::PARAM_LOB);
$ret = $stmt->execute();
?>
]]>
           </programlisting>
          </example>
         </para>
         <para>
          <example><title>Buscar LOBs no CUBRID PDO</title>
           <programlisting role="php">
<![CDATA[
<?php
$sql_stmt = "SELECT content FROM lob_test WHERE name='lob_test.png'";

$stmt = $dbh->prepare($sql_stmt);
$stmt->execute();
$result = $stmt->fetch(PDO::FETCH_NUM);

header("Content-Type: image/png");
fpassthru($result[0]);
?>
]]>
           </programlisting>
          </example>
         </para>
        </entry>
       </row>
       <row>
        <entry>Meta de Coluna</entry>
        <entry>
         O <function>PDOStatement::getColumnMeta</function> no CUBRID PDO
         retornará uma matriz associativa contendo os seguintes valores:
         <simplelist>
          <member>type</member>
          <member>name</member>
          <member>table</member>
          <member>def</member>
          <member>precision</member>
          <member>scale</member>
          <member>not_null</member>
          <member>auto_increment</member>
          <member>unique_key</member>
          <member>multiple_key</member>
          <member>primary_key</member>
          <member>foreign_key</member>
          <member>reverse_index</member>
          <member>reverse_unique</member>
         </simplelist>
        </entry>
       </row>
       <row>
        <entry>Tipo de Dados de Coleção</entry>
        <entry>PDO_CUBRID suporta tipo de dados SET/MULTISET/SEQUENCE. Se você não especificar o tipo de dado,
        o tipo de dado padrão é char, por exemplo:
         <para>
          <example><title>Inserir conjunto no CUBRID PDO com tipo de dado padrão.</title>
           <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl");
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(VARCHAR))");

$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array("abc","def","ghi");
$ret = $stmt->bindParam(1, $data, PDO::PARAM_NULL);
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
           </programlisting>
          </example>
         </para>
         <para>
          <example><title>Especificar tipo de dado ao inserir conjunto no CUBRID PDO</title>
           <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl");
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(int))");

$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array(1,2,3,4);
$ret = $stmt->bindParam(1, $data, 0,0,"int");
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
           </programlisting>
          </example>
         </para>
         Tipos de Dados Vinculados CUBRID:(O quinto parâmetro de PDOStatement::bindParam):
         <simplelist>
          <member>CHAR</member>
          <member>STRING</member>
          <member>NCHAR</member>
          <member>VARNCHAR</member>
          <member>BIT</member>
          <member>VARBIT</member>
          <member>NUMERIC</member>
          <member>NUMBER</member>
          <member>INT</member>
          <member>SHORT</member>
          <member>BIGINT</member>
          <member>MONETARY</member>
          <member>FLOAT</member>
          <member>DOUBLE</member>
          <member>DATE</member>
          <member>TIME</member>
          <member>DATETIME</member>
          <member>TIMESTAMP</member>
         </simplelist>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </section>

   <!-- Information found in constants.xml -->
   &reference.pdo-cubrid.constants;

  </partintro>

  <refentry xml:id="ref.pdo-cubrid.connection">
   <refnamediv>
    <refname>PDO_CUBRID DSN</refname>
    <refpurpose>Conectando-se a bancos de dados CUBRID</refpurpose>
   </refnamediv>

   <refsect1 role="description">
    &reftitle.description;
    <para>
     O Nome da Fonte de Dados (DSN) PDO_CUBRID é composto pelos seguintes elementos, delimitados por ponto e vírgula:
     <variablelist>
      <varlistentry>
       <term>DSN prefix</term>
       <listitem>
        <para>
         O prefixo DSN é <userinput>cubrid:</userinput>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>host</literal></term>
       <listitem>
        <para>
         O nome do host no qual o servidor de banco de dados reside.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>port</literal></term>
       <listitem>
        <para>
         A porta na qual o servidor de banco de dados está em execução.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>dbname</literal></term>
       <listitem>
        <para>
         O nome do banco de dados.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1 role="notes">
    &reftitle.notes;
    <note>
     <para>
      Ao estabelecer a conexão com o CUBRID, você deve fornecer nome de usuário e
      senha, exceto o DSN.
     </para>
    </note>
   </refsect1>

   <refsect1 role="examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Exemplos de DSN PDO_CUBRID</title>
      <para>
       O exemplo a seguir mostra um DSN PDO_CUBRID para se conectar a um banco de dados CUBRID:
       <programlisting><![CDATA[
cubrid:host=localhost;port=33000;dbname=demodb
]]>
       </programlisting>
      </para>
     </example>
    </para>
   </refsect1>
  </refentry>

  &reference.pdo-cubrid.entities.PDO;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
