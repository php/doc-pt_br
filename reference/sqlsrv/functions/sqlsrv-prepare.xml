<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 66fffcdfbb9d97a1618b9e47f9be19a83f80e32b Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="function.sqlsrv-prepare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sqlsrv_prepare</refname>
  <refpurpose>Prepara uma consulta para execução</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>sqlsrv_prepare</methodname>
   <methodparam><type>resource</type><parameter>conn</parameter></methodparam>
   <methodparam><type>string</type><parameter>sql</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>params</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Prepara uma consulta para execução. Esta função é ideal para preparar uma consulta
   que será executada várias vezes com diferentes valores de parâmetro.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn</parameter></term>
     <listitem>
      <para>
       Um recurso de conexão retornado por <function>sqlsrv_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
       A string que define a consulta a ser preparada e executada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Um array especificando informações de parâmetro ao executar uma
       consulta parametrizada. Os elementos do array podem ser um dos seguintes:
       <simplelist>
        <member>Um valor literal</member>
        <member>Uma variável PHP</member>
        <member>Um array com esta estrutura:
          array($valor [, $direção [, $tipoPHP [, $tipoSQL]]])</member>
       </simplelist>
       A tabela a seguir descreve os elementos na estrutura do array acima:
       </para>
       <table>
       <title>Estrutura do array</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Elemento</entry>
          <entry>Descrição</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>$value</entry>
          <entry>Um valor literal, uma variável PHP ou uma variável PHP por referência.</entry>
         </row>
         <row>
          <entry>$direction (opcional)</entry>
          <entry>Uma das constantes SQLSRV usadas para indicar a direção do parâmetro:
          SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT.
          O valor padrão é SQLSRV_PARAM_IN.</entry>
         </row>
         <row>
          <entry>$phpType (opcional)</entry>
          <entry>Uma constante SQLSRV_PHPTYPE_* que especifica o tipo de dado PHP do
          valor retornado.</entry>
         </row>
         <row>
          <entry>$sqlType (opcional)</entry>
          <entry>Uma constante SQLSRV_SQLTYPE_* que especifica o tipo de dado do SQL Server
          do valor de entrada.</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Um array especificando opções de propriedade da consulta. As chaves suportadas são descritas
       na tabela a seguir:
      </para>
      <table>
       <title>Opções de Consulta</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Chave</entry>
          <entry>Valores</entry>
          <entry>Descrição</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>QueryTimeout</entry>
          <entry>Um valor inteiro positivo.</entry>
          <entry>Define o tempo limite da consulta em segundos. Por padrão, o driver
          aguardará indefinidamente por resultados.</entry>
         </row>
         <row>
          <entry>SendStreamParamsAtExec</entry>
          <entry>&true; ou &false; (o padrão é &true;)</entry>
          <entry>Configura o driver para enviar todos os dados de fluxo na execução (&true;),
          ou para enviar os dados de fluxo em blocos (&false;). Por padrão, o valor é &true;.
          Para mais informações, consulte <function>sqlsrv_send_stream_data</function>.</entry>
         </row>
         <row>
          <entry>Scrollable</entry>
          <entry>SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_STATIC, SQLSRV_CURSOR_DYNAMIC,
          ou SQLSRV_CURSOR_KEYSET</entry>
          <entry>Veja <link xlink:href="&url.sqlsrv.specify.cursortype;">Especificar um Tipo de Cursor e Selecionar Linhas</link>
          na documentação do Microsoft SQLSRV.</entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um recurso de declaração em caso de sucesso e &false; se ocorrer um erro.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>sqlsrv_prepare</function></title>
    <para>
     Este exemplo demonstra como preparar uma declaração com <function>sqlsrv_prepare</function>
     e reexecutá-la várias vezes (com diferentes valores de parâmetro) usando <function>sqlsrv_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$serverName = "serverName\sqlexpress";
$connectionInfo = array( "Database"=>"dbName", "UID"=>"username", "PWD"=>"password");
$conn = sqlsrv_connect( $serverName, $connectionInfo);
if( $conn === false) {
    die( print_r( sqlsrv_errors(), true));
}

$sql = "UPDATE Table_1
        SET OrderQty = ?
        WHERE SalesOrderID = ?";

// Inicializa os parâmetros e prepara a instrução.
// As variáveis $qty e $id estão vinculadas à instrução $stmt.
$qty = 0; $id = 0;
$stmt = sqlsrv_prepare( $conn, $sql, array( &$qty, &$id));
if( !$stmt ) {
    die( print_r( sqlsrv_errors(), true));
}

// Configure as informações de SalesOrderDetailID e OrderQty.
// Este array mapeia o ID do pedido para a quantidade do pedido em pares chave=>valor.
$orders = array( 1=>10, 2=>20, 3=>30);

//Executa a instrução para cada pedido.
foreach( $orders as $id => $qty) {
    // Como $id e $qty estão vinculados a $stmt1, seus valores atualizados
    // valores são usados em cada execução da instrução.
    if( sqlsrv_execute( $stmt ) === false ) {
          die( print_r( sqlsrv_errors(), true));
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   Ao preparar uma declaração que usa variáveis como parâmetros, as variáveis
   são vinculadas à declaração. Isso significa que se você atualizar os valores das
   variáveis, na próxima vez que executar a declaração, ela será executada com valores de
   parâmetro atualizados. Para declarações que você planeja executar apenas uma vez, use
   <function>sqlsrv_query</function>.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlsrv_execute</function></member>
    <member><function>sqlsrv_query</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
