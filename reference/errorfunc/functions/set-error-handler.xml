<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<refentry xml:id="function.set-error-handler" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>set_error_handler</refname>
  <refpurpose>Define uma função do usuário para manipular erros</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>set_error_handler</methodname>
   <methodparam><type>callback</type><parameter>error_handler</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>error_types</parameter></methodparam>
  </methodsynopsis>
  <para>
   Define uma função do usuário (<parameter>error_handler</parameter>) para manipular
   erros no script.
  </para>
  <para>
   Esta função pode ser usada para definir a sua própria maneira de manipular
   erros em tempo de execução, por exemplo, em aplicações nas quais você precisa
   fazer fazer uma limpeza de dados/arquivos quando um erro crítico acontece, ou quando
   você precisa que haja um erro sob certa circunstancia (usando
   <function>trigger_error</function>).
  </para>
  <para>
   è importante lembrar-se que o manipulador padrão de erros do PHP é completamente
   ignorado. As configurações de <function>error_reporting</function> não terão efeito
   e o seu manipulador de erro será chamado - entretanto você ainda é capaz
   de ler o valor atual de <link linkend="ini.error-reporting">error_reporting</link> e
   agir apropriadamente. É importante notar que este valor será 0 se
   o comando que causou o erro foi precedido por
   <link linkend="language.operators.errorcontrol">@ operador de controle de erro
   </link>.
  </para>
  <para>
   também note que é sua responsabilidade <function>die</function>(morrer) se
   necessário. Se a função manipuladora de erro retornar, a execução do script
   irá continuar com o próximo comando após o que causou o erro.
  </para>
  <para>
   Os seguintes tipos de erros não podem ser manipulados com uma
   função definida pelo usuário: <constant>E_ERROR</constant>, <constant>E_PARSE</constant>,
   <constant>E_CORE_ERROR</constant>, <constant>E_CORE_WARNING</constant>,
   <constant>E_COMPILE_ERROR</constant>,
   <constant>E_COMPILE_WARNING</constant>, e
   a maioria de <constant>E_STRICT</constant> que ocorram no arquivo aonde
   <function>set_error_handler</function> for chamada.
  </para>
  <para>
   Se um erro acontecer antes que o script seja executado (exemplo em uploads de arquivos)
   a função personalizada de manipulação não pode ser chamada já que não estará registrada para
   isso neste momento.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>error_handler</parameter></term>
     <listitem>
      <para>
       A função do usuário precisa aceitar dois parâmetros: o código de erro, e uma
       string descrevendo o erro. Então tem três parâmetros opcionais que
       podem ser dados: o nome do arquivo no qual o erro aconteceu, o número
       da linha na qual o erro aconteceu, e o contexto no qual o
       erro aconteceu (uma matriz que aponta para a tabela de símbolos ativos no
       ponto em que o erro aconteceu). A função pode ser mostrada como:
      </para>
      <para>
       <methodsynopsis>
        <methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>int</type><parameter>errno</parameter></methodparam>
        <methodparam><type>string</type><parameter>errstr</parameter></methodparam>
        <methodparam choice="opt"><type>string</type><parameter>errfile</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>errline</parameter></methodparam>
        <methodparam choice="opt"><type>array</type><parameter>errcontext</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>errno</parameter></term>
         <listitem>
          <simpara>
           O primeiro parâmetro, <parameter>errno</parameter>, contém o
           nível de erro que aconteceu, como um inteiro.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errstr</parameter></term>
         <listitem>
          <simpara>
           O segundo parâmetro, <parameter>errstr</parameter>, contém a
           mensagem de erro, como uma string.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errfile</parameter></term>
         <listitem>
          <simpara>
           O terceiro parãmetro é opcional, <parameter>errfile</parameter>,
           o qual contém o nome do arquivo no qual o erro ocorreu, como uma string.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errline</parameter></term>
         <listitem>
          <simpara>
           O quarto parâmetro é opcional, <parameter>errline</parameter>,
           o qual contém o número da linha na qual o erro ocorreu, como um inteiro.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errcontext</parameter></term>
         <listitem>
          <simpara>
           O quinto parâmetro é opcional, <parameter>errcontext</parameter>,
           o qual é uma matriz que aponta para a tabela de símbolos ativos no ponto
           aonde o erro ocorreu. Em outras palavras, <parameter>errcontext</parameter>
           irá conter uma matriz de cada váriavel que exista no escopo aonde
           o erro aconteceu.
           O manipulador de erro do usuário não deve modificar o contexto de erro.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Se a função retornar &false; então o manipulador de erro normal continua.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>error_types</parameter></term>
     <listitem>
      <para>
       Pode ser usado para mascarar o uso da função
       <parameter>error_handler</parameter> da mesma maneira que a configuação <link
       linkend="ini.error-reporting">error_reporting</link>
       controla quais erros são exibidos. Sem esta mascara definida a função
       <parameter>error_handler</parameter> será chamada para cada erro
       sem se importar com a definição de <link
       linkend="ini.error-reporting">error_reporting</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna uma string contendo o manipulador de erro previamente
   definido (se houver um), ou &null; em caso de erro. Se o manipulador anterior
   for um metodo de classe, esta função irá retornar uma matriz indexada com a
   classe e o nome do metodo.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        O manipulador de erro deve retornar &false; para povoar <link
         linkend="reserved.variables.phperrormsg">$php_errormsg</link>.
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        O parâmetro <parameter>error_types</parameter> foi introzido.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Manipulação de erros com <function>set_error_handler</function> e <function>trigger_error</function></title>
    <para>
     O exemplo abaixo mostra a manipulação de exceções internas
     realizando erros e manipulando-os com uma função definida pelo usuário:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// error handler function
function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    switch ($errno) {
    case E_USER_ERROR:
        echo "<b>My ERROR</b> [$errno] $errstr<br />\n";
        echo "  Fatal error on line $errline in file $errfile";
        echo ", PHP " . PHP_VERSION . " (" . PHP_OS . ")<br />\n";
        echo "Aborting...<br />\n";
        exit(1);
        break;

    case E_USER_WARNING:
        echo "<b>My WARNING</b> [$errno] $errstr<br />\n";
        break;

    case E_USER_NOTICE:
        echo "<b>My NOTICE</b> [$errno] $errstr<br />\n";
        break;

    default:
        echo "Unknown error type: [$errno] $errstr<br />\n";
        break;
    }

    /* Don't execute PHP internal error handler */
    return true;
}

// function to test the error handling
function scale_by_log($vect, $scale)
{
    if (!is_numeric($scale) || $scale <= 0) {
        trigger_error("log(x) for x <= 0 is undefined, you used: scale = $scale", E_USER_ERROR);
    }

    if (!is_array($vect)) {
        trigger_error("Incorrect input vector, array of values expected", E_USER_WARNING);
        return null;
    }

    $temp = array();
    foreach($vect as $pos => $value) {
        if (!is_numeric($value)) {
            trigger_error("Value at position $pos is not a number, using 0 (zero)", E_USER_NOTICE);
            $value = 0;
        }
        $temp[$pos] = log($scale) * $value;
    }

    return $temp;
}

// set to the user defined error handler
$old_error_handler = set_error_handler("myErrorHandler");

// trigger some errors, first define a mixed array with a non-numeric item
echo "vector a\n";
$a = array(2, 3, "foo", 5.5, 43.3, 21.11);
print_r($a);

// now generate second array
echo "----\nvector b - a notice (b = log(PI) * a)\n";
/* Value at position $pos is not a number, using 0 (zero) */
$b = scale_by_log($a, M_PI);
print_r($b);

// this is trouble, we pass a string instead of an array
echo "----\nvector c - a warning\n";
/* Incorrect input vector, array of values expected */
$c = scale_by_log("not array", 2.3);
var_dump($c); // NULL

// this is a critical error, log of zero or negative number is undefined
echo "----\nvector d - fatal error\n";
/* log(x) for x <= 0 is undefined, you used: scale = $scale" */
$d = scale_by_log($a, -2.5);
var_dump($d); // Never reached
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
vector a
Array
(
    [0] => 2
    [1] => 3
    [2] => foo
    [3] => 5.5
    [4] => 43.3
    [5] => 21.11
)
----
vector b - a notice (b = log(PI) * a)
<b>My NOTICE</b> [1024] Value at position 2 is not a number, using 0 (zero)<br />
Array
(
    [0] => 2.2894597716988
    [1] => 3.4341896575482
    [2] => 0
    [3] => 6.2960143721717
    [4] => 49.566804057279
    [5] => 24.165247890281
)
----
vector c - a warning
<b>My WARNING</b> [512] Incorrect input vector, array of values expected<br />
NULL
----
vector d - fatal error
<b>My ERROR</b> [256] log(x) for x <= 0 is undefined, you used: scale = -2.5<br />
  Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)<br />
Aborting...<br />
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>error_reporting</function></member>
    <member><function>restore_error_handler</function></member>
    <member><function>trigger_error</function></member>
    <member><link linkend="errorfunc.constants">error level constants</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
