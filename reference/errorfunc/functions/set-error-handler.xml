<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23906aa9f613d0f67538e4292b220cebf624d5f2 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.set-error-handler" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>set_error_handler</refname>
  <refpurpose>Define uma função de usuário para manipulação de erro</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>callable</type><type>null</type></type><methodname>set_error_handler</methodname>
   <methodparam><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>error_levels</parameter><initializer><constant>E_ALL</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Define uma função de usuário (<parameter>callback</parameter>) para lidar
   com erros em um script.
  </para>
  <para>
   Esta função pode ser usada para definir manipuladores de erros customizados em tempo de execução,
   por exemplo em aplicações que precisem limpar arquivos/dados quando um erro
   crítico ocorrer, ou no disparo de um erro em resposta a certas condições
   (usando <function>trigger_error</function>).
  </para>
  <para>
   É importante ressaltar que o manipulador padrão de erros do PHP é completamente
   ignorado para os tipos de erro especificados por <parameter>error_levels</parameter>
   a menos que a função de retorno devolva &false;.
   As configurações de <function>error_reporting</function> não terão efeito e o
   manipulador de erro será chamado de qualquer maneira - entretanto, ainda será possível
   ler o valor atual de
   <link linkend="ini.error-reporting">error_reporting</link> e atuar
   apropriadamente.
  </para>
  <para>
   Note também que é responsabilidade do manipulador para a execução
   do script se for necessário, chamando-se <function>exit</function>. Se a função de manipulação
   de erro simplesmente retornar, a execução do script continuará com a declaração seguinte à
   que causou o erro.
  </para>
  <para>
   Os seguintes tipos de erro não podem ser manipulados com uma função definida pelo
   usuário: <constant>E_ERROR</constant>, <constant>E_PARSE</constant>,
   <constant>E_CORE_ERROR</constant>, <constant>E_CORE_WARNING</constant>,
   <constant>E_COMPILE_ERROR</constant>,
   <constant>E_COMPILE_WARNING</constant> independentemente de onde eles surgirem, e
   a maior parte dos erros <constant>E_STRICT</constant> originados no arquivo onde a função
   <function>set_error_handler</function> for chamada.
  </para>
  <para>
   Se erros ocorrerem antes que o script seja executado (ex.: em envios de arquivos), o
   manipulador customizado de erros não poderá ser chamado já que ainda não estará registrado
   nesse momento.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Se &null; for passado, o manipulador será redefinido a seu estado padrão.
       Caso contrário, o manipulador é uma função de retorno com a seguinte assinatura:
      </para>
      <para>
       <methodsynopsis>
        <type>bool</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>int</type><parameter>errno</parameter></methodparam>
        <methodparam><type>string</type><parameter>errstr</parameter></methodparam>
        <methodparam choice="opt"><type>string</type><parameter>errfile</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>errline</parameter></methodparam>
        <methodparam choice="opt"><type>array</type><parameter>errcontext</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>errno</parameter></term>
         <listitem>
          <simpara>
           O primeiro parâmetro, <parameter>errno</parameter>, que conterá o
           nível do erro, como um inteiro.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errstr</parameter></term>
         <listitem>
          <simpara>
           O segundo parâmetro, <parameter>errstr</parameter>, que conterá a
           mensagem de erro, como uma string.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errfile</parameter></term>
         <listitem>
          <simpara>
           Se a função de retorno aceitar um terceiro parâmetro, <parameter>errfile</parameter>,
           será passado o nome do arquivo no qual o erro se originou, como uma string.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errline</parameter></term>
         <listitem>
          <simpara>
           Se a função de retorno aceitar um quarto parâmetro, <parameter>errline</parameter>,
           será passado o número da linha onde o erro ocorreu, como um inteiro.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>errcontext</parameter></term>
         <listitem>
          <simpara>
           Se a função de retorno aceitar um quinto parâmetro, <parameter>errcontext</parameter>,
           será passado um array que aponta para a tabela de símbolos ativa no
           ponto onde o erro ocorreu. Em outras palavras, <parameter>errcontext</parameter>
           conterá um array com cada variável existente no escopo em
           que o erro surgiu.
           Manipuladores de erro de usuário não devem modificar o contexto de erro.
          </simpara>
          <warning xmlns="http://docbook.org/ns/docbook">
           <simpara>
            Este parâmetro tornou-se <emphasis>DEFASADO</emphasis> a partir do PHP 7.2.0,
            e foi <emphasis>REMOVIDO</emphasis> a partir do PHP 8.0.0. Se a função definir
            este parâmetro sem um valor padrão, um erro do tipo "too few arguments" será
            emitido quando ela for chamada.
           </simpara>
          </warning>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Se a função retornar &false;, o manipulador de erros normal continua.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>error_levels</parameter></term>
     <listitem>
      <para>
       Pode ser usado para mascarar a chamada da função
       <parameter>callback</parameter> da mesma forma que a configuração ini <link linkend="ini.error-reporting">error_reporting</link>
       controla quais erros são mostrados. Sem a definição desta máscara, a função
       <parameter>callback</parameter> será chamada para todo erro,
       indenpendentemente da configuração de <link linkend="ini.error-reporting">error_reporting</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o manipulador de erro anterior (se existente). Se
   o manipulador interno for usado, &null; é retornado.
   Se o manipulador de erro anterior
   for um método de classe, esta função retornará um array indexado com a classe
   e o nome do método.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>errcontext</parameter> foi removido e não mais será passado para chamadas de retorno de usuário.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <parameter>errcontext</parameter> tornou-se defasado. O uso deste parâmetro agora emite uma nota <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Manipulação de erro com <function>set_error_handler</function> e <function>trigger_error</function></title>
    <para>
     O exemplo abaixo mostra a manipulação de exceções internas através de
     disparo de erros e uso de função definida pelo usuário:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// função de manipulação de erro
function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    if (!(error_reporting() & $errno)) {
        // Este código de erro não está incluído em error_reporting, então será
        // passado ao manipulador padrão de erros do PHP
        return false;
    }

    // $errstr pode precisar de escape:
    $errstr = htmlspecialchars($errstr);

    switch ($errno) {
    case E_USER_ERROR:
        echo "<b>Meu ERRO</b> [$errno] $errstr<br />\n";
        echo "  Erro fatal na linha $errline no arquivo $errfile";
        echo ", PHP " . PHP_VERSION . " (" . PHP_OS . ")<br />\n";
        echo "Abortando...<br />\n";
        exit(1);

    case E_USER_WARNING:
        echo "<b>Meu ALERTA</b> [$errno] $errstr<br />\n";
        break;

    case E_USER_NOTICE:
        echo "<b>Minha NOTA</b> [$errno] $errstr<br />\n";
        break;

    default:
        echo "Tipo de erro desconhecido: [$errno] $errstr<br />\n";
        break;
    }

    /* Não executa o manipulador interno do PHP */
    return true;
}

// função para testar a manipulação de erro
function scale_by_log($vect, $scale)
{
    if (!is_numeric($scale) || $scale <= 0) {
        trigger_error("log(x) para x <= 0 é indefinido, você usou: escala = $scale", E_USER_ERROR);
    }

    if (!is_array($vect)) {
        trigger_error("Vetor de entrada incorreto, esperado array de valores", E_USER_WARNING);
        return null;
    }

    $temp = array();
    foreach($vect as $pos => $value) {
        if (!is_numeric($value)) {
            trigger_error("Valor na posição $pos não é um número, usando 0 (zero)", E_USER_NOTICE);
            $value = 0;
        }
        $temp[$pos] = log($scale) * $value;
    }

    return $temp;
}

// define para o manipulador de erro de usuário
$old_error_handler = set_error_handler("myErrorHandler");

// dispara alguns erros, primeiro define um array misto com um item não numérico
echo "vetor a\n";
$a = array(2, 3, "foo", 5.5, 43.3, 21.11);
print_r($a);

// agora gera um segundo array
echo "----\nvetor b - uma nota (b = log(PI) * a)\n";
/* Valor na posição $pos não é um número, usando 0 (zero) */
$b = scale_by_log($a, M_PI);
print_r($b);

// isto é um problema, passando uma string ao invés de um array
echo "----\nvetor c - um alerta\n";
/* Vetor de entrada incorreto, esperado array de valores */
$c = scale_by_log("not array", 2.3);
var_dump($c); // NULL

// aqui um erro crítico, log de zero ou número negativo não é definido
echo "----\nvetor d - erro fatal\n";
/* log(x) para x <= 0 é indefinido, você usou: escala = $scale" */
$d = scale_by_log($a, -2.5);
var_dump($d); // Nunca alcançado
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
vetor a
Array
(
    [0] => 2
    [1] => 3
    [2] => foo
    [3] => 5.5
    [4] => 43.3
    [5] => 21.11
)
----
vetor b - uma nota (b = log(PI) * a)
<b>Minha NOTA</b> [1024] Valor na posição 2 não é um número, usando 0 (zero)<br />
Array
(
    [0] => 2.2894597716988
    [1] => 3.4341896575482
    [2] => 0
    [3] => 6.2960143721717
    [4] => 49.566804057279
    [5] => 24.165247890281
)
----
vetor c - um alerta
<b>Meu ALERTA</b> [512] Vetor de entrada incorreto, esperado array de valores<br />
NULL
----
vetor d - erro fatal
<b>Meu ERRO</b> [256] log(x) para x <= 0 é indefinido, você usou: escala = -2.5<br />
  Erro fatal na linha 35 no arquivo trigger_error.php, PHP 5.2.1 (FreeBSD)<br />
Abortando...<br />
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><classname>ErrorException</classname></member>
    <member><function>error_reporting</function></member>
    <member><function>restore_error_handler</function></member>
    <member><function>trigger_error</function></member>
    <member><link linkend="errorfunc.constants">Constantes de nível de erro</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
