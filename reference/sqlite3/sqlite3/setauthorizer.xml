<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="sqlite3.setauthorizer" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::setAuthorizer</refname>
  <refpurpose>Configura um retorno de chamada a ser usado como um autorizador para limitar o que uma declaração pode fazer</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SQLite3">
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3::setAuthorizer</methodname>
   <methodparam><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
  <para>
   Define um retorno de chamada que será chamado pelo SQLite toda vez que uma ação for executada
   (leitura, exclusão, atualização, etc.). Isso é usado ao preparar uma declaração SQL de
   uma fonte não confiável para garantir que as declarações SQL não tentem acessar dados aos quais
   não têm permissão para ver, ou que não tentem executar declarações maliciosas que
   danifiquem o banco de dados. Por exemplo, um aplicativo pode permitir que um usuário insira consultas
   SQL arbitrárias para avaliação por um banco de dados. Mas o aplicativo não quer que o usuário
   possa fazer alterações arbitrárias no banco de dados. Um autorizador poderia então ser colocado em
   prática enquanto o SQL inserido pelo usuário está sendo preparado, o que proíbe tudo exceto
   declarações SELECT.
  </para>
  <para>
   O retorno de chamada do autorizador pode ser chamado várias vezes para cada declaração preparada pelo
   SQLite. Uma consulta <literal>SELECT</literal> ou <literal>UPDATE</literal> chamará o
   autorizador para cada coluna que seria lida ou atualizada.
  </para>
  <para>
   O autorizador é chamado com até cinco parâmetros. O primeiro parâmetro é sempre
   fornecido e é um <type>int</type> (código de ação) correspondente a uma constante de
   <literal>SQLite3</literal>. Os outros parâmetros são passados apenas para algumas ações. A
   tabela a seguir descreve o segundo e o terceiro parâmetros de acordo com a ação:
   <table>
    <title>Lista de códigos de ação e parâmetros</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Ação</entry>
       <entry>Segundo parâmetro</entry>
       <entry>Terceiro parâmetro</entry>
      </row>
     </thead>
     <tbody>
      <row><entry><constant>SQLite3::CREATE_INDEX</constant></entry><entry>Nome do Índice</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::CREATE_TABLE</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::CREATE_TEMP_INDEX</constant></entry><entry>Nome do Índice</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::CREATE_TEMP_TABLE</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::CREATE_TEMP_TRIGGER</constant></entry><entry>Nome do Gatilho</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::CREATE_TEMP_VIEW</constant></entry><entry>Nome da Visualização</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::CREATE_TRIGGER</constant></entry><entry>Nome do Gatilho</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::CREATE_VIEW</constant></entry><entry>Nome da Visualização</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::DELETE</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::DROP_INDEX</constant></entry><entry>Nome do Índice</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::DROP_TABLE</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::DROP_TEMP_INDEX</constant></entry><entry>Nome do Índice</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::DROP_TEMP_TABLE</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::DROP_TEMP_TRIGGER</constant></entry><entry>Nome do Gatilho</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::DROP_TEMP_VIEW</constant></entry><entry>Nome da Visualização</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::DROP_TRIGGER</constant></entry><entry>Nome do Gatilho</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::DROP_VIEW</constant></entry><entry>Nome da Visualização</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::INSERT</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::PRAGMA</constant></entry><entry>Nome do Pragma</entry><entry>Primeiro argumento passado ao pragma, ou &null;</entry></row>
      <row><entry><constant>SQLite3::READ</constant></entry><entry>Nome da Tabela</entry><entry>Nome da Coluna</entry></row>
      <row><entry><constant>SQLite3::SELECT</constant></entry><entry>&null;</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::TRANSACTION</constant></entry><entry>Operação</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::UPDATE</constant></entry><entry>Nome da Tabela</entry><entry>Nome da Coluna</entry></row>
      <row><entry><constant>SQLite3::ATTACH</constant></entry><entry>Nome do Arquivo</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::DETACH</constant></entry><entry>Nome do Banco de Dados</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::ALTER_TABLE</constant></entry><entry>Nome do Banco de Dados</entry><entry>Nome da Tabela</entry></row>
      <row><entry><constant>SQLite3::REINDEX</constant></entry><entry>Nome do Índice</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::ANALYZE</constant></entry><entry>Nome da Tabela</entry><entry>&null;</entry></row>
      <row><entry><constant>SQLite3::CREATE_VTABLE</constant></entry><entry>Nome da Tabela</entry><entry>Nome do Módulo</entry></row>
      <row><entry><constant>SQLite3::DROP_VTABLE</constant></entry><entry>Nome da Tabela</entry><entry>Nome do Módulo</entry></row>
      <row><entry><constant>SQLite3::FUNCTION</constant></entry><entry>&null;</entry><entry>Nome da Função</entry></row>
      <row><entry><constant>SQLite3::SAVEPOINT</constant></entry><entry>Operação</entry><entry>Nome do Ponto de Salvamento</entry></row>
      <row><entry><constant>SQLite3::RECURSIVE</constant></entry><entry>&null;</entry><entry>&null;</entry></row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   O 4º parâmetro será o nome do banco de dados (<literal>"main"</literal>,
   <literal>"temp"</literal>, etc.) se aplicável.
  </para>
  <para>
   O 5º parâmetro para o retorno de chamada do autorizador é o nome do gatilho ou
   visualização mais interno responsável pela tentativa de acesso ou &null; se esta tentativa de acesso é
   diretamente a partir do código SQL de nível superior.
  </para>
  <para>
   Quando o retorno de chamada retorna <constant>SQLite3::OK</constant>, isso significa que a operação
   solicitada é aceita. Quando o retorno de chamada retorna <constant>SQLite3::DENY</constant>,
   a chamada que acionou o autorizador falhará com uma mensagem de erro explicando que o
   acesso foi negado.
  </para>
  <para>
   Se o código de ação for <constant>SQLite3::READ</constant> e o retorno de chamada retornar
   <constant>SQLite3::IGNORE</constant>, então a declaração preparada é
   construída para substituir um valor &null; no lugar da coluna da tabela que
   seria lida se <constant>SQLite3::OK</constant> tivesse sido retornado. O
   retorno <constant>SQLite3::IGNORE</constant> pode ser usado para negar a um usuário
   não confiável o acesso a colunas individuais de uma tabela.
  </para>
  <para>
   Quando uma tabela é referenciada por um <literal>SELECT</literal>, mas nenhum valor de coluna é
   extraído dessa tabela (por exemplo, em uma consulta como <literal>"SELECT count(*) FROM
   table"</literal>), então o retorno de chamada do autorizador <constant>SQLite3::READ</constant> é
   invocado uma vez para essa tabela com um nome de coluna que é uma string vazia.
  </para>
  <para>
   Se o código de ação for <constant>SQLite3::DELETE</constant> e o retorno de chamada retornar
   <constant>SQLite3::IGNORE</constant>, então a operação DELETE prossegue, mas a
   otimização de truncamento é desativada e todas as linhas são excluídas individualmente.
  </para>
  <para>
   Apenas um autorizador pode estar em vigor em uma conexão de banco de dados de cada vez. Cada chamada
   para <methodname>SQLite3::setAuthorizer</methodname> substitui a chamada anterior. Desative o
   autorizador instalando um retorno de chamada &null;. O autorizador é desativado por padrão.
  </para>
  <para>
   O retorno de chamada do autorizador não deve fazer nada que modifique a conexão de banco de dados
   que invocou o retorno de chamada do autorizador.
  </para>
  <para>
   Observe que o autorizador é chamado apenas quando uma declaração é preparada, não quando ela é
   executada.
  </para>
  <para>
   Mais detalhes podem ser encontrados na
   <link xlink:href="&url.sqlite;c3ref/set_authorizer.html">documentação do SQLite3</link>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>callback</parameter></term>
    <listitem>
     <para>
      O <type>callable</type> a ser chamado.
     </para>
     <para>
      Se &null; for passado, isso desativará o retorno de chamada do autorizador atual.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método não lança nenhum erro, mas se um autorizador estiver habilitado e retornar um
   valor inválido, a preparação da declaração lançará um erro (ou exceção, dependendo
   do uso do método <methodname>SQLite3::enableExceptions</methodname>).
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <methodname>SQLite3::setAuthorizer</methodname></title>
   <para>
    Isso permite apenas o acesso à leitura, e apenas algumas colunas da
    tabela <literal>users</literal> serão retornadas. Outras colunas serão substituídas por
    &null;.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new SQLite3('data.sqlite');
$db->exec('CREATE TABLE users (id, name, password);');
$db->exec('INSERT INTO users VALUES (1, \'Pauline\', \'Snails4eva\');');

$allowed_columns = ['id', 'name'];

$db->setAuthorizer(function (int $action, ...$args) use ($allowed_columns) {
    if ($action === SQLite3::READ) {
        list($table, $column) = $args;

        if ($table === 'users' && in_array($column, $allowed_columns) {
            return SQLite3::OK;
        }

        return SQLite3::IGNORE;
    }

    return SQLite3::DENY;
});

print_r($db->querySingle('SELECT * FROM users WHERE id = 1;'));
]]>
   </programlisting>

   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [id] => 1
    [name] => Pauline
    [password] =>
)
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
