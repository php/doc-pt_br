<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="sqlite3.createaggregate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::createAggregate</refname>
  <refpurpose>Registra uma função PHP para uso como uma função de agregação SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SQLite3">
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3::createAggregate</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam><type>callable</type><parameter>stepCallback</parameter></methodparam>
   <methodparam><type>callable</type><parameter>finalCallback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>argCount</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Registra uma função PHP ou uma função definida pelo usuário para uso como uma função de
   agregação SQL dentro de declarações SQL.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>name</parameter></term>
     <listitem>
      <para>
       Nome do agregado SQL a ser criado ou redefinido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>stepCallback</parameter></term>
     <listitem>
      <para>
       Função de retorno de chamada chamada para cada linha do conjunto de resultados. Sua função PHP
       deve acumular o resultado e armazená-lo no contexto de
       agregação.
      </para>
      <para>
       Esta função deve ser definida como:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>step</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>context</parameter></methodparam>
        <methodparam><type>int</type><parameter>rownumber</parameter></methodparam>
        <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
        <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>context</parameter></term>
         <listitem>
          <para>
           &null; para a primeira linha; nas linhas subsequentes, terá o valor
           que foi retornado anteriormente pela função step; você deve usar
           isso para manter o estado de agregação.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>rownumber</parameter></term>
         <listitem>
          <para>
           O número da linha atual.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>value</parameter></term>
         <listitem>
          <para>
           O primeiro argumento passado para a agregação.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>values</parameter></term>
         <listitem>
          <para>
           Outros argumentos passados para a agregação.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       O valor de retorno desta função será usado como o
       argumento <parameter>context</parameter> na próxima chamada das funções step ou
       finalize.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>finalCallback</parameter></term>
     <listitem>
      <para>
       Função de retorno de chamada para agregar os dados "passados" de cada linha.
       Depois que todas as linhas forem processadas, esta função será chamada
       e ela deve então pegar os dados do contexto de agregação e
       retornar o resultado. Esta função de retorno de chamada deve retornar um tipo compreendido
       pelo SQLite (ou seja, <link linkend="language.types.intro">tipo escalar</link>).
      </para>
      <para>
       Esta função deve ser definida como:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>fini</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>context</parameter></methodparam>
        <methodparam><type>int</type><parameter>rownumber</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>context</parameter></term>
         <listitem>
          <para>
           Mantém o valor de retorno da última chamada à função step.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>rownumber</parameter></term>
         <listitem>
          <para>
           Sempre <literal>0</literal>.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       O valor de retorno desta função será usado como o valor de retorno para
       o agregado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>argCount</parameter></term>
     <listitem>
      <para>
       O número de argumentos que o agregado SQL recebe. Se
       este parâmetro for negativo, então o agregado SQL pode receber
       qualquer número de argumentos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true; após a criação bem-sucedida do agregado, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de função de agregação max_length</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$db = new SQLite3(':memory:');
$db->exec("CREATE TABLE strings(a)");
$insert = $db->prepare('INSERT INTO strings VALUES (?)');
foreach ($data as $str) {
    $insert->bindValue(1, $str);
    $insert->execute();
}
$insert = null;

function max_len_step($context, $rownumber, $string)
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
    return $context;
}

function max_len_finalize($context, $rownumber)
{
    return $context === null ? 0 : $context;
}

$db->createAggregate('max_len', 'max_len_step', 'max_len_finalize');

var_dump($db->querySingle('SELECT max_len(a) from strings'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(5)
]]>
    </screen>
   </example>
  </para>
  <para>
   Neste exemplo, estamos criando uma função de agregação que
   calculará o comprimento da string mais longa em uma das colunas da
   tabela. Para cada linha, a função <literal>max_len_step</literal> é
   chamada e passada um parâmetro <literal>$context</literal>. O parâmetro de contexto
   é como qualquer outra variável PHP e pode ser definido para conter um array
   ou até mesmo um valor de objeto. Neste exemplo, estamos simplesmente usando-o para conter
   o comprimento máximo que vimos até agora; se a
   <literal>$string</literal> tiver um comprimento maior do que o
   máximo atual, atualizamos o contexto para armazenar este novo comprimento máximo.
  </para>
  <para>
   Depois que todas as linhas forem processadas, o SQLite chama a função
   <literal>max_len_finalize</literal> para determinar o resultado da agregação.
   Aqui, poderíamos realizar algum tipo de cálculo com base nos
   dados encontrados no <literal>$context</literal>. Em nosso exemplo simples
   porém, estivemos calculando o resultado à medida que a consulta progredia, então
   simplesmente precisamos retornar o valor de contexto.
  </para>
  <tip>
   <para>
    NÃO é recomendado que você armazene uma cópia dos valores no contexto
    e depois os processe no final, pois você faria com que o SQLite usasse muita
    memória para processar a consulta - apenas pense em quanto de memória você precisaria
    se um milhão de linhas fossem armazenadas em memória, cada uma contendo uma string de 32 bytes
    de comprimento.
   </para>
  </tip>
  <tip>
   <para>
    Você pode usar <methodname>SQLite3::createAggregate</methodname> para substituir
    funções SQL nativas do SQLite.
   </para>
  </tip>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
