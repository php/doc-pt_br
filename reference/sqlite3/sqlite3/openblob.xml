<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="sqlite3.openblob" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::openBlob</refname>
  <refpurpose>Abre um recurso de fluxo para ler um BLOB</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SQLite3">
   <modifier>public</modifier> <type class="union"><type>resource</type><type>false</type></type><methodname>SQLite3::openBlob</methodname>
   <methodparam><type>string</type><parameter>table</parameter></methodparam>
   <methodparam><type>string</type><parameter>column</parameter></methodparam>
   <methodparam><type>int</type><parameter>rowid</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>database</parameter><initializer>"main"</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>SQLITE3_OPEN_READONLY</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Abre um recurso de fluxo para ler ou escrever um BLOB, que seria selecionado por:
  </para>
  <para>
   SELECT <parameter>column</parameter> FROM <parameter>database</parameter>.<parameter>table</parameter> WHERE rowid = <parameter>rowid</parameter>
  </para>
  <note>
   <simpara>
    Não é possível alterar o tamanho de um BLOB escrevendo no fluxo.
    Em vez disso, uma declaração UPDATE deve ser executada, possivelmente usando a função
    zeroblob() do SQLite para definir o tamanho desejado do BLOB.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>table</parameter></term>
     <listitem>
      <para>
       O nome da tabela.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       O nome da coluna.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rowid</parameter></term>
     <listitem>
      <para>
       O ID da linha.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>database</parameter></term>
     <listitem>
      <para>
       O nome simbólico do banco de dados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Seja <constant>SQLITE3_OPEN_READONLY</constant> ou
       <constant>SQLITE3_OPEN_READWRITE</constant> para abrir o fluxo
       somente para leitura ou para leitura e escrita, respectivamente.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um recurso de fluxo, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       O parâmetro <parameter>flags</parameter> foi adicionado, permitindo
       escrever BLOBs; anteriormente, apenas a leitura era suportada.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>SQLite3::openBlob</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new SQLite3(':memory:');
$conn->exec('CREATE TABLE test (text text)');
$conn->exec("INSERT INTO test VALUES ('Lorem ipsum')");
$stream = $conn->openBlob('test', 'text', 1);
echo stream_get_contents($stream);
fclose($stream); // obrigatório, caso contrário a próxima linha falharia
$conn->close();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lorem ipsum
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Escrevendo incrementalmente um BLOB</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new SQLite3(':memory:');
$conn->exec('CREATE TABLE test (text text)');
$conn->exec("INSERT INTO test VALUES (zeroblob(36))");
$stream = $conn->openBlob('test', 'text', 1, 'main', SQLITE3_OPEN_READWRITE);
for ($i = 0; $i < 3; $i++) {
    fwrite($stream,  "Lorem ipsum\n");
}
fclose($stream);
echo $conn->querySingle("SELECT text FROM test");
$conn->close();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lorem ipsum
Lorem ipsum
Lorem ipsum
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
