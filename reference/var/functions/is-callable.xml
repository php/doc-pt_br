<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 83a17a7324c2597bd6385148abf19f76127229f5 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Verifica se um valor pode ser chamado como uma função a partir do escopo atual.
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Verifica se um valor é do tipo <type>callable</type>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       O valor a ser verificado
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Se definido para &true; a função apenas verifica se
       <parameter>value</parameter> pode ser uma função o método. Ela irá apenas
       rejeitar variáveis simples que não sejam strings, ou um array que não
       tem estrutura válida para ser usado como função de chamada de retorno. Os válidos
       devem ter apenas 2 entradas, a primeira delas é um objeto
       ou uma string, e a segunda uma string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Recebe o "nome da função chamável". No exemplo abaixo é
       "someClass::someMethod". Note, entretando, que embora a implicação de
       que someClass::SomeMethod() seja um método estático que pode ser chamado, este não
       é o caso.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true; se <parameter>value</parameter> puder ser chamado como função, &false;
   caso contrário.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>is_callable</function></title>
    <programlisting role="php">
<![CDATA[
<?php
//  Como verificar uma variável para ver se ela pode ser chamada
//  como uma função.

//
//  Variável simples contendo uma função
//

function someFunction()
{
}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));  // bool(true)

echo $callable_name, "\n";  // someFunction

//
//  Array contendo um método
//

class someClass {

  function someMethod()
  {
  }

}

$anObject = new someClass();

$methodVariable = array($anObject, 'someMethod');

var_dump(is_callable($methodVariable, true, $callable_name));  //  bool(true)

echo $callable_name, "\n";  //  someClass::someMethod

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Exemplo de <function>is_callable</function> e contrutores</title>
    <simpara>
     <function>is_callable</function> reporta construtores como métodos
     que não podem ser chamados.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}
    public function foo() {}
}

var_dump(
    is_callable(array('Foo', '__construct')),
    is_callable(array('Foo', 'foo'))
);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Um objeto é sempre chamável se ele implementar o método <link linkend="object.invoke">__invoke()</link>,
    e este método estiver visível no escopo atual.
   </member>
   <member>
    Um nome de classe é chamável se ela implementa o método <link linkend="object.callstatic">__callStatic()</link>.
   </member>
   <member>
    Se um objeto implementa o método <link linkend="object.call">__call()</link>, então esta função
    retornará &true; para qualquer método neste objeto, mesmo se o método não estiver definido.
   </member>
   <member>
    Esta função pode disparar o auto-carregamento se chamada com o nome de uma classe.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
