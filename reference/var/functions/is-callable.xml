<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 32c55286c8739fd20de9c8624473b2f3268de68e Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Verifica se um valor pode ser chamado como uma função a partir do escopo atual
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Verifica se o valor informado em <parameter>value</parameter> é do tipo <type>callable</type>,
   ou se pode ser chamado usando a função
   <function>call_user_func</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       O valor a ser verificado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Se definido para &true; a função apenas verifica se
       <parameter>value</parameter> pode ser uma função ou método. Ela irá
       rejeitar quaisquer valores que não sejam objetos <link linkend="object.invoke">chamáveis</link>,
       <classname>Closure</classname>, &string;s ou &array;s que não tenham
       uma estrutura válida para ser usado como uma função de retorno. Um array chamável válido
       tem 2 entradas, a primeira delas é um objeto
       ou uma string, e a segunda uma string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Recebe o "nome da função chamável", por exemplo,
       <literal>"AlgumaClasse::algumMétodo"</literal>. Observe, entretanto, que embora
       a implicação de que <literal>AlgumaClasse::algumMétodo()</literal> seja um
       método estático chamável, este não é o caso.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true; se <parameter>value</parameter> puder ser chamado como função, &false;
   caso contrário.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Verificando se uma string pode ser chamada como uma função</title>
    <programlisting role="php">
<![CDATA[
<?php

function someFunction() {}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(12) "someFunction"
]]>
    </screen>
   </example>
   <example>
    <title>Verificando se um array pode ser chamado como uma função</title>
    <programlisting role="php">
<![CDATA[
<?php

class SomeClass
{
    function someMethod() {}
}

$anObject = new SomeClass();

$methodVariable = [$anObject, 'someMethod'];

var_dump(is_callable($methodVariable, true, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(21) "SomeClass::someMethod"
]]>
    </screen>
   </example>
   <example>
    <title>Exemplo de <function>is_callable</function> e construtores</title>
    <simpara>
     Apesar do fato que construtores são métodos que são chamados quando
     um objeto é criado, eles não são métodos estáticos e
     <function>is_callable</function> retornará &false; para eles. Não é
     possível usar <function>is_callable</function> para verificar se uma classe pode
     ser instanciada a partir do escopo atual.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}

    public function foo() {}
}

var_dump(
    is_callable(['Foo', '__construct']),
    is_callable(['Foo', 'foo'])
);

$foo = new Foo();
var_dump(is_callable([$foo, '__construct']));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Um objeto é sempre chamável se ele implementar o método <link linkend="object.invoke">__invoke()</link>,
    e este método estiver visível no escopo atual.
   </member>
   <member>
    Um nome de classe é chamável se ela implementa o método <link linkend="object.callstatic">__callStatic()</link>.
   </member>
   <member>
    Se um objeto implementa o método <link linkend="object.call">__call()</link>, então esta função
    retornará &true; para qualquer método neste objeto, mesmo se o método não estiver definido.
   </member>
   <member>
    Esta função pode disparar o auto-carregamento se chamada com o nome de uma classe.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
