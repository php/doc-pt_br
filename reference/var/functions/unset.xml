<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: felipe Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.2 -->
  <refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Destrói a variável especificada</refpurpose>
   </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function> destrói a variável especificada.
    </para>
    <para>
     O comportamento de <function>unset</function> pode variar dentro de
     uma função dependendo do tipo de variável que você está tentando
     destruir.
    </para>
    <para>
     Se utilizar <function>unset</function> em uma variável global dentro de
     uma função, somente a variável local será destruída.  A variável
     no ambiente que foi chamada terá o mesmo valor como antes da execução de
     <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
    </para>
          &example.outputs;
      <para>
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
   Se você quer usar <function>unset</function> na variável global
   dentro de uma função, você pode usar
   o array <varname>$GLOBALS</varname>, veja então:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
     Se a variável for passada por referencia e a função
     <function>unset</function> estiver dentro de uma função, apenas a variável
     local será destruída. A variável no ambiente que chamou a função onde esta
     <function>unset</function> irá manter o mesmo valor de antes da
     utilização de <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
      </para>
   &example.outputs;
      <para>
     <informalexample>
      <screen>
<![CDATA[
something
something
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Se for utilizado <function>unset</function> com uma variável estática
     dentro de uma função, <function>unset</function> destrói a variável somente
     no contexto do resto da função. Chamada seguintes irão restaurar o 
     valor anterior da variável.
     todas as suas referências.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Before unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "after unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
      </para>
   &example.outputs;
  <para>
     <informalexample>
      <screen>
<![CDATA[
Before unset: 1, after unset: 23
Before unset: 2, after unset: 23
Before unset: 3, after unset: 23
]]>
      </screen>
     </informalexample>
    </para>
 </refsect1>
  
 <refsect1 role="parameters">
  &reftitle.parameters;
    <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       The variable to be unset.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Another variable ..
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo da <function>unset</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// destroy a single variable
unset($foo);

// destroy a single element of an array
unset($bar['quux']);

// destroy more than one variable
unset($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
    &note.language-construct;
  <note>
   <para>
    É possível usar unset em propriedades de objetos visíveis no contexto atual.
   </para>
  </note>
  <note>
   <para>
    Não é possível usar unset em <literal>$this</literal> dentro de um método
    de objeto desde o PHP 5.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;

    <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><function>array_splice</function></member>
   </simplelist>
    </para>
   </refsect1>
   
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
