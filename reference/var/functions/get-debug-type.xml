<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0edc11c6c46753ef0b81d0060b925b4f58552996 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.get-debug-type" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_debug_type</refname>
  <refpurpose>Obtém o nome do tipo de uma variável de forma adequada a depuração</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>get_debug_type</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retorna o nome resolvido da variável PHP  <parameter>value</parameter>.
   Esta função resolverá objetos ao nome da classe deles, recursos ao nome do
   tipo de recurso deles, e valores escalares ao nome comum deles como seria usado em
   declarações de tipo.
  </para>
  <para>
   Este função difere de <function>gettype</function> pelo fato de retornar nomes de tipo
   que são mais consistentes com o uso real, ao invés daqueles exsitentes por razões históricas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       A variáver a ter o tipo verificado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
     Valores possíveis para a string de retorno são:

     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Tipo + Estado</entry>
         <entry>Valor de Retorno</entry>
         <entry>Notas</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>nulo</entry>
         <entry>
          <literal>"null"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Booleanos (verdadeiro ou falso)</entry>
         <entry>
          <literal>"bool"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Inteiros</entry>
         <entry>
          <literal>"int"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Números de ponto flutuante</entry>
         <entry>
          <literal>"float"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Strings</entry>
         <entry>
          <literal>"string"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Arrays</entry>
         <entry>
          <literal>"array"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Recursos</entry>
         <entry>
          <literal>"resource (resourcename)"</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Recursos (Fechados)</entry>
         <entry>
          <literal>"resource (closed)"</literal>
         </entry>
         <entry>Exemplo: um fluxo de arquivo depois de ter sido fechado com fclose.</entry>
        </row>
        <row>
         <entry>Objetos de Classes com Nome</entry>
         <entry>
          O nome completo da classe incluindo seu espaço de nomes, ex.: <literal>Foo\Bar</literal>
         </entry>
         <entry>-</entry>
        </row>
        <row>
         <entry>Objetos de Classes Anônimas</entry>
         <entry>
          <literal>"class@anonymous"</literal>
         </entry>
         <entry>
          Classes anônimas são aquelas criadas através da sintaxe $x = new class { ... }
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
  </para>
 </refsect1>


 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>get_debug_type</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo get_debug_type(null) . PHP_EOL;
echo get_debug_type(true) . PHP_EOL;
echo get_debug_type(1) . PHP_EOL;
echo get_debug_type(0.1) . PHP_EOL;
echo get_debug_type("foo") . PHP_EOL;
echo get_debug_type([]) . PHP_EOL;

$fp = fopen(__FILE__, 'rb');
echo get_debug_type($fp) . PHP_EOL;

fclose($fp);
echo get_debug_type($fp) . PHP_EOL;

echo get_debug_type(new stdClass) . PHP_EOL;
echo get_debug_type(new class {}) . PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
null
bool
int
float
string
array
resource (stream)
resource (closed)
stdClass
class@anonymous
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>gettype</function></member>
    <member><function>get_class</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
