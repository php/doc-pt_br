<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ce3a2d381693ccbc10cc4a808c3eb853f3c85c9e Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   Cria um valor PHP a partir de uma representação armazenada
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> toma uma única variável serializada e
   converte-a de volta em um valor PHP.
  </simpara>
  <warning>
   <para>
    Entradas de usuário não confiáveis não devem ser passadas a <function>unserialize</function> independente
    dos valores do elemento <literal>allowed_classes</literal> do parâmetro <parameter>options</parameter>.
    Desserialização pode resultar em um código carregado e executado devido a uma instanciação
    de objeto e auto-carregamento, e um usuário malicioso pode ser capaz de explorar
    isto. Use um formato padrão e seguro de troca de dados como JSON (via
    <function>json_decode</function> e <function>json_encode</function>) se
    for necessário passar dados serializados ao usuário.
   </para>
   <para>
    Se for necessário desserializar dados armazenados externamente, considere o uso de
    <function>hash_hmac</function> para validação de dados. Certifique-se que os dados não
    foram modificados por outras pessoas.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       A string serializada.
      </para>
      <para>
       Se a variável a ser desserializada for um objeto, após a reconstrução
       bem sucedida do objeto o PHP tentará automaticamente chamar os métodos
       <link linkend="object.unserialize">__unserialize()</link> ou <link linkend="object.wakeup">__wakeup()</link> (se existirem).
      </para>
      <para>
       <note>
        <title>unserialize_callback_func directive</title>
        <para>
         É possível definir uma função de retorno de chamada,
         se uma classe indefinida tiver sido instanciada durante a desserialização.
         (para evitar receber um objeto imcompleto do tipo <type>object</type> "__PHP_Incomplete_Class".)
         Deve-se usar o &php.ini;, a função <function>ini_set</function> ou o arquivo &htaccess;
         para definir <link linkend="ini.unserialize-callback-func">unserialize_callback_func</link>.
         Toda vez que uma classe indefinida precisar ser instanciada, ela será chamada. Para desabilitar este recurso basta
         esvaziar esta configuração.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Quaisquer opções podem ser fornecidas a <function>unserialize</function> como um
       array associativo.
      </para>
      <table>
       <title>Opções válidas</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Nome</entry>
          <entry>Tipo</entry>
          <entry>Descrição</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>allowed_classes</literal></entry>
          <entry><type>mixed</type></entry>
          <entry>
           <simpara>
            Pode ser um <type>array</type> de nomes de classe que devem ser
            aceitas, &false; para não aceitar nenhuma classe, ou &true; para aceitar todas
            as classes. Se esta opção for definida e
            <function>unserialize</function> encontrar um objeto de uma classe
            que não deve ser aceita, o objeto será instanciado como uma
            <classname>__PHP_Incomplete_Class</classname>.
           </simpara>
           <simpara>
            Omitir esta opção é o mesmo que defini-la como &true;: o PHP
            tentará instanciar objetos de qualquer classe.
           </simpara>
          </entry>
         </row>
         <row>
          <entry><literal>max_depth</literal></entry>
          <entry><type>int</type></entry>
          <entry>
           <simpara>
            A profundidade máxima de estruturas permitidas durante a desserialização,
            com a intenção de prevenir sobrecarga de pilha. O limite padrão de profundidade
            é <literal>4096</literal> e pode ser desabilitado definindo-se
            <literal>max_depth</literal> para <literal>0</literal>.
           </simpara>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   O valor convertido é retornado, e pode ser <type>bool</type>,
   <type>int</type>, <type>float</type>, <type>string</type>,
   <type>array</type> ou <type>object</type>.
  </para>
  <para>
   Caso a string informada não for desserializável, &false; é retornado e
   um erro de nível <constant>E_NOTICE</constant> é emitido.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Objetos podem disparar exceções da classe <classname>Throwable</classname> em seus manipuladores de desserialização.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Adicionado elemento <literal>max_depth</literal> do array
        <parameter>options</parameter> para definir a profundidade máxima de estruturas permitidas durante desserialização.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        O elemento <literal>allowed_classes</literal> de
        <parameter>options</parameter>) agora é estritamente tipado, isto é, se algo
        que não seja um <type>array</type> ou um <type>bool</type> for fornecido,
        <function>unserialize</function> retorna &false; e emite um erro de nível
        <constant>E_WARNING</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de  <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Aqui, será usado unserialize() para carregar dados de sessão para o
// array $session_data a partir de uma string selecionada de um banco de dados.
// Este exemplo complementa o descrito em serialize().

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // se a execute ou fetch falharem, inicializa como um array vazio
    $session_data = array();
} else {
    // agora os dados serializados devem estar em $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // algo deu errado, inicializa como um array vazio
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo de unserialize_callback_func</title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

ini_set('unserialize_callback_func', 'mycallback'); // define a função de retorno de chamada

function mycallback($classname)
{
    // apenas inclua um arquivo contendo sua definição de classe
    // $classname serve para determinar que definição de classe é requerida
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; é retornado tanto em caso de um erro quanto no caso de desserializar
    o valor &false; serializado. É possível capturar este caso especial
    comparando-se <parameter>data</parameter> com
    <literal>serialize(false)</literal> ou capturando-se o erro de nível
    <constant>E_NOTICE</constant> emitido.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Auto-carregamento de Classes</link></member>
    <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
    <member><link linkend="ini.unserialize-max-depth">unserialize_max_depth</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
