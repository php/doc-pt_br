<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
  <refpurpose>Gera uma representação armazenável de um valor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>serialize</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
  <para>
   Gera uma representação armazenável de um valor.
  </para>
  <para>
   É útil para armazenar ou passar um valor do PHP sem
   perder seu tipo ou estrutura.
  </para>
  <para>
   Para restaurar uma string serializada de volta a um valor PHP, use
   <function>unserialize</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       O valor a ser serializado. <function>serialize</function>
       lida com todos os tipos, exceto recursos (<type>resource</type>) e alguns objetos (<type>object</type>)s (veja nota abaixo).
       Pode-se até usar <function>serialize</function> para array que contenha
       referência a si mesmo. Referências circulaes dentro do array/objeto
       a ser serializado também serão armazenadas. Qualquer outra
       referência será perdida.
      </para>
      <para>
       Ao serializar objetos, o PHP tentará chamar as funções membro
       <link linkend="object.serialize">__serialize()</link> ou
       <link linkend="object.sleep">__sleep()</link> antes da serialização.
       Isto serve para permitir ao objeto alguma limpeza de última hora, etc. antes
       de ser realizado. Da mesma forma, quando o objeto é restaurado usando
       <function>unserialize</function>, a função membro <link linkend="object.unserialize">__unserialize()</link> ou
       <link linkend="object.wakeup">__wakeup()</link> será chamada.
      </para>
      <note>
       <para>
       Os membros privados terão o nome da classe prefixando o nome do
       membro; membros protegidos terão um '*' prefixando o nome.
       Estes prefixos serão envolvidos por bytes nulos, um de cada lado.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna uma string contendo uma representação em fluxo de bytes de
   <parameter>value</parameter> que pode ser armazenada em qualquer lugar.
  </para>
  <para>
   Note que esta string é binária e pode incluir bytes nulos, e precisa
   ser armazenada e gerenciada como tal. Por exemplo,
   a saída de <function>serialize</function> deveria ser armazenada geralmente em um
   campo BLOB de um banco de dados, e não em um campo tipo CHAR ou TEXT.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>serialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// $session_data contém um array multi-dimensional com informação
// de sessão do usuário atual. serialize() será utilizada para armazenar
// a variável em um banco de dados ao final da requisição.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, array_reverse($sqldata))) {
        /* Algo deu errado.. */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Note que muitos objetos internos do PHP não podem ser serializados. Entretando, os que tiverem
    esta habilidade ou implementam a interface <interfacename>Serializable</interfacename> ou os
    métodos mágicos <link linkend="object.serialize">__serialize()</link>/<link linkend="object.unserialize">__unserialize()</link>
    ou <link linkend="object.sleep">__sleep()</link>/<link linkend="object.wakeup">__wakeup()</link>. Se uma
    classe interna não preencher algum desses requisitos, ela não poderá
    ser serializada com confiança.
   </para>
   <para>
    Existem algumas exceções histórias à regra acima, onde alguns objetos internos
    poderiam ser serializados sem implementar a interface ou expor os métodos.
   </para>
  </note>
  <warning>
   <para>
    Quando <function>serialize</function> serializa objetos, a barra invertida no início não é incluída nas classes com espaço de nomes para máxima compatibilidade.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><function>var_export</function></member>
    <member><function>json_encode</function></member>
    <member><link linkend="language.oop5.serialization">Serializando Objetos</link></member>
    <member><link linkend="object.sleep">__sleep()</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
