<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.isset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>isset</refname>
  <refpurpose>Determina se uma variável está declarada e é diferente de &null;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
 &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>isset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   Determina se uma variável é considerada definida,
   isto é, está declarada e é diferente de &null;.
  </para>
  <para>
   Se a variável tornou-se indefinida com a função <function>unset</function>,
   ela não é mais considerada definida.
  </para>
  <para>
   <function>isset</function> retornará &false; ao verificar uma
   variável que foi atribuída com o valor &null;.
   Note também que um caractere nulo (<literal>"\0"</literal>) não é
   equivalente à constante &null; do PHP.
  </para>
  <para>
   Se múltiplos parâmetros forem fornecidos então <function>isset</function>
   retornará &true; apenas se todos os parâmetros forem considerados definidos.
   A avaliação ocorre da esquerda para a direira e para assim que uma variável
   indefinida for encontrada.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       A variável a ser verificada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       Mais variáveis a verificar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true; se <parameter>var</parameter> existe e tem
   qualquer valor diferente de &null;. &false; caso contrário.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplos de <function>isset</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$var = '';

// Isto será avaliado como VERDADEIRO e por isso o texto será mostrado.
if (isset($var)) {
    echo "Esta variável está definida então vou imprimir.";
}

// Nos próximos exemplos, será utilizado var_dump() para mostrar
// o valor de retorno de isset().

$a = "teste";
$b = "outroteste";

var_dump(isset($a));     // VERDADEIRO
var_dump(isset($a, $b)); // VERDADEIRO

unset ($a);

var_dump(isset($a));     // FALSO
var_dump(isset($a, $b)); // FALSO

$foo = NULL;
var_dump(isset($foo));   // FALSO

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Isto também funciona para elementos em arrays:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$a = array ('test' => 1, 'hello' => NULL, 'pie' => array('a' => 'apple'));

var_dump(isset($a['test']));            // VERDADEIRO
var_dump(isset($a['foo']));             // FALSO
var_dump(isset($a['hello']));           // FALSO

// A chave 'hello' é igual a NULO então é considerada indefinida
// Se deseja-se verificar por chaves de valores NULOS, deve-se tentar:
var_dump(array_key_exists('hello', $a)); // VERDADEIRO

// Verificando valores de array em maior profundidade
var_dump(isset($a['pie']['a']));        // VERDADEIRO
var_dump(isset($a['pie']['b']));        // FALSO
var_dump(isset($a['cake']['a']['b']));  // FALSO

?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <example>
   <title><function>isset</function> em Deslocamento de Strings</title>
   <programlisting role="php">
<![CDATA[
<?php
$expected_array_got_string = 'somestring';
var_dump(isset($expected_array_got_string['some_key']));
var_dump(isset($expected_array_got_string[0]));
var_dump(isset($expected_array_got_string['0']));
var_dump(isset($expected_array_got_string[0.5]));
var_dump(isset($expected_array_got_string['0.5']));
var_dump(isset($expected_array_got_string['0 Mostel']));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(true)
bool(true)
bool(true)
bool(false)
bool(false)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    <function>isset</function> somente funciona com variáveis, pois passar qualquer
    outra coisa resultará em erro de interpretação. Para verificar se
    <link linkend="language.constants">constantes</link> estão definidas, use a função
    <function>defined</function>.
   </para>
  </warning>
  &note.language-construct;
  <note>
   <para>
    Ao usar <function>isset</function> em propriedades inacessíveis de objetos,
    o método de sobrecarga <link linkend="object.isset">__isset()</link>
    será chamado, se declarado.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>empty</function></member>
    <member><link linkend="object.isset">__isset()</link></member>
    <member><function>unset</function></member>
    <member><function>defined</function></member>
    <member><link linkend="types.comparisons">Tabelas de comparação de tipos</link></member>
    <member><function>array_key_exists</function></member>
    <member><function>is_null</function></member>
    <member>Operador <link linkend="language.operators.errorcontrol">@</link> de controle de erro</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
