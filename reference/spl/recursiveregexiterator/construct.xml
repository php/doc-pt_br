<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d51166ca16fda8e766849505b84f9306ef443f71 Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="recursiveregexiterator.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RecursiveRegexIterator::__construct</refname>
  <refpurpose>Cria um novo RecursiveRegexIterator</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="RecursiveRegexIterator">
   <modifier>public</modifier> <methodname>RecursiveRegexIterator::__construct</methodname>
   <methodparam><type>RecursiveIterator</type><parameter>iterator</parameter></methodparam>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>RecursiveRegexIterator::MATCH</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>pregFlags</parameter><initializer>0</initializer></methodparam>
  </constructorsynopsis>

  <para>
   Cria um novo iterador de expressão regular.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iterator</parameter></term>
     <listitem>
      <para>
       O iterador recursivo ao qual este filtro de regex será aplicado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       A expressão regular a ser correspondida.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Modo de operação, consulte <methodname>RegexIterator::setMode</methodname> para uma lista
       de modos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Opções especiais, consulte <methodname>RegexIterator::setFlags</methodname> para uma lista
       de opções disponíveis.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pregFlags</parameter></term>
     <listitem>
      <para>
       As opções de expressão regular. Essas flags dependem do parâmetro de modo de operação:
      </para>
      <para>
      <table>
        <title><classname>RegexIterator</classname> preg_flags</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>modo de operação</entry>
           <entry>opções disponíveis</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><varname linkend="regexiterator.constants.all-matches">RecursiveRegexIterator::ALL_MATCHES</varname></entry>
           <entry>
            Veja <function>preg_match_all</function>.
           </entry>
          </row>
          <row>
           <entry><varname linkend="regexiterator.constants.get-match">RecursiveRegexIterator::GET_MATCH</varname></entry>
           <entry>
            Veja <function>preg_match</function>.
           </entry>
          </row>
          <row>
           <entry><varname linkend="regexiterator.constants.match">RecursiveRegexIterator::MATCH</varname></entry>
           <entry>
            Veja <function>preg_match</function>.
           </entry>
          </row>
          <row>
           <entry><varname linkend="regexiterator.constants.replace">RecursiveRegexIterator::REPLACE</varname></entry>
           <entry>
            nenhum.
           </entry>
          </row>
          <row>
           <entry><varname linkend="regexiterator.constants.split">RecursiveRegexIterator::SPLIT</varname></entry>
           <entry>
            Veja <function>preg_split</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>RecursiveRegexIterator::__construct</function></title>
    <para>
     Cria um novo RegexIterator que filtra todas as strings que começam com 'test'.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));
$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '/^test/',
    RecursiveRegexIterator::ALL_MATCHES);

foreach ($rRegexIterator as $key1 => $value1) {

    if ($rRegexIterator->hasChildren()) {

        // print all children
        echo "Children: ";
        foreach ($rRegexIterator->getChildren() as $key => $value) {
            echo $value . " ";
        }
        echo "\n";
    } else {
        echo "No children\n";
    }

}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
No children
Children: test4 test5
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_match_all</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
