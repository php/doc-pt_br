<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ec2fe9a592f794978114ef5021db9f1d00c2e05d Maintainer: fernandowobeto Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="reflectionparameter.gettype" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionParameter::getType</refname>
  <refpurpose>Obtém o tipo de um parâmetro</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionParameter">
   <modifier>public</modifier> <type class="union"><type>ReflectionType</type><type>null</type></type><methodname>ReflectionParameter::getType</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Obtém o tipo associado de um parâmetro.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um objeto <classname>ReflectionType</classname> se um tipo de parâmetro for
   especificado, &null; caso contrário.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><methodname>ReflectionParameter::getType</methodname> Uso a partir do PHP 7.1.0</title>
    <simpara>
     A partir do PHP 7.1.0, <methodname>ReflectionType::__toString</methodname> está depreciado e
     <methodname>ReflectionParameter::getType</methodname> <emphasis>pode</emphasis> retornar uma
     instância de <classname>ReflectionNamedType</classname>. Para obter o nome do tipo de parâmetro,
     <methodname>ReflectionNamedType</methodname> está disponível neste caso.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
function someFunction(int $param, $param2) {}

$reflectionFunc = new ReflectionFunction('someFunction');
$reflectionParams = $reflectionFunc->getParameters();
$reflectionType1 = $reflectionParams[0]->getType();
$reflectionType2 = $reflectionParams[1]->getType();

assert($reflectionType1 instanceof ReflectionNamedType);
echo $reflectionType1->getName(), PHP_EOL;
var_dump($reflectionType2);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int
NULL
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><methodname>ReflectionParameter::getType</methodname> Uso antes do PHP 7.1.0</title>
    <programlisting role="php">
<![CDATA[
<?php
function someFunction(int $param, $param2) {}

$reflectionFunc = new ReflectionFunction('someFunction');
$reflectionParams = $reflectionFunc->getParameters();
$reflectionType1 = $reflectionParams[0]->getType();
$reflectionType2 = $reflectionParams[1]->getType();

echo $reflectionType1, PHP_EOL;
var_dump($reflectionType2);
?>
]]>
    </programlisting>
    &example.outputs.70;
    <screen>
<![CDATA[
int
NULL
]]>
    </screen>
   </example>
   <example>
   <title><methodname>ReflectionParameter::getType</methodname> Uso no PHP 8.0.0 e posterior</title>
    <para>
     A partir do PHP 8.0.0, este método pode retornar uma instância <classname>ReflectionNamedType</classname> ou
     uma instância de <classname>ReflectionUnionType</classname>. Este último é uma coleção do primeiro.
     Para analisar um tipo, geralmente é conveniente normalizá-lo para um array de objetos <classname>ReflectionNamedType</classname>
     A função a seguir retornará um array de <literal>0</literal> ou mais de instâncias
     <classname>ReflectionNamedType</classname>.
    </para>
   <programlisting role="php">
<![CDATA[
<?php
function getAllTypes(ReflectionParameter $reflectionParameter): array
{
    $reflectionType = $reflectionParameter->getType();

    if (!$reflectionType) return [];

    return $reflectionType instanceof ReflectionUnionType
        ? $reflectionType->getTypes()
        : [$reflectionType];
}
?>
]]>
   </programlisting>
  </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionParameter::hasType</methodname></member>
    <member><methodname>ReflectionType::__toString</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
