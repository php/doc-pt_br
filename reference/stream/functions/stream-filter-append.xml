<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.stream-filter-append" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_append</refname>
  <refpurpose>Anexa um filtro a um fluxo</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_filter_append</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>read_write</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   Adiciona o nome do filtro <parameter>filtername</parameter> à lista de filtros
   anexados ao fluxo <parameter>stream</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      <para>
       O fluxo alvo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       O nome do filtro.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read_write</parameter></term>
     <listitem>
      <para>
       Por padrão, <function>stream_filter_append</function> irá
       anexar o filtro à <literal>cadeia de filtros de leitura</literal>
       se o arquivo foi aberto para leitura (isto é, modo de arquivo:
       <literal>r</literal> e/ou <literal>+</literal>). O filtro
       também será anexado à <literal>cadeia de filtros de escrita</literal>
       se o arquivo foi aberto para escrita (isto é, modo de arquivo:
       <literal>w</literal>, <literal>a</literal> e/ou <literal>+</literal>).
       As constantes <constant>STREAM_FILTER_READ</constant>,
       <constant>STREAM_FILTER_WRITE</constant> e/ou
       <constant>STREAM_FILTER_ALL</constant> também podem ser passadas ao parâmetro
       <parameter>read_write</parameter> para substituir este comportamento.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Este filtro será adicionado com os parâmetros especificados em
       <parameter>params</parameter> ao <emphasis>final</emphasis> da
       lista e portanto serão chamados por último durante operações de fluxo.
       Para adicionar um filtro ao início da lista, use
       <function>stream_filter_prepend</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um recurso em caso de sucesso ou &false; em caso de falha. O recurso pode ser
   usado para se referir a este instância de filtro durante a chamada a
   <function>stream_filter_remove</function>.
  </para>

  <para>
   &false; é retornado se o parâmetro <parameter>stream</parameter> não for um recurso ou
   se o nome do filtro <parameter>filtername</parameter> não puder ser localizado.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Controlando onde os filtros são aplicados</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Abre um arquivo de teste para leitura e escrita */
$fp = fopen('test.txt', 'w+');

/* Applica o filtro ROT13 à
 * cadeia de filtros de escrita, mas não à
 * cadeia de filtros de leitura */
stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);

/* Escreve uma string simples ao arquivo
 * que será transformado através do ROT13 na
 * saída */
fwrite($fp, "This is a test\n");

/* Retrocede ao início do arquivo */
rewind($fp);

/* Lê de volta o conteúdo do arquivo.
 * Se o filtro tivesse sido aplicado também
 * à cadeia de filtros de leitura, seria visto o texto
 * com o filtro ROT13 reaplicado, de volta a seu estado original */
fpassthru($fp);

fclose($fp);

/* Expected Output
   ---------------

Guvf vf n grfg

 */
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Usando filtros personalizados (do usuário)</title>
   <simpara>
    <function>stream_filter_register</function> deve ser chamado em primeiro lugar
    de maneira a registrar o filtro de usuário desejado para o valor de <parameter>filtername</parameter>.
   </simpara>
  </note>
  <note>
   <simpara>
    Dados de fluxo são lidos dos recursos (tanto locais quanto remotos) em partes,
    com quaisquer dados não consumidos mantidos em buffers internos. Quando um novo
    filtro é anexado a um fluxo, dados no buffer interno são processados através
    do novo filtro neste momento.  Isto difere do comportamento de
    <function>stream_filter_prepend</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    Quando um filtro é adicionado para leitura e escrita, duas instâncias do filtro
    são criadas. <function>stream_filter_append</function> deve ser chamada duas vezes
    com <constant>STREAM_FILTER_READ</constant> e
    <constant>STREAM_FILTER_WRITE</constant> para obter ambos os recursos de filtro.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_filter_register</function></member>
   <member><function>stream_filter_prepend</function></member>
   <member><function>stream_get_filters</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
