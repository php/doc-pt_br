<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a123b24db5b3e42841179fea13cd508418fc45c7 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.stream-select" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_select</refname>
  <refpurpose>Executa o equivalente à chamada de sistema select() nos arrays de fluxos
   informados com um limite de tempo especificado por segundos e microssegundos</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>stream_select</methodname>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter role="reference">read</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter role="reference">write</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter role="reference">except</parameter></methodparam>
   <methodparam><type class="union"><type>int</type><type>null</type></type><parameter>seconds</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>microseconds</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   A função <function>stream_select</function> aceita arrays de fluxos e
   espera por alteração em seus estados. Sua operação é equivalente à da
   função <function>socket_select</function> exceto por atuar em fluxos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>read</parameter></term>
     <listitem>
      <para>
       Os fluxos listados no array <parameter>read</parameter> serão observados para
       ver se caracteres se tornem disponíveis para leitura (mais precisamente, para ver se
       uma leitura não irá bloquear - em particular, um recurso de fluxo já se encontra pronto no
       final do arquivo, neste caso a função <function>fread</function> irá retornar uma string
       com comprimento zero).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write</parameter></term>
     <listitem>
      <para>
       Os fluxos listados no array <parameter>write</parameter> serão
       observados para ver se uma escrita não irá bloquear.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>except</parameter></term>
     <listitem>
      <para>
       Os fluxos listados no array <parameter>except</parameter> serão observados
       para chegada de dados excepcional ("fora-de-banda") de alta prioridade.
      </para>
      <note>
       <para>
        Quando <function>stream_select</function> retorna, os arrays
        <parameter>read</parameter>, <parameter>write</parameter> e
        <parameter>except</parameter> são modificados para indicar qual(is) recurso(s)
        de fluxo realmente tiveram o estado alterado.
        As chaves originais dos &array;s são preservadas.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>seconds</parameter></term>
     <listitem>
      <para>
       Os parâmetros <parameter>seconds</parameter> e <parameter>microseconds</parameter>
       formam juntos o parâmetro <emphasis>limite de tempo</emphasis>,
       <parameter>seconds</parameter> especifica o número de segundos e
       <parameter>microseconds</parameter> o número de microssegundos.
       O parâmetro <parameter>timeout</parameter> é um limite do tempo
       que <function>stream_select</function> irá esperar antes de retornar.
       Se tanto <parameter>seconds</parameter> quanto <parameter>microseconds</parameter> forem
       iguais a <literal>0</literal>, <function>stream_select</function> não
       irá esperar por dados - em vez disso irá retornar imediatamente, indicando o
       estado atual dos fluxos.
      </para>
      <para>
       Se <parameter>seconds</parameter> for &null; <function>stream_select</function>
       pode bloquear indefinidamente, retornando somente quando um evento em algum dos
       fluxos observados ocorrer (ou se um sinal interromper a chamada de sistema).
      </para>
      <warning>
       <para>
        Usando um valor de <literal>0</literal> no limite de tempo permite que
        se faça pesquisa instantânea dos estados dos fluxos, entretanto, NÃO é
        recomendado usar um limite de <literal>0</literal> em um loop pois poderá
        causar um consumo excessivo de tempo de CPU.
       </para>
       <para>
        É muito melhor especificar um limite de tempo de alguns segundos, embora
        caso seja necessário ficar verificando e executando outro código concorrentemente, usar
        um limite de pelo menos <literal>200000</literal> microssegundos ajudará
        a reduzir o consumo de CPU do seu script.
       </para>
       <para>
        Lembre-se que o valor de limite de tempo é o tempo máximo que irá decorrer;
        <function>stream_select</function> irá retornar tão logo os fluxos
        requisitados estiverem prontos para uso.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>microseconds</parameter></term>
     <listitem>
      <para>
       Veja descrição de <parameter>seconds</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Em caso de sucesso, <function>stream_select</function> retorna o número de
   recursos de fluxo contidos nos arrays modificados, o que pode ser zero se
   o limite de tempo for alcançado antes que alguma coisa interessante aconteça. Em caso de erro, &false;
   é retornado e um aviso é emitido (isto pode acontecer se a chamada ao sistema for
   interrompida por algum sinal).
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.1.0</entry>
      <entry>
       <parameter>microseconds</parameter> agora pode ser nulo.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>stream_select</function></title>
    <para>
     Este exemplo verifica se dados chegaram para leitura em
     <parameter>$stream1</parameter> ou <parameter>$stream2</parameter>.
     Como o valor de limite de tempo é <literal>0</literal> a função retornará
     imediatamente:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Prepara o array de leitura */
$read   = array($stream1, $stream2);
$write  = NULL;
$except = NULL;
if (false === ($num_changed_streams = stream_select($read, $write, $except, 0))) {
    /* Lidando com erros */
} elseif ($num_changed_streams > 0) {
    /* Pelo menos em um dos fluxos algo interessante ocorreu */
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Devido a uma limitação no motor Zend atual, não é possível passar um
    modificador de constante como &null; diretamente como um parâmetro para uma função
    que espera que o parâmetro seja passado por referência. Em vez disso, use uma
    variável temporária ou uma expressão com o membro mais a esquerda sendo uma
    variável temporária:
    <programlisting role="php">
<![CDATA[
<?php
$e = NULL;
stream_select($r, $w, $e, 0);
?>
]]>
   </programlisting>
   </para>
  </note>
  <note>
   <para>
   Certifique-se de usar o operador <literal>===</literal> na verificação de
   erro. Como a função <function>stream_select</function> pode retornar 0, a
   comparação com <literal>==</literal> pode ser interpretada como &true;:
   <programlisting role="php">
<![CDATA[
<?php
$e = NULL;
if (false === stream_select($r, $w, $e, 0)) {
    echo "stream_select() falhou\n";
}
?>
]]>
   </programlisting>
   </para>
  </note>
  <note>
   <para>
    Se for realizada leitura/escrita em um fluxo retornado nos arrays, esteja ciente que
    não necessariamente serão lidos/escritos todos os dados
    solicitados. Esteja preparado para a possibilidade de se ler/escrever apenas
    um único byte.
   </para>
  </note>
  <note>
   <para>
    Alguns fluxos (como <literal>zlib</literal>) não podem ser selecionados por esta
    função.
   </para>
  </note>
  <note>
   <title>Compatibilidade com Windows</title>
   <para>
    O uso de <function>stream_select</function> em
    descritores de arquivos retornados por <function>proc_open</function> irão falhar
    e retornar &false; no Windows.
   </para>
   <para>
    <constant>STDIN</constant> de um console muda de estado assim que <emphasis>qualquer</emphasis>
    evento de entrada estiver disponível, mas a leitura do fluxo ainda poderá bloquear.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_set_blocking</function></member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
