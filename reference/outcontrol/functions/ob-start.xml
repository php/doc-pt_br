<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8f4c442c963211fd01031177619c41e220863bc Maintainer: ae Status: ready --><!-- CREDITS: fernandoc,ae,leonardolara -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ob-start">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Ativa o buffer de saída</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta função irá ativar o buffer de saída.
   Enquanto o buffer de saída estiver ativo, não é enviada a saída do script, (outros que não sejam cabeçalhos),
   ao invés disto a saída é guardada em um buffer interno.
   Consulte <xref linkend="outcontrol.what-output-is-buffered"/>
   sobre exatamente que saída é afetada.
  </para>
  <para>
   Buffers de saída são empilháveis, ou seja,
   <function>ob_start</function> pode ser chamada enquanto outro buffer estiver ativo.
   Se múltiplos buffers de saída estiverem ativos,
   a saída será filtrada sequencialmente
   atráves de cada uma delas na ordem de aninhamento.
   Consulte <xref linkend="outcontrol.nesting-output-buffers"/> para mais detalhes.
  </para>
  <para>
   Consulte <xref linkend="outcontrol.user-level-output-buffers"/>
   para uma descrição detalhada de buffers de saída.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Uma função <parameter>callback</parameter> do tipo <type>callable</type> pode ser
       especificada. Ela também pode ser ignorada passando-se &null;.
      </para>
      <para>
       <parameter>callback</parameter> é chamada quando o buffer de saída é
       descarregad (enviado), limpo, ou quando o buffer de saída é descarregado
       no final da execução do script.
      </para>
      <para>
       A assinatura da função <parameter>callback</parameter> deve ser da seguinte forma:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           O conteúdo original do buffer.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Bitmask das
           <link linkend="constant.php-output-handler-start">
           constantes
           <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>
           </link>.
           Consulte <xref linkend="outcontrol.flags-passed-to-output-handlers"/>
           para mais detalhes.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Se <parameter>callback</parameter> retornar &false;,
       o conteúdo do buffer é retornado.
       Consulte <xref linkend="outcontrol.output-handler-return-values"/>
       para mais detalhes.
      </para>
      <warning>
       <simpara>
        Chamar qualquer das funções a seguir de dentro de um manipulador de saída
        resultará em erro fatal:
        <function>ob_clean</function>, <function>ob_end_clean</function>,
        <function>ob_end_flush</function>, <function>ob_flush</function>,
        <function>ob_get_clean</function>, <function>ob_get_flush</function> e
        <function>ob_start</function>.
       </simpara>
      </warning>
      <para>
       Consulte <xref linkend="outcontrol.output-handlers"/>
       e <xref linkend="outcontrol.working-with-output-handlers"/>
       para mais detalhes sobre as funções <parameter>callback</parameter> (manipuladores de saída).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Se o parâmetro opcional <parameter>chunk_size</parameter> for informado,
       o buffer será descarregado depois que algum bloco de código que produza saída
       faça com que o tamanho do buffer fique igual ou
       maior que <parameter>chunk_size</parameter>.
       O valor padrão é <literal>0</literal>, que significa
       que toda a saída fica em buffer até que ele seja desligado.
       Consulte <xref linkend="outcontrol.buffer-size"/> para mais detalhes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       O parâmetro <parameter>flags</parameter> é um bitmask que controla
       as operações que podem ser realizadas no buffer de saída. O padrão
       é permitir que o buffer de saída possa ser limpo, descarregado ou removido, o que
       pode ser configurado explicitamente através das
       <link linkend="outcontrol.constants.buffer-control-flags">
       opções de controle de buffer
       </link>.
       Consulte <xref linkend="outcontrol.operations-on-buffers"/>
       para mais detalhes.
      </para>
      <para>
       Cada opção controla o acesso das funções, como descrito a seguir:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Funções</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function>,
            <function>ob_get_clean</function> e
            <function>ob_get_flush</function>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de uma função de callback</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // substitui apples por oranges
  return (str_replace("apples", "oranges", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>It's like comparing apples to oranges.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>It's like comparing oranges to oranges.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Criando um buffer de saída não apagável</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
