<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6554e7e19770ac53e886b8194915d7cd09ff0bc7 Maintainer: ae Status: ready --><!-- CREDITS: fernandoc,ae -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ob-start">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Ativa o buffer de saída</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta função irá ativar o buffer de saída. Enquanto o buffer de saída estiver ativo,
   não é enviada a saída do script (outros que não sejam cabeçalhos),
   ao invés a saída é guardada em um buffer interno.
  </para>
  <para>
   O conteúdo deste buffer interno pode ser copiado em uma variável usando
   <function>ob_get_contents</function>. Para enviar o que está no buffer interno,
   use <function>ob_end_flush</function>. Alternativamente,
   <function>ob_end_clean</function> irá silenciosamente descartar
   o conteúdo do buffer.
  </para>
  <warning>
   <para>
    Alguns servidores web (Apache, por exemplo) modificam o diretório de trabalho de um script
    no momento da chamada da função de callback. Você pode modificar para o diretório anterior fazendo um
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal> no corpo
    da função callback.
   </para>
  </warning>
  <para>
   Buffers de saída são empilháveis, ou seja, você pode utilizar
   <function>ob_start</function> enquanto outro
   <function>ob_start</function> estiver ativo. Apenas tenha certeza
   que você utiliza <function>ob_end_flush</function>
   o número apropriado de vezes. Se multiplas funções de callback de saída
   estiverem ativas, a saída será filtrada sequencialmente atráves de
   cada uma delas na ordem de aninhamento.
  </para>
  <para>
   Se buffer de output estiver ativo quando do escript encerra, o PHP
   envia os dados automaticamente.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Uma função de callback opcional <parameter>callback</parameter> também
       pode ser especificada. Esta função tem um parâmetro string e deve retornar
       uma string. Esta função será chamada quando
       o buffer é descarregado (flush), limpo (com
       <function>ob_flush</function>, <function>ob_clean</function> ou função
       similar) ou quando o buffer de saída
       for descarregado ao final da requisição. Quando
       <parameter>callback</parameter> for chamada ela irá receber
       o conteúdo do buffer como seu parâmetro e é esperado
       que ela retorne um novo buffer de saída como resultado, o qual será enviado
       para o navegador. Se <parameter>callback</parameter> não é uma função
       que possa ser chamada, esta função irá retornar &false;.
       O callback deve ter a seguinte assinatura:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           O conteúdo original do buffer.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Bitmask das constantes <link linkend="outcontrol.constants"><constant>PHP_OUTPUT_HANDLER_*</constant></link>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Se <parameter>callback</parameter> retornar &false; então o
       buffer original é enviado ao navegador.
      </para>
      <para>
       O parâmetro <parameter>callback</parameter> pode ser ignorado
       informando um &null; como seu valor.
      </para>
      <para>
       <function>ob_end_clean</function>, <function>ob_end_flush</function>,
       <function>ob_clean</function>, <function>ob_flush</function> e
       <function>ob_start</function> não podem ser chamados de dentro da função
       callback. Se chamá-las dentro da função callback, o comportamento é
       indefinido. Se você quiser limpar o conteúdo do buffer,
       retorne "" (a null string) de dentro da função callback.
       Você não pode chamar outras funções que utilizam o buffer de saída como
       <literal>print_r($expression, true)</literal> ou
       <literal>highlight_file($filename, true)</literal> de dentro da função
       callback.
      </para>
      <note>
       <para>
        A função <function>ob_gzhandler</function> existe para
        facilitar o envio de dados comprimidos no formato gz à navegadores que suportam
        páginas web compactadas. <function>ob_gzhandler</function> determina
        que tipo de codificação de conteúdos os navegadores podem aceitar e retorna
        o resultado com base nessas informações.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Se o parâmetro opcional <parameter>chunk_size</parameter> é informado, o
       buffer será descarregado em qualquer ponto de output que cause o buffer ter dados
       de tamanho igual ou maior que <parameter>chunk_size</parameter>. O valor padrão
       é <literal>0</literal>, que significa que o função de output só será
       chamada quando o buffer de saída é fechado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       O parâmetro <parameter>flags</parameter> é um bitmask que controla
       as operações que podem ser realizadas no buffer de saída. O padrão
       é permitir que o buffer de saída possa ser limpo, descarregado ou removido, o que
       pode ser configurado explicitamente como
       <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>, ou pelo atalho
       <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant>.
      </para>
      <para>
       Cada flasg controla o acesso das funções, como descrito a seguir::
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Funções</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>,
            <function>ob_end_clean</function> e
            <function>ob_get_clean</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>,
            <function>ob_flush</function> e
            <function>ob_get_flush</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function> e
            <function>ob_get_flush</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de uma função de callback</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // substitui apples por oranges
  return (str_replace("apples", "oranges", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>It's like comparing apples to oranges.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>It's like comparing oranges to oranges.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Criando um buffer de saída não apagável</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
