<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5d6153f896f4698bc2df1a41db1271075dd3b62d Maintainer: ae Status: ready --><!-- CREDITS: adiel,thiago,ae -->
<refentry xml:id="function.setcookie" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>setcookie</refname>
  <refpurpose>Envia um cookie</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>setcookie</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>value</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expires_or_options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>path</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>domain</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>secure</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>httponly</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>Assinatura alternativa disponível a partir do PHP 7.3.0 (sem suporte a parâmetros nomeados):</para>
  <methodsynopsis>
   <type>bool</type><methodname>setcookie</methodname>
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>value</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   A função <function>setcookie</function> define um cookie para ser enviado juntamente
   com os cabeçalhos HTTP. Como outros cabeçalhos (headers), os cookies devem ser enviados
   <emphasis>antes</emphasis> de qualquer saída do seu script (isso é
   uma restrição do protocolo). O que quer dizer que você deve colocar chamadas a essa função antes de qualquer
   saída, incluindo as tags <literal>&lt;html&gt;</literal> e
   <literal>&lt;head&gt;</literal> assim como espaços em branco.
  </para>
  <para>
   Uma vez que os cookies foram setados, eles podem ser acessados no próximo carregamento da página
   através do array <varname>$_COOKIE</varname>.
   Os valores dos cookies também podem existir no
   <varname>$_REQUEST</varname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   A <link xlink:href="&url.rfc;6265">RFC 6265</link> fornece a referência
   normativa de como cada parâmetro de <function>setcookie</function>
   é interpretado.
   <variablelist>
    <varlistentry>
     <term><parameter>name</parameter></term>
     <listitem>
      <para>
       O nome do cookie.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       O valor do cookie. Esse valor é guardado no computador do cliente; não
       guarde informação sensível. Supondo que o <parameter>name</parameter> seja
       <literal>'nomedocookie'</literal>, o valor pode ser lido através de
       <varname>$_COOKIE['nomedocookie']</varname>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expires_or_options</parameter></term>
     <listitem>
      <para>
       O tempo para o cookie expirar. Esse valor é uma timestamp Unix,
       portanto é o número de segundos desde a época (epoch).
       Um jeito de configurar esse valor é por adicionando o número de segundos que o cookie deve
       durar antes de expirar ao resultado da função <function>time</function>.
       Por exemplo, <literal>time()+60*60*24*30</literal> irá configurar o cookie
       para expirar em 30 dias.
       Outra opção é usar a função <function>mktime</function>.
       Se configurado para <literal>0</literal> ou omitido, o cookie vai expirar
       no final da sessão (ao navegador fechar).
      </para>
      <para>
       <note>
        <para>
         Você pode ver que o parâmetro <parameter>expires_or_options</parameter> recebe
         uma timestamp Unix, ao contrário do formato de data <literal>Wdy,
         DD-Mon-YYYY HH:MM:SS GMT</literal>, isso se dá porque o PHP faz essa
         conversão internamente.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>path</parameter></term>
     <listitem>
      <para>
       O caminho no servidor onde o cookie estará disponível. Se configurado
       para <literal>'/'</literal>, o cookie estará disponível para todo o
       <parameter>domain</parameter>. Se configurado para o diretório
       <literal>'/foo/'</literal>, o cookie estará disponível apenas dentro do
       diretório <literal>/foo/</literal> e todos os subdiretórios como
       <literal>/foo/bar</literal> do <parameter>domain</parameter>.
       O valor padrão é o
       diretório atual onde o cookie está sendo configurado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       O (sub)domínio para qual o cookie estará disponível. Definindo para um
       subdomínio (como <literal>'www.example.com'</literal>) deixará o cookie
       disponível para aquele subdomínio e todos os outros sub-domínios abaixo dele
       (exemplo w2.www.example.com). Para deixar o cookie disponível para todo o
       domínio (incluindo todos os subdomínios dele), simplesmente defina o valor
       para o nome do domínio (<literal>'example.com'</literal>, nesse caso).
      </para>
      <para>
       Browsers antigos ainda implementam a
       <link xlink:href="&url.rfc;2109">RFC 2109</link> e podem requerer um
       <literal>.</literal> no início para funcionar com todos os subdomínios.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>secure</parameter></term>
     <listitem>
      <para>
       Indica que o cookie só poderá ser transmitido sob uma conexão
       segura HTTPS do cliente. Quando configurado para &true;, o
       cookie será enviado somente se uma conexão segura existir.
       No lado do servidor, fica por conta do programador enviar esse
       tipo de cookie somente sob uma conexão segura (ex
       respeitando <varname>$_SERVER["HTTPS"]</varname>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>httponly</parameter></term>
     <listitem>
      <para>
       Quando for &true; o cookie será acessível somente sob o protocolo HTTP.
       Isso significa que o cookie não será acessível por linguagens de
       script, como JavaScript. É dito que essa configuração pode ajudar a
       reduzir ou identificar roubos de identidade através de ataques do tipo XSS
       (entretanto ela não é suportada por todos os browsers), mas essa informação
       é constantemente discutida. Foi adicionada no PHP 5.2.0.
       &true; ou &false;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Um <type>array</type> associativo onde quaisquer chaves
       <literal>expires</literal>, <literal>path</literal>, <literal>domain</literal>,
       <literal>secure</literal>, <literal>httponly</literal> e <literal>samesite</literal>.
       Se qualquer outra chave estiver presente, um alerta <constant>E_WARNING</constant>
       é gerado. Os valores têm o mesmo efeito como descrito acima,
       para os parâmetros de mesmo nome. O valor de <literal>samesite</literal>
       deve ser <literal>None</literal>, <literal>Lax</literal>
       ou <literal>Strict</literal>.
       Se uma das opções não é informada, os valores padrão são os
       mesmos valores padrão dos parâmetros explícitos. Se
       <literal>samesite</literal> for omitido, o atributo SameSite do cookie
       não será atribuído.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Se existe saída antes da chamada dessa função,
   <function>setcookie</function> irá falhar e retornará &false;. Se a função
   <function>setcookie</function> for executada com sucesso, ela retornará &true;.
   Isso não indica que o usuário aceitou o cookie.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.2.0</entry>
       <entry>
        O formato de timestamp do cookie foi alterado para <literal>'D, d M Y H:i:s \G\M\T'</literal>;
        anteriormente era <literal>'D, d-M-Y H:i:s T'</literal>.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Uma assinatura alternativa para suportar o array <parameter>options</parameter>
        foi adicionado. Essa assinatura também permite configurar o atributo
        SameSite do cookie.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Alguns exemplos para seguir de como enviar cookies:
   <example>
    <title>Exemplo de <function>setcookie</function> para enviar cookies</title>
    <programlisting role="php">
     <![CDATA[
<?php
$value = 'alguma coisa de algum lugar';

setcookie("CookieTeste", $value);
setcookie("CookieTeste", $value, time()+3600);  /* expira em 1 hora */
setcookie("CookieTeste", $value, time()+3600, "/~rasmus/", ".example.com", 1);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Note que a porção do valor do cookie será automaticamente codificada com
   urlencode quando você enviar o cookie, e quando ele for recebido, será
   automaticamente decodificado e atribuído a uma variável com o mesmo nome do
   cookie. Se você não quer que isso aconteça, você pode utilizar no lugar a
   função <function>setrawcookie</function> se você estiver utilizando o PHP
   5. Para ver o conteúdo do nosso cookie de teste em um script, simplesmente
   utilize um dos exemplos abaixo:
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
     <![CDATA[
<?php
// Mostra um cookie individual
echo $_COOKIE["CookieTeste"];

// Outra maneira de depurar(debug)/testar é vendo todos os cookies
print_r($_COOKIE);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   <example>
    <title>Exemplo de <function>setcookie</function> para apagar cookies</title>
    <para>
     Quando estiver apagando um cookie, tenha certeza de que a data de
     expiração dele está no passado, para acionar o mecanismo de remoção do navegador.
     O exemplo a seguir mostra como deletar os cookies enviados no exemplo anterior:
    </para>
    <programlisting role="php">
     <![CDATA[
<?php
// Configura a data de expiração para uma hora atrás
setcookie("CookieTeste", "", time() - 3600);
setcookie("CookieTeste", "", time() - 3600, "/~rasmus/", ".example.com", 1);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>setcookie</function> e arrays</title>
    <para>
     Você pode também enviar cookies de array, utilizando a notação de array
     no nome dele. Isso tem o efeito de enviar tantos cookies quantos
     elementos houverem no array, mas quando o cookie for recebido todos os
     valores serão colocados em um array com o nome do
     cookie:
    </para>
    <programlisting role="php">
     <![CDATA[
<?php
// envia os cookies
setcookie("cookie[tres]", "cookietres");
setcookie("cookie[dois]", "cookiedois);
setcookie("cookie[um]", "cookieum");

// Depois que a página recarregar, mostra eles
if (isset($_COOKIE['cookie'])) {
    foreach ($_COOKIE['cookie'] as $nome => $valor) {
        $nome = htmlspecialchars($nome);
        $valor = htmlspecialchars($valor);
        echo "$nome : $valor <br />\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
tres : cookietres
dois : cookiedois
um : cookieum
]]>
    </screen>
   </example>
   <note>
    <simpara>
     Utilizar caracteres como <literal>[</literal> e <literal>]</literal>
     no nome do cookie não é válido conforme o RFC 6265, seção 4, mas deve
     ser suportado por navegadores conforme o RFC 6265, seção 5.
    </simpara>
   </note>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Você pode utilizar o output buffering para enviar a saída antes de chamar essa
    função, com o custo de toda sua saída ser guardada em buffer no servidor até
    que você a envie. Você pode fazer isso chamando <function>ob_start</function>
    e <function>ob_end_flush</function> em seu script, ou configurando a diretiva
    <literal>output_buffering</literal> no seu &php.ini; ou arquivos de
    configuração
    do servidor.
   </para>
  </note>
  <para>
   Problemas comuns:
   <itemizedlist>
    <listitem>
     <simpara>
      Os cookies não estarão disponíveis até o próximo carregamento da página
      a qual o cookie deverá estar visível. Para testar se um cookie foi
      enviado com sucesso, verifique o cookie no próximo carregamento da
      página antes que ele expire. O tempo para expirar é configurado pelo
      parâmetro <parameter>expires_or_options</parameter>. Uma maneira boa de depurar a
      existência dos cookies é chamando a função <literal>print_r($_COOKIE);</literal>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Os cookies devem ser deletados com os mesmos parâmetros com os quais
      foram configurados. Se o argumento de valor for uma string vazia,
      e todos os outros argumentos forem iguais a chamada anterior de
      setcookie, então o cookie com o nome especificado será deletado do cliente remoto.
      Internamente isso é feito colocando o valor do cookie para <literal>'deleted'</literal> e a
      data de expiração para um ano no passado.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Quando você configurar um cookie com o valor &false; será tentando
      deletar o cookie. Portanto evite utilizar valores booleanos. No lugar,
      utilize <emphasis>0</emphasis> para &false; e <emphasis>1</emphasis> for &true;.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Nomes de cookies podem ser configurados como arrays e estarão disponíves
      para seus scripts PHP como arrays mas cookies separados serão guardados
      no sistema do usuário. Considere utilizar <function>explode</function>
      para enviar um cookie com nomes e valores múltiplos. Não é recomendado o
      uso da função <function>serialize</function> para esse propósito, pois
      ele pode resultar em furos de segurança.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   Várias chamadas para a função <function>setcookie</function> são feitas na ordem em que são chamadas.
  </simpara>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>header</function></member>
    <member><function>setrawcookie</function></member>
    <member><link linkend="features.cookies">Seção de cookies</link></member>
    <member><link xlink:href="&url.rfc;6265">RFC 6265</link></member>
    <member><link xlink:href="&url.rfc;2109">RFC 2109</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
