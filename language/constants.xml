<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 5a945dfef09a9595c83855cdb858ffa4a96af305 Maintainer: ae Status: ready --><!-- CREDITS: ae,thiago,lcobucci,fabioluciano,lisaldo,geekcom -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Constantes</title>

  <simpara>
   Uma constante é um identificador (nome) para um valor simples. Como o nome
   sugere, esse valor não pode mudar durante a execução do
   script (exceto as <link linkend="language.constants.magic">
   constantes mágicas</link>, que não são constantes de verdade).
   As constantes são case-sensitive por padrão. Por convenção,
   identificadores de constantes são sempre em maiúsculas.
  </simpara>

  <note>
   <para>
    Anteriormente ao PHP 8.0.0, constantes definidas através da fundção <function>define</function>
    podiam ser case-insentivo.
   </para>
  </note>

  <para>
   O nome de uma constante tem as mesmas regras de qualquer rótulo do PHP. Um
   nome válido de constante começa com uma letra ou sublinhado, seguido
   por qualquer número de letras, números ou sublinhados. Como uma expressão
   regular, pode ser representada por:
   <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>
  </para>
  <para>
   É permitido utilizar <function>define</function> em constantes com,
   nomes reservados ou mesmo inválidos, cujo valor somente pode ser recuperado com
   <function>constant</function>. No entanto, isso não é recomendado.
  </para>
  &tip.userlandnaming;
  <para>
<!-- TODO Move into syntax section? -->
   <example>
    <title>Nomes de constantes válidos e inválidos</title>
    <programlisting role="php">
<![CDATA[
<?php

// Nomes de constantes válidos
define("FOO",     "alguma coisa");
define("FOO2",    "alguma outra coisa");
define("FOO_BAR", "alguma coisa mais");

// Nomes de constantes inválidas
define("2FOO",    "alguma coisa");

// Isto é válido, mas deve ser evitado:
// O PHP pode vir a fornercer uma constante mágica
// que danificará seu script
define("__FOO__", "alguma coisa");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Para nossos exemplos, uma letra é a-z, A-Z e os caracteres ASCII
    do 128 ao 255 (0x80-0xff).
   </simpara>
  </note>

  <simpara>
   Como as &link.superglobals;, o escopo de uma constante é global.
   Pode-se acessar constantes de qualquer lugar em seu script sem se preocupar
   com o escopo. Para mais informações sobre o escopo no PHP, leia a seção
   do manual <link linkend="language.variables.scope">escopo de variáveis</link>.
  </simpara>

  <note>
   <simpara>
    A partir do PHP 7.1.0, constantes de classe podem ser declaradas com visibilidade protected
    ou private, tornando-as disponíveis apenas no escopo da
    classe onde elas foram declaradas.
   </simpara>
  </note>

  <sect1 xml:id="language.constants.syntax">
   <title>Sintaxe</title>
   <simpara>
    Constantes podem ser definidas utilizando a declaração <literal>const</literal>
    ou através da função <function>define</function>.
    Enquanto <function>define</function> permite que uma constante seja
    definida usando uma expressão arbitrária, a palavra-chave <literal>const</literal> possui
    restrições descritas abaixo.
    Uma vez definida, a constante não poderá ser modificada ou
    anulada.
   </simpara>
   <simpara>
    Quando usando a declaração <literal>const</literal>,
    somente valores escalares (<type>bool</type>, <type>int</type>,
    <type>float</type> e <type>string</type>) e
    <type>array</type> constantes contendo apenas valores escalares são aceitos.
    É possível definir constantes como um <type>resource</type>,
    mas isso deve ser evitado, pois pode ocasionar resultados inesperados.
   </simpara>
   <simpara>
    O valor da costante é acessado simplesmente informando seu nome.
    Diferentemente de variáveis, você <emphasis>não</emphasis> prefixará uma
    constante com um sinal de <literal>$</literal>.
    Também pode-se utilizar a função <function>constant</function> para
    ler o valor de uma constante se o nome da constante for obtida dinamicamente.
    Utilize <function>get_defined_constants</function> para obter a lista de
    todas as constantes definidas.
   </simpara>

   <note>
    <simpara>
     As constantes e variáveis (globais) estão em espaços de nomes diferentes.
     Isto implica, por exemplo, que &true; e
     <varname>$TRUE</varname> sejam geralmente diferentes.
    </simpara>
   </note>

   <simpara>
    Se uma constante não definida é usada, um erro <classname>Error</classname> é lançado.
    Anteriormente ao PHP 8.0.0, constantes não definidas eram interpretadas como uma
    <type>string</type> comum, no caso, uma variável string contendo o nome da própria constante.
    Esse mecanismo alternativo ficou obsoleto no PHP 7.2.0, e um alerta nível
    <constant>E_WARNING</constant> é lançado quando isso acontecer.
    Anteriormente ao PHP 7.2.0, um alerta
    <link linkend="ref.errorfunc">E_NOTICE</link> era lançado.
    Veja também porque
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> é
    errado a não ser que <literal>bar</literal> seja uma constante.
    Isto não se aplica às <link
    linkend="language.namespaces.rules">constantes qualificadas</link>,
    quais sempre lançam um <classname>Error</classname> se não definidas.
   </simpara>

   <note>
    <simpara>
     Para conferir se uma constante está definida, utilize a função <function>defined</function>.
    </simpara>
   </note>

   <para>
    Estas são as diferenças entre constantes e variáveis:
    <itemizedlist>
     <listitem>
      <simpara>
       Constantes não possuem um sinal de cifrão (<literal>$</literal>)
       antes delas;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes podem ser definidas e acessadas de qualquer lugar sem
       que a regras de escopo de variáveis sejam aplicadas;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes não podem ser redefinidas ou eliminadas depois
       de criadas; e
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes só podem ter valores escalares ou arrays.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Definindo Constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // imprime "Hello world."
echo Constant; // Lança um erro Error: Undefined constant "Constant"
               // Anteriormente ao PHP 8.0.0, imprimia "Constant" e emitia um warning.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>Definindo Constantes usando a palavra-chave <literal>const</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
// Simple scalar value
const CONSTANT = 'Hello World';

echo CONSTANT;

// Scalar expression
const ANOTHER_CONST = CONSTANT.'; Goodbye World';
echo ANOTHER_CONST;

const ANIMALS = array('dog', 'cat', 'bird');
echo ANIMALS[1]; // imprime "cat"

// Array constante
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // imprime "cat"
?>
]]>
     </programlisting>
    </example>
   </para>

   <note>
    <para>
     Ao contrário das constantes definidas através de <function>define</function>,
     as constantes definidas usando a declaração <literal>const</literal> devem
     ser declaradas no maior escopo que elas serão utiluzadas, em tempo de compilação.
     Isto significa que constantes não podem ser declaradas dentro de funções, loops,
     <literal>if</literal> ou blocos
     <literal>try</literal>/<literal>catch</literal>.
    </para>
   </note>

   <sect2 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><link linkend="language.oop5.constants">Class Constants</link></member>
     </simplelist>
    </para>
   </sect2>
  </sect1>

  <sect1 xml:id="language.constants.predefined">
   <title>Constantes Mágicas</title>

   <simpara>
    O PHP fornece um grande número de <link
    linkend="reserved.constants">constantes predefinidas</link> para qualquer
    script que execute. A maioria dessas constantes, entretanto, são
    criadas por várias extensões, e estarão presentes somente quando essas
    extensões estiverem disponíveis, tanto por carregamento dinâmico quanto por
    compilação direta.
   </simpara>
  </sect1>

  <sect1 xml:id="language.constants.magic">
   <title>Constantes mágicas</title>
   <para>
    Há nove constantes mágicas, que mudam dependendo de
    onde são utilizadas. Por exemplo, o valor de
    <constant>__LINE__</constant> depende da linha em que é
    utilizada em seu script. Todas essas constantes "mágicas" são resolvidas
    em tempo de compilação, ao contrário das constantes regulares que são resolvidas em tempo de execução.
    Essas constantes especiais são case-insentitive e estão descritas a seguir:
   </para>
   <para>
    <table>
     <title>Algumas constantes "mágicas" do PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Name;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row xml:id="constant.line">
        <entry><constant>__LINE__</constant></entry>
        <entry>
         O número da linha corrente do arquivo.
        </entry>
       </row>
       <row xml:id="constant.file">
        <entry><constant>__FILE__</constant></entry>
        <entry>
         O caminho completo e nome do arquivo com links simbólicos resolvidos. Se utilizado dentro de um include,
         o nome do arquivo incluído será retornado.
        </entry>
       </row>
       <row xml:id="constant.dir">
        <entry><constant>__DIR__</constant></entry>
        <entry>
         O diretório do arquivo. Se usado dentro de um include,
         o diretório do arquivo incluído é retornado. É equivalente
         a <literal>dirname(__FILE__)</literal>. O nome do diretório
         não possui barra no final, a não ser que seja o diretório raiz.
        </entry>
       </row>
       <row xml:id="constant.function">
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         O nome da função, or <literal>{closure}</literal> para funções anônimas.
        </entry>
       </row>
       <row xml:id="constant.class">
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         O nome da classe. O nome da classe inclui
         o namespace em que foi declarado (por exemplo, <literal>Foo\Bar</literal>).
         Quando utilizada
         em um método trait, __CLASS__ é o nome da classe
         que está utilizando a trait.
        </entry>
       </row>
       <row xml:id="constant.trait">
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         O nome do trait. O nome do trait inclui o namespace em
         que foi declarado (por exemplo, <literal>Foo\Bar</literal>).
        </entry>
       </row>
       <row xml:id="constant.method">
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         O nome do método da classe.
        </entry>
       </row>
       <row xml:id="constant.namespace">
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         O nome do namespace corrente.
        </entry>
       </row>
       <row xml:id="constant.coloncolonclass">
        <entry><constant><replaceable>ClassName</replaceable>::class</constant></entry>
        <entry>
         O nome qualificado completo da classe.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <sect2 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><link linkend="language.oop5.basic.class.class">::class</link></member>
      <member><function>get_class</function></member>
      <member><function>get_object_vars</function></member>
      <member><function>file_exists</function></member>
      <member><function>function_exists</function></member>
     </simplelist>
    </para>
   </sect2>

  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
