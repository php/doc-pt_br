<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9155d793178b5fcd5131b734cd174fecc34c1ae6 Maintainer: marcosmarcolin Status: ready --><!-- CREDITS: marcosmarcolin, adiel -->
<chapter xml:id="language.attributes" xmlns="http://docbook.org/ns/docbook">
 <title>Atributos</title>
 <sect1 xml:id="language.attributes.overview">
  <title>Visão geral dos atributos</title>
  <?phpdoc print-version-for="attributes"?>

  <para>
   Os atributos oferecem a capacidade de adicionar informações de metadados estruturadas e legíveis por máquina
   em declarações no código: classes, métodos, funções, parâmetros,
   propriedades e constantes de classe podem ser o destino de um atributo. Os metadados
   definidos pelos atributos podem ser inspecionados em tempo de execução usando as
   <link linkend="book.reflection">APIs
   Reflection</link>. Os atributos podem, portanto, ser pensados como uma linguagem de configuração
   incorporada diretamente no código.
  </para>

  <para>
   Com atributos, a implementação genérica de um
   recurso e seu uso concreto em uma aplicação podem ser desacoplados. De certa
   forma, é comparável a interfaces e suas implementações. Mas onde as
   interfaces e implementações são sobre código, os atributos são sobre a
   anotação de informações extras e configuração. As interfaces podem ser
   implementadas por classes, mas os atributos também podem ser declarados
   em métodos, funções, parâmetros, propriedades e constantes de classe.
   Como tal, eles são mais flexíveis do que as interfaces.
  </para>

  <para>
   Um exemplo simples de uso de atributo é converter uma interface
   que possui métodos opcionais para usar atributos. Vamos assumir uma interface
   <literal>ActionHandler</literal>
   que representa uma operação em uma aplicação, onde algumas
   implementações de um manipulador de ações requerem configuração e outras não. Em vez de exigir que todas as classes
   que implementam <literal>ActionHandler</literal> implementem
   um método <literal>setUp()</literal>,
   um atributo pode ser usado. Um benefício
   dessa abordagem é que o atributo pode ser usado várias vezes.
  </para>

  <example>
   <title>Implementando métodos opcionais de uma interface com Atributos</title>
   <programlisting role="php">
<![CDATA[
<?php
interface ActionHandler
{
    public function execute();
}

#[Attribute]
class SetUp {}

class CopyFile implements ActionHandler
{
    public string $fileName;
    public string $targetDirectory;

    #[SetUp]
    public function fileExists()
    {
        if (!file_exists($this->fileName)) {
            throw new RuntimeException("Arquivo não existe");
        }
    }

    #[SetUp]
    public function targetDirectoryExists()
    {
        if (!file_exists($this->targetDirectory)) {
            mkdir($this->targetDirectory);
        } elseif (!is_dir($this->targetDirectory)) {
            throw new RuntimeException("Diretório de destino $this->targetDirectory não é um diretório");
        }
    }

    public function execute()
    {
        copy($this->fileName, $this->targetDirectory . '/' . basename($this->fileName));
    }
}

function executeAction(ActionHandler $actionHandler)
{
    $reflection = new ReflectionObject($actionHandler);

    foreach ($reflection->getMethods() as $method) {
        $attributes = $method->getAttributes(SetUp::class);

        if (count($attributes) > 0) {
            $methodName = $method->getName();

            $actionHandler->$methodName();
        }
    }

    $actionHandler->execute();
}

$copyAction = new CopyFile();
$copyAction->fileName = "/tmp/foo.jpg";
$copyAction->targetDirectory = "/home/user";

executeAction($copyAction);
]]>
   </programlisting>
  </example>
 </sect1>

 <sect1 xml:id="language.attributes.syntax">
  <title>Sintaxe de Atributo</title>

  <para>
   Existem várias partes para a sintaxe de atributos. Primeiro, uma declaração
   de atributo é sempre incluída com um
   <literal>#[</literal> inicial e um <literal>]</literal>
   final correspondente. Dentro, um ou vários atributos são listados,
   separados por vírgula. O nome do atributo é um nome não qualificado, qualificado ou totalmente qualificado,
   conforme descrito em <link linkend="language.namespaces.basics">Noções Básicas do Uso de Namespaces</link>.
   Os argumentos para o atributo são opcionais, mas são colocados entre parênteses <literal>()</literal>.
   Os argumentos para atributos só podem ser valores literais ou expressões constantes. Tanto a sintaxe de
   argumentos posicionais quanto a dos argumentos nomeados podem ser usadas.
  </para>

  <para>
   Os nomes dos atributos e seus argumentos são resolvidos para uma classe e os argumentos são passados para seu construtor,
   quando uma instância do atributo é solicitada por meio da API Reflection. Como tal,
   uma classe deve ser introduzida para cada atributo.
  </para>

  <example>
   <title>Sintaxe de Atributo</title>

   <programlisting role="php">
<![CDATA[
<?php
// a.php
namespace MyExample;

use Attribute;

#[Attribute]
class MyAttribute
{
    const VALUE = 'value';

    private $value;

    public function __construct($value = null)
    {
        $this->value = $value;
    }
}

// b.php

namespace Another;

use MyExample\MyAttribute;

#[MyAttribute]
#[\MyExample\MyAttribute]
#[MyAttribute(1234)]
#[MyAttribute(value: 1234)]
#[MyAttribute(MyAttribute::VALUE)]
#[MyAttribute(array("key" => "value"))]
#[MyAttribute(100 + 200)]
class Thing
{
}

#[MyAttribute(1234), MyAttribute(5678)]
class AnotherThing
{
}
]]>
   </programlisting>
  </example>
 </sect1>


 <sect1 xml:id="language.attributes.reflection">
  <title>Lendo Atributos com a API Reflection</title>

  <para>
   Para acessar atributos de classes, métodos, funções, parâmetros, propriedades e constantes de classe,
   a API Reflection fornece o método <function>getAttributes</function> em cada um dos objetos
   Reflection correspondentes. Este método retorna um array de instâncias de <classname>ReflectionAttribute</classname>
   que podem ser consultadas para o nome do atributo, argumentos e para criar uma instância do atributo representado.
  </para>

  <para>
   Essa separação da representação do atributo refletido da instância real aumenta o controle do programador
   para lidar com erros relacionados a classes de atributos ausentes, erros de digitação ou argumentos ausentes. Somente após
   chamar <function>ReflectionAttribute::newInstance</function>, os objetos da classe de atributo são instanciados e a correspondência correta dos argumentos
   é validada, não antes.
  </para>

  <example>
   <title>Lendo Atributos Usando a API Reflection</title>

   <programlisting role="php">
<![CDATA[
<?php

#[Attribute]
class MyAttribute
{
    public $value;

    public function __construct($value)
    {
        $this->value = $value;
    }
}

#[MyAttribute(value: 1234)]
class Thing
{
}

function dumpAttributeData($reflection) {
    $attributes = $reflection->getAttributes();

    foreach ($attributes as $attribute) {
       var_dump($attribute->getName());
       var_dump($attribute->getArguments());
       var_dump($attribute->newInstance());
    }
}

dumpAttributeData(new ReflectionClass(Thing::class));
/*
string(11) "MyAttribute"
array(1) {
  ["value"]=>
  int(1234)
}
object(MyAttribute)#3 (1) {
  ["value"]=>
  int(1234)
}
*/

]]>
   </programlisting>
  </example>

  <para>
   Em vez de iterar todos os atributos na instância de reflexão, apenas aqueles
   de uma determinada classe de atributo podem ser
   recuperados passando o nome da classe de atributo pesquisado como argumento.
  </para>

  <example>
   <title>Lendo Atributos Específicos Usando a API Reflection</title>

   <programlisting role="php">
<![CDATA[
<?php

function dumpMyAttributeData($reflection) {
    $attributes = $reflection->getAttributes(MyAttribute::class);

    foreach ($attributes as $attribute) {
       var_dump($attribute->getName());
       var_dump($attribute->getArguments());
       var_dump($attribute->newInstance());
    }
}

dumpMyAttributeData(new ReflectionClass(Thing::class));
]]>
   </programlisting>
  </example>
 </sect1>

 <sect1 xml:id="language.attributes.classes">
  <title>Declarando Classes de Atributos</title>

  <para>
   Embora não seja estritamente necessário, é recomendável criar uma classe real para cada atributo.
   No caso mais simples, apenas uma classe vazia é necessária com o atributo <literal>#[Attribute]</literal> declarado
   que pode ser importado do namespace global com uma declaração use.
  </para>

  <example>
   <title>Classe de Atributo Simples</title>

   <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute]
class MyAttribute
{
}
]]>
   </programlisting>
  </example>

  <para>
   Para restringir o tipo de declaração ao qual um atributo pode ser atribuído, uma máscara de bits pode ser passada
   como o primeiro argumento para a declaração <literal>#[Attribute]</literal>.
  </para>

  <example>
   <title>Usando a especificação de destino para restringir onde os atributos podem ser usados</title>

   <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute(Attribute::TARGET_METHOD | Attribute::TARGET_FUNCTION)]
class MyAttribute
{
}
]]>
   </programlisting>

   <para>
    Declarar <classname>MyAttribute</classname> em outro tipo agora lançará uma exceção durante a
    chamada para <function>ReflectionAttribute::newInstance</function>
   </para>
  </example>

  <para>Os seguintes alvos podem ser especificados:</para>

  <simplelist>
   <member><constant>Attribute::TARGET_CLASS</constant></member>
   <member><constant>Attribute::TARGET_FUNCTION</constant></member>
   <member><constant>Attribute::TARGET_METHOD</constant></member>
   <member><constant>Attribute::TARGET_PROPERTY</constant></member>
   <member><constant>Attribute::TARGET_CLASS_CONSTANT</constant></member>
   <member><constant>Attribute::TARGET_PARAMETER</constant></member>
   <member><constant>Attribute::TARGET_ALL</constant></member>
  </simplelist>

  <para>
   Por padrão, um atributo só pode ser usado uma vez por declaração. Se o atributo deve ser repetível nas declarações,
   ele deve ser especificado como parte da máscara de bits para a declaração <literal>#[Attribute]</literal>.
  </para>

  <example>
   <title>Usando IS_REPEATABLE para permitir o atributo em uma declaração várias vezes</title>

   <programlisting role="php">
<![CDATA[
<?php

namespace Example;

use Attribute;

#[Attribute(Attribute::TARGET_METHOD | Attribute::TARGET_FUNCTION | Attribute::IS_REPEATABLE)]
class MyAttribute
{
}
]]>
   </programlisting>

  </example>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
