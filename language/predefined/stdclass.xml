<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 14767af0f05dffa6fdb9b49e1a1f4e9ca7022a60 Maintainer: _ Status: ready --><!-- CREDITS: leonardolara -->
<phpdoc:classref xml:id="class.stdclass" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe stdClass</title>
 <titleabbrev>stdClass</titleabbrev>

 <partintro>

  <section xml:id="stdclass.intro">
   &reftitle.intro;
   <para>
    Uma classe vazia genérica com propriedades dinâmicas.
   </para>

   <para>
    Objetos desta classe podem ser instaciados com
    o operador <link linkend="language.oop5.basic.new">new</link> ou criados por
    <link linkend="language.types.object.casting">conversores de tipo para o objeto</link>.
    Muitas funções do PHP também criam instâncias desta classe, ex.:
    <function>json_decode</function>, <function>mysqli_fetch_object</function>
    ou <methodname>PDOStatement::fetchObject</methodname>.
   </para>

   <para>
    Apesar de não implementar
    os métodos mágicos <link linkend="object.get">__get()</link>/<link linkend="object.set">__set()</link>,
    esta classe permite propriedades dinâmicas e não requer o atributo
    <code>#[\AllowDynamicProperties]</code>.
   </para>

   <para>
    Esta não é uma classe base já que o PHP não possui um conceito de uma classe base
    universal. Entretanto, é possível criar uma classe customizada que se estende a partir de
    <classname>stdClass</classname> e como resultado herda a funcionalidade
    de propriedades dinâmicas.
   </para>
  </section>

  <section xml:id="stdclass.synopsis">
   &reftitle.classsynopsis;

   <classsynopsis class="class">
    <ooclass>
     <classname>stdClass</classname>
    </ooclass>
   </classsynopsis>

   <para>
    Esta classe não tem métodos ou propriedades padrão.
   </para>
  </section>

  <section xml:id="stdclass.examples" role="examples">
   &reftitle.examples;
   <example xml:id="stdclass.basic-example">
    <title>Criado como resultado de uma conversão de tipo em um objeto</title>
    <programlisting role="php">
<![CDATA[
<?php
$obj = (object) array('foo' => 'bar');
var_dump($obj);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["foo"]=>
  string(3) "bar"
}
]]>
    </screen>
   </example>
   <example xml:id="stdclass.json-example">
    <title>Criado como resultado da função <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"foo":"bar"}';
var_dump(json_decode($json));
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["foo"]=>
  string(3) "bar"
}
]]>
    </screen>
   </example>
   <example xml:id="stdclass.properties-example">
    <title>Declarando propriedades dinâmicas</title>
    <programlisting role="php">
<![CDATA[
<?php
$obj = new stdClass();
$obj->foo = 42;
$obj->{1} = 42;
var_dump($obj);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (2) {
  ["foo"]=>
  int(42)
  ["1"]=>
  int(42)
}
]]>
    </screen>
   </example>
  </section>

 </partintro>

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
