<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2a4874ed531bcc223ca4bc1b4f9a5292594abaea Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplica a closure com um novo objeto vinculado e escopo de classe.
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Closure">
   <modifier>public</modifier> <type class="union"><type>Closure</type><type>null</type></type><methodname>Closure::bindTo</methodname>
   <methodparam><type class="union"><type>object</type><type>null</type></type><parameter>newThis</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>object</type><type>string</type><type>null</type></type><parameter>newScope</parameter><initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Cria e retorna uma nova <link linkend="functions.anonymous">função
   anônima</link> com o mesmo corpo e mesmas variáveis ligadas como a original, mas
   possivelmente com um diferente objeto ligado e um novo escopo de classe.
  </para>

  <para>
   O “obeto ligado” determina o valor que <literal>$this</literal> terá
   no corpo da função e o “escopo de classe” representa uma classe
   que determina quais membros privados e protegidos a função
   anônima será capaz de acessar. Nomeadamente, os membros que estarão
   visíveis serão os mesmos que estariam, se a função anônima fosse um método da
   classe informada como valor do parâmetro
   <parameter>newScope</parameter>.
  </para>

  <para>
   Closures estáticas não podem ter nenhum objeto ligado (o valor do parâmetro
   <parameter>newThis</parameter> deveria ser &null;), mas esta função pode
   entretanto ser utilizada para alterar seus escopos de classe.
  </para>

  <para>
   Esta função vai assegurar que, para uma closure não estática, possuir uma
   instância ligada irá implicar em ter escopo definido e vice-versa. Para este fim,
   closures não estáticas que recebem um escopo com instância &null; são tornadas
   estáticas; e closures não estáticas sem escopo que recebem uma instância
   não nula têm o escopo definido para uma classe não especificada.
  </para>

  <note>
   <para>
    Se for requerido duplicar as funções anônimas, pode ser utilizada
    <link linkend="language.oop5.cloning">clonagem</link> alternativamente.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newThis</parameter></term>
    <listitem>
     <para>
      O objeto ao qual a função anônima informada deve ser ligada, ou
      &null; para que a closure seja não ligada.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newScope</parameter></term>
    <listitem>
     <para>
      O escopo de classe ao qual a closure deve ser associada, ou
      'static' para manter a atual. Se um objeto for informado, o tipo do
      objeto será usado no lugar. Isto determina a visibilidade de métodos
      protegidos e privados do objeto ligado.
      Não é permitido passar (um objeto de) uma classe interna neste parâmetro.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o novo objeto <classname>Closure</classname> criado
   ou &null; em caso de falha.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
    private $val;

    public function __construct($val)
    {
        $this->val = $val;
    }

    public function getClosure()
    {
        // Retorna a closure ligada a este objeto e escopo
        return function() {
            return $this->val;
        };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";

$cl = $cl->bindTo($ob2);
echo $cl(), "\n";

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Funções Anônimas</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
