<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 6398de67edc88a4f296fbcc2103a7565a043492e Maintainer: ae Status: ready --><!-- CREDITS: narigone,felipe,ae, geekcom -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Exceções</title>

  <sect1 xml:id="language.exceptions.extending">
   <title>Estendendo exceções</title>
   <para>
    Uma classe de exceção definida pelo usuário pode ser criada herdando a classe
    Exception. Os membros e propriedades abaixo mostram o que é acessível
    a partir da classe filha que deriva da Exception.
   </para>
   <example>
    <title>A classe nativa Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception implements Throwable
{
    protected $message = 'Unknown exception';   // Mensagem da exceção
    private   $string;                          // Cache __toString 
    protected $code = 0;                        // Código definido pelo usuário
    protected $file;                            // Nome do arquivo onde a exceção originou
    protected $line;                            // Número da linha onde a exceção originou
    private   $trace;                           // Backtrace
    private   $previous;                        // Exceção anterior (se exceção empilhada)

    public function __construct($message = '', $code = 0, Exception $previous = null);

    final private function __clone();           // Inibe a clonagem de exceções

    final public  function getMessage();        // Mensagem da exceção
    final public  function getCode();           // Código definido pelo usuário
    final public  function getFile();           // Nome do arquivo onde a exceção originou
    final public  function getLine();           // Número da linha onde a exceção originou
    final public  function getTrace();          // Um array do backtrace()
    final public  function getPrevious();       // Exceção anterior
    final public  function getTraceAsString();  // Backtrace formatado como string

    // Pode ser sobrescrito
    public function __toString();               // String formatada da exceção
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Se uma classe estender a classe Exception e redefinir o <link
    linkend="language.oop5.decon">constructor</link>, então é altamente recomendável
    que também seja chamado o <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link> 
    para garantir que todos os dados estejam corretamente informados. O método <link
    linkend="language.oop5.magic">__toString()</link> pode ser sobrescrito
    para fornecer uma representação customizada do objeto quando utilizado como string.
   </para>
   <note>
    <para>
     Exceções não podem ser clonadas. Tentativas de <link
     linkend="language.oop5.cloning">clonar</link> um Exception resultarão em
     erros <constant>E_ERROR</constant> fatais.
    </para>
   </note>
   <example>
    <title>Estendendo a classe Exception (PHP 5.3.0+)</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Define uma classe de exceção
 */
class MyException extends Exception
{
    // Redefine a exceção de forma que a mensagem não seja opcional
    public function __construct($message, $code = 0, Exception $previous = null) {
        // código
    
        // garante que tudo está corretamente inicializado
        parent::__construct($message, $code, $previous);
    }

    // personaliza a apresentação do objeto como string
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Uma função específica desse tipo de exceção\n";
    }
}


/**
 * Cria uma classe para testar a exceção
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // lança a exeção customizada
                throw new MyException('1 é um parâmetro inválido', 5);
                break;

            case self::THROW_DEFAULT:
                // throw default one.
                throw new Exception('2 não é um parâmetro permitido', 6);
                break;

            default: 
                // Sem exceção, o objeto será criado
                $this->var = $avalue;
                break;
        }
    }
}


// Exemplo 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Entrará aqui ...
    echo "Pegou MyException\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // ... mas não aqui.
    echo "Pegou Exception padrão\n", $e;
}

// Execução continua
var_dump($o); // Null
echo "\n\n";


// Examplo 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Não entrará aqui ...
    echo "Pegou MyException\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // ... porque entrará aqui.
    echo "Pegou Exception padrão\n", $e;
}

// Execução continua
var_dump($o); // Null
echo "\n\n";


// Examplo 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Entrará aqui
    echo "Pegou exceção padrão\n", $e;
}

// Execução continua
var_dump($o); // Null
echo "\n\n";


// Examplo 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Não entrará, sem exceção
    echo "Pegou Exception padrão\n", $e;
}

// Execução continua
var_dump($o); // TestException
echo "\n\n";
?>
]]>
    </programlisting>
    <note>
     <para>
      Versões do PHP 5 anteriores ao PHP 5.3.0 não suportam o empilhamento de exceções.
      O seguinte código pode ser utilizado como um substituto da classe MyException
      se quiser rodar o exemplo acima.
     </para>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Define uma exceção personalizada
 */
class MyException extends Exception
{
    // Redefine a exceção de forma que a mensagem não seja opcional
    public function __construct($message, $code = 0) {
        // código
    
        // garante que tudo foi inicilizado corretamente
        parent::__construct($message, $code);
    }

    // string personalizada para representação do objeto
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "Uma função específica para esse tipo de exceção\n";
    }
}
?>
]]>
     </programlisting>
    </note>
   </example>
  </sect1>

  <simplesect xml:id="language.exceptions.introduction">
   <para>
    O PHP possui um modelo de exceções similar ao de outras linguagens
    de programação. Uma exceção pode ser lançada (&throw;) e capturada (&catch;).
    Código pode ser envolvido por um bloco &try; para facilitar a captura
    de exceções potenciais. Cada bloco &try; precisa ter ao menos um bloco
    &catch; ou &finally; correspondente.
   </para>

   <para>
    O objeto lançado precisa ser uma instância da classe
    <classname>Exception</classname> ou uma subclasse de
    <classname>Exception</classname>. Tentar lançar um objeto sem essa
    ascendência resultará em um erro fatal.
   </para>
  </simplesect>

  <simplesect xml:id="language.exceptions.catch">
   <title><literal>catch</literal></title>
   <para>
    Múltiplos blocos &catch; podem ser utilizados para capturar exceções
    diferentes. A execução normal (quando nenhuma exceção é lançada dentro de um
    &try;) irão continuar a execução após o último &catch; definido em sequência.
    Exceções podem ser lançadas (ou relançadas) dentro um bloco &catch;.
   </para>
   <para>
    Quando uma exceção é lançada o código seguinte não é executado,
    e o PHP tentará encontrar o primeiro bloco &catch; coincidente.
    Se uma exceção não for capturada, um erro PHP fatal será lançado com a mensagem
    "<literal>Uncaught Exception ...</literal>" na ausência de uma função
    definida com <function>set_exception_handler</function>.
   </para>
   <para>
    A partir do PHP 7.1 um bloco &catch; pode especificar múltiplas exceções
    usando o caractere pipe (<literal>|</literal>). Isto é útil quando
    diferentes exceções de diferentes hierarquias de classes são tratadas
    da mesma forma.
   </para>
  </simplesect>

  <simplesect xml:id="language.exceptions.finally">
   <title><literal>finally</literal></title>
   <para>
    A partir do PHP 5.5, um bloco &finally; pode ser especificado após
    ou no lugar de blocos &catch;. Códigos dentro de &finally; sempre serão
    executados depois do &try; ou &catch;, independente se houve o
    lançamento de uma exceção, e antes que a execução normal continue. 
   </para>
  </simplesect>

  <simplesect xml:id="language.exceptions.notes">
   &reftitle.notes;

   <note>
    <para>
     Funções internas ao PHP utilizam principalmente
     <link linkend="ini.error-reporting">aviso de erros</link>. Apenas extensões
     <link linkend="language.oop5">orientadas a objetos</link>
     utilizam exceções. No entanto os erros podem ser transformados em 
     exceções com <link linkend="class.errorexception">ErrorException</link>.
    </para>
   </note>
   <tip>
    <para>
     A <link linkend="intro.spl">biblioteca padrão do PHP (SPL)</link> fornece
     várias <link linkend="spl.exceptions">exceções
     nativas</link>.
    </para>
   </tip>
  </simplesect>

  <simplesect xml:id="language.exceptions.examples">
   &reftitle.examples;

   <example>
    <title>Lançando uma exceção</title>
    <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Divisão por zero.');
    }
    return 1/$x;
}

try {
    echo inverse(5) . "\n";
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Exceção capturada: ',  $e->getMessage(), "\n";
}

// Execução continua
echo "Olá mundo\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Exceção capturada: Divisão por zero.
Olá mundo
]]>
    </screen>
   </example>
   <example>
    <title>Manipulação de exceções com bloco <literal>finally</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
function inverse($x) {
    if (!$x) {
        throw new Exception('Divisão por zero.');
    }
    return 1/$x;
}

try {
    echo inverse(5) . "\n";
} catch (Exception $e) {
    echo 'Exceção capturada: ',  $e->getMessage(), "\n";
} finally {
    echo "Primeiro finaly.\n";
}

try {
    echo inverse(0) . "\n";
} catch (Exception $e) {
    echo 'Exceção capturada: ',  $e->getMessage(), "\n";
} finally {
    echo "Segundo finally.\n";
}

// Execução continua
echo "Olá mundo\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0.2
Primeiro finally.
Exceção capturada: Divisão por zero.
Segundo finally.
Olá mundo
]]>
    </screen>
   </example>
   <example>
    <title>Exceções empilhadas</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class Test {
    public function testing() {
        try {
            try {
                throw new MyException('foo!');
            } catch (MyException $e) {
                // rethrow it
                throw $e;
            }
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "foo!"
]]>
    </screen>
   </example>
   <example>
    <title>Manipulação de múltiplas exceções no mesmo bloco catch</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyException extends Exception { }

class MyOtherException extends Exception { }

class Test {
    public function testing() {
        try {
            throw new MyException();
        } catch (MyException | MyOtherException $e) {
            var_dump(get_class($e));
        }
    }
}

$foo = new Test;
$foo->testing();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "MyException"
]]>
    </screen>
   </example>
  </simplesect>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
