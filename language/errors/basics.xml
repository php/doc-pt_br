<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: de9c65c91ff1710d8b2d2ec955caea0162679305 Maintainer: fabioluciano Status: ready --><!-- CREDITS: fabioluciano, @ABDALAZARD -->

<sect1 xml:id="language.errors.basics" xmlns="http://docbook.org/ns/docbook">
 <title>Básico</title>

 <para>
  O PHP retornará erros em resposta a inúmeras condições de erros internos.
  Pode ser utilizado para sinalizar inúmeras condições diferentes,
  impress e/ou logado, se necessário.
 </para>

 <para>
  Cada erro que o PHP gera inclui um tipo. A
  <link linkend="errorfunc.constants">lista destes tipos de erros</link> está disponível,
  junto a uma breve descrição de seu comportamento e como podem ser
  causados.
 </para>

 <sect2 xml:id="language.errors.basics.handling">
  <title>Manuseando erros com o PHP</title>

  <para>
   Se nenhum manipulador de erro for definido, o PHP tratará todos os que ocorrerem
   de acordo com sua configuração. Quais erros são reportados, e quais são
   ignorados é controlado pela diretiva
   <link linkend="ini.error-reporting"><parameter>error_reporting</parameter></link>
   no php.ini, ou em tempo de execução, chamando a função
   <function>error_reporting</function>. É altamente recomendável que esta
   diretiva de configuração seja definida, entretanto, alguns erros podem ocorrer antes
   da execução do script começar.
  </para>

  <para>
   Em um ambiente de desenvolvimento, deve-se sempre definir a diretiva
   <link linkend="ini.error-reporting"><parameter>error_reporting</parameter></link>
   para <constant>E_ALL</constant>, para estar ciente, e corrigir,
   problemas informados pelo PHP. Em produção, deve-se definir para um nível
   menos verboso, como
   <code>E_ALL &amp; ~E_NOTICE &amp; ~E_DEPRECATED</code>, mas
   em muitos casos <constant>E_ALL</constant> também é apropriado, pois pode antecipar
   avisos de problemas em potencial.
  </para>

  <para>
   O que o PHP faz com estes erros depende de mais duas diretivas no php.ini.
   A diretiva <link linkend="ini.display-errors"><parameter>display_errors</parameter></link>
   controla se o erro será mostrado como parte da saída do script. Esta diretiva
   deve sempre estar desativada no ambiente de produção, já que pode incluir informações
   confidenciais como senhas do banco de dados, mas é útil
   habilitá-la em desenvolvimento, já que garante o reporte imediato de problemas.
  </para>

  <para>
   Além de mostrar os erros, o PHP pode logar erros quando a diretiva
   <link linkend="ini.log-errors"><parameter>log_errors</parameter></link>
   estiver habilitada. Isso logará qualquer erro para um arquivo ou para o syslog
   definido com a diretiva
   <link linkend="ini.error-log"><parameter>error_log</parameter></link>. Pode
   ser extremamente útil no ambiente de produção, já que pode-se logar os erros
   que ocorrerem e então gerar relatórios baseados nestes erros.
  </para>
 </sect2>

 <sect2 xml:id="language.errors.basics.user">
  <title>Manipuladores de erros personalizados</title>

  <para>
   Se o manipulador de erros padrão do PHP for inadequado, pode-se manipular diversos
   tipos de erro com manipuladores de erros próprios ao instalá-los com a função
   <function>set_error_handler</function>. Embora alguns tipos de erros não possam ser
   manipulados desta maneira, aqueles que puderem, serão manipulados
   da forma que o script decidir: por exemplo, pode ser utilizado para exibir
   uma página de erro customizada ao usuário e reportar mais precisamente que por log,
   como enviando um e-mail.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

