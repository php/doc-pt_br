<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 376d3f9c2ef7fcd64d8b8503d552013acefb8b5b Maintainer: marcosmarcolin Status: ready --><!-- CREDITS: marcosmarcolin -->
<chapter xml:id="language.fibers" xmlns="http://docbook.org/ns/docbook">
 <title>Fibers</title>

 <simplesect xml:id="language.fibers.overview">
  <title>Visão geral de Fibers</title>
  <?phpdoc print-version-for="fiber"?>
  <para>
   Fibers representam funções interruptíveis de pilha completa. Fibers podem ser suspensas de qualquer lugar na pilha de chamadas,
   pausando a execução dentro de Fiber até que Fiber seja retomada posteriormente.
  </para>
  <para>
   Fibers pausam toda a pilha de execução, portanto, o chamador direto da função não precisa alterar a forma
   como invoca a função.
  </para>
  <para>
   A execução pode ser interrompida em qualquer lugar na pilha de chamadas usando <methodname>Fiber::suspend</methodname>
   (ou seja, a chamada para <methodname>Fiber::suspend</methodname> pode estar em uma função profundamente aninhada ou nem
   mesmo existir).
  </para>
  <para>
   Ao contrário dos <classname>Generator</classname>s, cada <classname>Fiber</classname> tem sua própria pilha de chamadas,
   permitindo que sejam pausadas em chamadas de função profundamente aninhadas. Uma função que declara um ponto de interrupção
   (isto é, chamando <methodname>Fiber::suspend</methodname>) não precisa alterar seu tipo de retorno, ao contrário de uma função
   que usa &yield;, que deve retornar uma instância de <classname>Generator</classname>.
  </para>
  <para>
   Fibers podem ser suspensas em qualquer chamada de função, incluindo aquelas chamadas de dentro da VM PHP, como funções
   fornecidas para <function>array_map</function> ou métodos chamados por &foreach; em um
   objeto <classname>Iterator</classname>.
  </para>
  <para>
   Uma vez suspensa, a execução de Fiber pode ser retomada com qualquer valor usando <methodname>Fiber::resume</methodname>
   ou lançando uma exceção na Fiber usando <methodname>Fiber::throw</methodname>. O valor é retornado
   (ou exceção lançada) de <methodname>Fiber::suspend</methodname>.
  </para>
  <note>
   <simpara>
    Antes do PHP 8.4.0, trocas de Fibers durante a execução de um
    <link linkend="language.oop5.decon.destructor">destrutor</link> de objeto não eram
    permitidas.
   </simpara>
  </note>

  <example xml:id="language.fiber.example.basic"><!-- {{{ -->
   <title>Uso básico</title>
   <programlisting role="php">
<![CDATA[
<?php
$fiber = new Fiber(function (): void {
   $value = Fiber::suspend('fiber');
   echo "Value used to resume fiber: ", $value, PHP_EOL;
});

$value = $fiber->start();

echo "Value from fiber suspending: ", $value, PHP_EOL;

$fiber->resume('test');
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Value from fiber suspending: fiber
Value used to resume fiber: test
]]>
   </screen>
  </example><!-- }}} -->

 </simplesect>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
