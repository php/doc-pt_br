<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: a71742330defbc0edfbc6822b4f947bf437b2f70 Maintainer: ae Status: ready --><!-- CREDITS: fabioluciano,geekcom,ae -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Sintaxe Básica</title>
  <sect1 xml:id="language.basic-syntax.phptags">
   <title>Tags PHP</title>
   <para>
    Quando o PHP interpreta um arquivo ele procura pelas tags de abertura e fechamento,
    <literal>&lt;?php</literal> e <literal>?&gt;</literal>, que dizem ao PHP para
    iniciar ou parar a interpretação do código entre elas. A interpretação assim
    permite ao PHP ser incluído em vários tipos de documentos, pois tudo
    que está fora destas tags é ignorado pelo
    interpretador do PHP.
   </para>

   <para>
    PHP inclui uma tag curta echo <literal>&lt;?=</literal> que é uma
    forma abreviada mais verbosa para<code>&lt;?php echo</code>.
   </para>

   <para>
    <example>
     <title>Abrindo e fechando tags PHP</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'se você deseja rodar código PHP dentro de documentos XHTML ou XML,
                utilize essas tags'; ?>

2.  Você pode utilizar a tag curta <?= 'imprima essa string' ?>.
    É o equivalente de <?php echo 'print this string' ?>.

3.  <? echo 'Este código está entre tags curtas, mas somente funcionará '.
            'se short_open_tag estiver ativo'; ?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Tags curtas (exemplo 3) estão disponíveis por padrão mas podem ser desabilitadas
    através da diretiva <link linkend="ini.short-open-tag">short_open_tag</link>
    no arquivo de configuração &php.ini;, ou desabilitadas por padrão se o PHP
    for compilado usando a configuração <option>--disable-short-tags</option>.
   </para>
   <para>
    <note>
     <para>
      Como as tags curtas podem ser desabilitadas, é recomendável usar apenas as tags
      normais (<code>&lt;?php ?&gt;</code> and <code>&lt;?= ?&gt;</code>) para maximizar
      a compatibilidade.
     </para>
    </note>
   </para>

   <para>
    Se um arquivo for código PHP puro, é preferível omitir a tag de fechamento
    no final do arquivo. Prevenindo a existência de espaços ou linhas em branco
    após a tag, que podem causar efeitos indesejáveis,
    por que o PHP iniciará o buffer de saída quando não existir intenção do
    programador de enviar alguma saída neste ponto do script.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "Hello world";

// ... mais código

echo "última instrução";

// o script termina aqui, sem tag de fechamento PHP
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Escapando o HTML</title>
   <para>
    Tudo o que estiver fora das tags PHP é ignorado pelo
    interpretador, o que permite arquivos PHP de conteúdo misto. Permite que o PHP
    seja incluído dentro de documentos HTML, para, por exemplo, a criação de templates.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Isto vai ser ignorado pelo PHP e exibido pelo navegador.</p>
<?php echo 'Enquanto isto vai ser interpretado.'; ?>
<p>Isto também vai ser ignorado pelo PHP e exibido no navegador.</p>
]]>
     </programlisting>
    </informalexample>
    Isso funcionará porque quando o interpretador do PHP encontra ?&gt;, a tag
    de fechamento, ele simplesmente começa a repassar qualquer coisa que encontre (exceto um fim de linha
    imediato, ver a seção sobre
    <link linkend="language.basic-syntax.instruction-separation">separação de instruções</link>),
    até que ele encontre outra tag de abertura a não ser que esteja no meio de uma instrução condicional,
    onde então o interpretador vai determinar o resultado
    da condicional e assim decidir qual caminho tomar.
    Veja no próximo exemplo.
   </para>
   <para>
    Utilizando estruturas avançadas
    <example>
     <title>Escape avançado usando condições</title>
     <programlisting role="php">
<![CDATA[
<?php if ($expression == true): ?>
  Isto irá aparecer se a expressão for verdadeira.
<?php else: ?>
  Senão isso que aparecerá.
<?php endif; ?>
]]>
     </programlisting>
    </example>
    Nesse exemplo o PHP irá pular os blocos em que a condição não seja satisfeita, mesmo
    que o trecho de código esteja fora das tags de abertura/fechamento do PHP,
    pois o interpretador do PHP irá pular os conteúdos de blocos que
    não possuem uma condição que não foi satisfeita.
   </para>
   <para>
    Para impressão de grandes blocos de texto, sair do modo de interpretação do PHP é
    geralmente mais eficiente que enviar todo o texto através das funções
    <function>echo</function> ou <function>print</function>.
   </para>
   <para>
    <note>
     <para>
      Se o PHP for incluído no XML ou XHTML, as tags normais
      <code>&lt;?php ?&gt;</code> precisam ser utilizadas para que o documento
      permaneca conformante aos padrões desses documentos.
     </para>
    </note>
   </para>
  </sect1>

  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Separação de instruções</title>
   <para>
    Como no C ou Perl, o PHP requer que as instruções sejam terminadas
    com um ponto-e-vírgula ao final de cada comando. A tag de fechamento de
    um bloco de código PHP automaticamente implica em um ponto-e-vírgula; você
    não precisa ter um ponto-e-vírgula terminando a última linha de um
    bloco PHP. A tag de fechamento do bloco irá incluir uma nova linha logo após, se
    estiver presente.
   </para>

   <para>
    <example>
     <title>Exemplo mostrando a tag de fechamento incluíndo uma nova linha final</title>
     <programlisting role="php">
<![CDATA[
<?php echo "Algum texto"; ?>
Sem nova linha
<?= "Mas uma nova linha agora" ?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Some textNo newline
But newline now
]]>
     </screen>
    </example>
   </para>

   <para>
    Exemplos de entrar e sair do modo PHP:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Isto é um teste';
?>

<?php echo 'Isto é um teste' ?>

<?php echo 'Nós omitimos a última tag de fechamento';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      A tag de fechamento de um bloco PHP ao final de um arquivo é opcional,
      e em alguns casos omiti-la é útil ao utilizar <function>include</function>
      ou <function>require</function>, assim espaços em branco indesejados não
      irão aparecer ao final dos arquivos, e ainda, será capaz de adicionar
      cabeçalhos à resposta. Também é útil se usar o buffer
      de saída, e você não gostaria de um espaço em branco indesejado
      ao final das partes geradas por arquivos incluídos.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Comentários</title>
   <para>
    O PHP suporta comentários no estilo 'C', 'C++' e do Unix shell (estilo Perl). Por exemplo:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Isto é um teste'; // Estilo de comentário de uma linha em  C++
    /* Este é um comentário de múltiplas linhas
       ainda outra linha de comentário */
    echo 'Isto é ainda outro teste';
    echo 'Um teste final'; # Este é um comentário de uma linha no estilo shell
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Os comentários de estilo "uma linha" apenas comentam até o final da linha
    ou do bloco PHP de código corrente, o que ocorrer primeiro.
    Isto significa que o código HTML após <literal>// ... ?&gt;</literal>
    ou <literal># ...  ?&gt;</literal> SERÁ impresso:
    ?&gt; interrompe o modo PHP e retorna para o modo HTML, e
    <literal>//</literal> ou <literal>#</literal> não podem influenciar isto.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Isto é um <?php # echo 'simples';?> exemplo.</h1>
<p>O cabeçalho acima irá dizer 'Isto é um exemplo'.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Comentários no estilo 'C' terminam ao primeiro <literal>*/</literal> encontrado.
    Tenha certeza de não aninhar comentários no estilo 'C'. É fácil fazer este
    equívoco se estiver tentando comentar grandes blocos de código.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Isto é um teste'; /* Este comentário irá causar um problema */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
