<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: fc174e8d6162091550edde46159917ee7e5a2e73 Maintainer: ae Status: ready --><!-- CREDITS: narigone, felipe, ae, fabioluciano -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Constantes de Classe</title>
 <para>
  É possível definir <link linkend="language.constants">constantes</link>
  em cada classe separadamente.
  A visibilidade padrão de constantes de classe é <literal>public</literal>.
 </para>
 <note>
  <para>
   Constantes de classe podem ser redefinidas em classes filhas.
   A partir do PHP 8.1.0, constantes de classe não podem ser redefinidas numa classe filha
   se ela for qualificada como <link linkend="language.oop5.final">final</link>.
  </para>
 </note>
 <para>
  Também é possível que interfaces tenham constantes. Veja na
  <link linkend="language.oop5.interfaces">documentação de interface</link> os
  exemplos.
 </para>
 <para>
  É possível referenciar a classe usando uma variável.
  O valor da variável não pode ser uma palavra-chave (e.g. <literal>self</literal>,
  <literal>parent</literal> e <literal>static</literal>).
 </para>
 <para>
  Constantes de classe são alocadas por classe, e não em cada
  instância da classe.
 </para>
 <example>
  <title>Definindo e usando uma constante</title>
  <programlisting role="php">
<![CDATA[
<?php
class MinhaClasse
{
    const CONSTANTE = 'valor constante';

    function mostrarConstante() {
        echo  self::CONSTANTE . "\n";
    }
}

echo MinhaClasse::CONSTANTE . "\n";

$classname = "MinhaClasse";
echo $classname::CONSTANTE;

$classe = new MinhaClasse();
$classe->mostrarConstante();

echo $classe::CONSTANTE;
?>
]]>
  </programlisting>
 </example>
 <para>
  A constante especial <constant>::class</constant> permite
  a resolução de classes pelo seu nome completo em tempo de compilação,
  e isso é útil em classes com namespaces:
 </para>
 <example>
  <title>Exemplo com informação estática</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>Exemplo de expressão constante</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'The value of THREE is '.self::THREE;
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>Modificadores de visibilidade em constantes de classe</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   Modificadores de visibilidade estão disponíveis desde o PHP 7.1.0.
  </para>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
