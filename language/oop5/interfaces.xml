<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 565bd8b6cf2cae44ae2bc54ef6dbe6ee70ddfefd Maintainer: leonardolara Status: ready --><!-- CREDITS: felipe,narigone,fabioluciano,ae,leonardolara -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Interfaces de Objetos</title>
  <para>
   Interfaces de objetos permitem a criação de códigos que especificam quais métodos e propriedades
   uma classe deve implementar, sem definir como esses métodos ou propriedades serão
   implementados. Interfaces compartilham um namespace com classes, traits e enumerações, por isso eles
   não podem usar os mesmos nomes.
  </para>
  <para>
   Interfaces são definidas da mesma forma que classes, mas com a palavra-chave <literal>interface</literal>
   substituindo <literal>class</literal> e com nenhum dos métodos tendo
   seu conteúdo definido.
  </para>
  <para>
   Todos os métodos declarados em uma interface devem ser públicos, essa é a natureza
   de uma interface.
  </para>
  <para>
   Na prática, interfaces servem a dois propósitos distintos:
  </para>
  <simplelist>
   <member>
    Elas permitem os desenvolvedores de criar objetos de classes diferentes que podem ser substituídos
    dado que eles implementam a mesma ou as mesmas interfaces. Um exemplo seriam os serviços variados de acesso a banco de dados,
    vários sistemas de pagamentos, ou estratégias de cache. Implementações diferentes podem
    ser substituídas sem requerer modificações nos códigos que as usam.
   </member>
   <member>
    Para permitir que uma função ou método aceite e opere em um parâmetro que se molda a uma
    interface, ao mesmo tempo que não se importa como a funcionalidade é implementada. Estas interfaces
    são conhecidas como <literal>Iterable</literal>, <literal>Cacheable</literal>, <literal>Renderable</literal>,
    e assim por diante, e descrevem o comportamento significativo.
   </member>
  </simplelist>
  <para>
   Interfaces podem definir
   <link linkend="language.oop5.magic">métodos mágicos</link> para exigir que as classes
   implementantes também implementem esses métodos.
  </para>
  <note>
   <para>
    Apesar de possível, incluir <link linkend="language.oop5.decon.constructor">construtores</link>
    em interfaces é altamente desencorajado. Fazer isso reduz significativamente a flexibilidade do objeto implementante
    da interface. Além disso, construtores não são verificados pelas regras de herança, o que pode causar comportamentos
    inconsistentes ou inesperados.
   </para>
  </note>

  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>implements</literal></title>
   <para>
    Para implementar uma interface, o operador <literal>implements</literal> é utilizado.
    Todos os métodos na interface devem ser implementados na classe; não fazê-lo
    resultará em um erro fatal. Classes podem implementar mais de uma interface se
    assim for desejado, separando cada interface com uma vírgula.
   </para>
   <warning>
    <para>
     Uma classe que implemente uma interface pode utilizar um nome diferente para seus parâmetros,
     em relação à interface. Entretanto, o PHP 8.0 suporta <link linkend="functions.named-arguments">argumentos nomeados</link>, ou seja,
     chamadores podem usar os nomes de parâmetros conforme definidos na interface implementada. Por essa razão, é altamente
     recomendado que desenvolvedores utilizem os mesmos nomes de parâmetros que da interface implementada.
    </para>
   </warning>
   <note>
    <para>
     Interfaces podem ser estendidas como as classes, usando o operador
     <link linkend="language.oop5.inheritance">extends</link>.
    </para>
   </note>
   <note>
    <para>
     A classe que implementa a interface precisa declarar todos os métodos da interface
     com uma <link linkend="language.oop.lsp">assinatura compatível</link>. Uma classe pode implementar várias interfaces
     que declarem um método com o mesmo nome. Neste caso, a implementação precisa seguir as
     <link linkend="language.oop.lsp">regras de compatibilidade de assinaturas</link> de todas as interfaces. É possível
     assim aplicar <link linkend="language.oop5.variance">covariância e contravariância</link>.
    </para>
   </note>
  </sect2>
 <!-- Move this to OOP constants page? -->
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title>Constantes</title>
   <para>
    É possível ter constantes em interfaces. Constantes de interfaces funcionam exatamente
    como <link linkend="language.oop5.constants">constantes de classes</link>, com exceção de
    não podem ser sobrescritas por uma classe/interface herdeira.
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.properties">
   <title>Propriedades</title>
   <simpara>
    A partir do PHP 8.4.0, as interfaces também podem declarar propriedades.
    Se o fizerem, a declaração deverá especificar se a propriedade deve ser legível,
    gravável ou ambas.
    A declaração da interface se aplica apenas ao acesso público de leitura e gravação.
   </simpara>
   <simpara>
    Uma classe pode satisfazer uma propriedade de interface de diversas maneiras.
    Pode definir uma propriedade pública.
    Pode definir uma
    <link linkend="language.oop5.property-hooks.virtual">propriedade virtual</link> pública
    que implementa apenas o gancho correspondente.
    Ou uma propriedade de leitura pode ser satisfeita por uma propriedade <literal>somente leitura</literal>.
    Entretanto, uma propriedade de interface configurável não pode ser <literal>somente leitura</literal>.
   </simpara>
   <example>
    <title>Exemplo de propriedades de interface</title>
    <programlisting role="php">
<![CDATA[
<?php
interface I
{
    // Uma classe de implementação DEVE ter uma propriedade legível publicamente,
    // mas ser ou não configurável publicamente é irrestrito.
    public string $readable { get; }

    // Uma classe de implementação DEVE ter uma propriedade gravável publicamente,
    // mas ser ou não legível publicamente é irrestrito.
    public string $writeable { set; }

    // Uma classe de implementação DEVE ter uma propriedade que seja
    // tanto legível quanto gravável publicamente.
    public string $both { get; set; }
}

    // Esta classe implementa todas as três propriedades como propriedades tradicionais
    // e sem ganchos; Isso é totalmente válido.
class C1 implements I
{
    public string $readable;

    public string $writeable;

    public string $both;
}

// Esta classe implementa todas as três propriedades usando apenas os
// ganchos solicitados. Isto também é inteiramente válido.
class C2 implements I
{
    private string $written = '';
    private string $all = '';

    // Usa apenas um gancho get para criar uma propriedade virtual.
    // Isso satisfaz o requisito "public get".
    // Não é gravável, mas não é exigido pela interface.
    public string $readable { get => strtoupper($this->writeable); }

    // A interface requer apenas que a propriedade seja configurável,
    // mas incluir operações get também é totalmente válido.
    // Este exemplo cria uma propriedade virtual, o que é aceitável.
    public string $writeable {
        get => $this->written;
        set {
            $this->written = $value;
        }
    }

    // Esta propriedade exige que tanto a leitura quanto a gravação
    // sejam possíveis, portanto, precisamos implementar ambas ou
    // permitir que ela tenha o comportamento padrão.
    public string $both {
        get => $this->all;
        set {
            $this->all = strtoupper($value);
        }
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>Exemplo de Interface</title>
     <programlisting role="php">
<![CDATA[
<?php

// Declara a interface 'Template'
interface Template
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implementa a interface
// Exemplo correto
class WorkingTemplate implements Template
{
    private $vars = [];

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }

    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }

        return $template;
    }
}

// Exemplo incorreto
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (Template::getHtml)
class BadTemplate implements Template
{
    private $vars = [];

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>Interfaces extensíveis</title>
     <programlisting role="php">
<![CDATA[
<?php
interface A
{
    public function foo();
}

interface B extends A
{
    public function baz(Baz $baz);
}

// Isto funciona
class C implements B
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// Isso não funcionará, e gerará um erro fatal
class D implements B
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.variance.multiple.interfaces">
    <title>Compatibilidade de variância com interfaces múltiplas</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {}
class Bar extends Foo {}

interface A {
    public function myfunc(Foo $arg): Foo;
}

interface B {
    public function myfunc(Bar $arg): Bar;
}

class MyClass implements A, B
{
    public function myfunc(Foo $arg): Bar
    {
        return new Bar();
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>Herança de várias interfaces</title>
     <programlisting role="php">
<![CDATA[
<?php
interface A
{
    public function foo();
}

interface B
{
    public function bar();
}

interface C extends A, B
{
    public function baz();
}

class D implements C
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>Interfaces com constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
interface A
{
    const B = 'Constante de interface';
}

// Imprime: Constante de interface
echo A::B;


class B implements A
{
    const B = 'Constante de classe';
}

// Imprime: Constante de classe
// Anteriormente ao PHP 8.1.0 isto não funcionaria porque não era possível
// sobrescrever constantes.
echo B::B;
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex5">
    <title>Interfaces com classes abstratas</title>
     <programlisting role="php">
<![CDATA[
<?php
interface A
{
    public function foo(string $s): string;

    public function bar(int $i): int;
}

// Uma classe abstrata pode implementar apenas uma parte da interface.
// Classes que estendem a classe abstrata precisam implementar o resto.
abstract class B implements A
{
    public function foo(string $s): string
    {
        return $s . PHP_EOL;
    }
}

class C extends B
{
    public function bar(int $i): int
    {
        return $i * 2;
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex6">
    <title>Estendendo e implementando ao mesmo tempo</title>
     <programlisting role="php">
<![CDATA[
<?php

class One
{
    /* ... */
}

interface Usable
{
    /* ... */
}

interface Updatable
{
    /* ... */
}

// A ordem de palavras chave aqui é importante. 'extends' precisa aparecer primeiro.
class Two extends One implements Usable, Updatable
{
    /* ... */
}
?>
]]>
     </programlisting>
   </example>
   <para>
     Uma interface, juntamente com a declaração de tipo, fornecem uma boa maneira de garantir
     que um objeto em particular possua determinados métodos. Veja o operador
     <link linkend="language.operators.type">instanceof</link> e
     <link linkend="language.types.declarations">declaração de tipo</link>.
   </para>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
