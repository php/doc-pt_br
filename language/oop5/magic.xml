<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0eda461b7a8d5035cebf6cecba26f206a929058f Maintainer: ae Status: ready --><!-- CREDITS: narigone,felipe,lcobucci,fabioluciano,ae,github:GabrielGabriel197 -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>Métodos mágicos</title>
  <para>
   Métodos mágicos são métodos especiais que sobrescrever o comportamento padrão do PHP
   quando certas operações são realizadas em um objeto.
  </para>
  <caution>
   <simpara>
    Todos os métodos prefixados com <literal>__</literal> são reservados pelo PHP.
    Portanto, não é recomendado utilizar nomes de métodos com esse prefixo a não ser para
    sobrescrever o comportamento do PHP.
   </simpara>
  </caution>
  <para>
   Os seguintes nomes de métodos são considerados mágicos:
   <!-- Should be an itemized list ? -->
   <link linkend="object.construct">__construct()</link>,
   <link linkend="object.destruct">__destruct()</link>,
   <link linkend="object.call">__call()</link>,
   <link linkend="object.callstatic">__callStatic()</link>,
   <link linkend="object.get">__get()</link>,
   <link linkend="object.set">__set()</link>,
   <link linkend="object.isset">__isset()</link>,
   <link linkend="object.unset">__unset()</link>,
   <link linkend="object.sleep">__sleep()</link>,
   <link linkend="object.wakeup">__wakeup()</link>,
   <link linkend="object.serialize">__serialize()</link>,
   <link linkend="object.unserialize">__unserialize()</link>,
   <link linkend="object.tostring">__toString()</link>,
   <link linkend="object.invoke">__invoke()</link>,
   <link linkend="object.set-state">__set_state()</link>,
   <link linkend="object.clone">__clone()</link> e
   <link linkend="object.debuginfo">__debugInfo()</link>
  </para>

  <warning>
   <!-- See for a code example of this behaviour: https://3v4l.org/Bov34 -->
   <simpara>
    Os métodos acima, com exceção de
    <link linkend="object.construct">__construct()</link>,
    <link linkend="object.destruct">__destruct()</link> e
    <link linkend="object.clone">__clone()</link>,
    <emphasis>precisam</emphasis> ser declarados como <literal>public</literal>,
    de outra forma um <constant>E_WARNING</constant> é emitido.
    Anteriormente ao PHP 8.0.0, nenhum diagnóstico era emitido para os métodos mágicos
    <link linkend="object.sleep">__sleep()</link>,
    <link linkend="object.wakeup">__wakeup()</link>,
    <link linkend="object.serialize">__serialize()</link>,
    <link linkend="object.unserialize">__unserialize()</link> e
    <link linkend="object.set-state">__set_state()</link>.
   </simpara>
  </warning>
  <warning>
   <para>
    Se tipos forem utilizados na declaração de métodos mágicos, eles
    precisam ser idênticos às assinaturas previstas aqui.
    Senão, um erro fatal é lançado.
    Anteriormente ao PHP 8.0.0, nenhum diagnóstico era emitido.
    Entretanto, <link linkend="object.construct">__construct()</link> e
    <link linkend="object.destruct">__destruct()</link> não devem declarar um tipo de retorno,
    senão um erro fatal é lançado.
   </para>
  </warning>

  <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> e
    <link linkend="object.wakeup">__wakeup()</link>
   </title>

   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>

   <para>
    <function>serialize</function> checa se sua classe tem uma função com
    o nome mágico <link linkend="object.sleep">__sleep()</link>. Se houver, a função é
    executada antes de qualquer serialização. Ela pode limpar o objeto
    e deve retornar um array com os nomes de todas as variáveis
    do objeto que devem ser serializadas. Se o método não retornar nada,
    então &null; é serializado e um
    <constant>E_NOTICE</constant> disparado.
   </para>
   <note>
    <para>
     Não é possível que <link linkend="object.sleep">__sleep()</link> retorne nomes de
     propriedades privadas da classe pai. Fazer isso causará um erro de nível
     <constant>E_NOTICE</constant>.
     Como alternativa, utilize <link linkend="object.serialize">__serialize()</link>.
    </para>
   </note>
   <note>
    <para>
     Desde o PHP 8.0.0, retornar um valor que não seja um array de <link linkend="object.sleep">__sleep()</link> gera um warning. Anteriormente gerava um aviso.
    </para>
   </note>
   <para>
    O intuito do método <link linkend="object.sleep">__sleep()</link> é enviar dados
    pendentes ou realizar tarefas de limpeza. Além disso, a função é
    útil se tiver objetos muito grandes que não precisem ser completamente salvos.
   </para>
   <para>
    Ao mesmo tempo, <function>unserialize</function> checa pela
    presença da função com o nome mágico
    <link linkend="object.wakeup">__wakeup()</link>. Se presente, essa função pode
    reconstruir qualquer recurso que o objeto possa ter.
   </para>
   <para>
    O intuito do método <link linkend="object.wakeup">__wakeup()</link> é
    reestabelecer qualquer conexão com banco de dados que podem ter sido perdidas
    durante a serialização, e realizar outras tarefas de
    reinicialização.
   </para>
   <example>
    <title>Sleep e wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __sleep()
    {
        return array('dsn', 'username', 'password');
    }

    public function __wakeup()
    {
        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.serialize">
   <title>
    <link linkend="object.serialize">__serialize()</link> e
    <link linkend="object.unserialize">__unserialize()</link>
   </title>

   <methodsynopsis xml:id="object.serialize">
    <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unserialize">
    <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
    <methodparam><type>array</type><parameter>data</parameter></methodparam>
   </methodsynopsis>

   <para>
    <function>serialize</function> verifica se a classe contém uma função
    com o nome mágico <link linkend="object.serialize">__serialize()</link>. Se sim, essa função é
    executada antes de qualquer serialização. Ela precisa construir e retornar um array associativo de chaves-valores
    que representam a forma serializada do objeto. Se o array não for retornado então um erro <classname>TypeError</classname>
    será lançado.
   </para>
   <note>
    <para>
     Se ambos <link linkend="object.serialize">__serialize()</link> e <link linkend="object.sleep">__sleep()</link>
     estiverem definidos no mesmo objeto, somente <link linkend="object.serialize">__serialize()</link> será chamado.
     <link linkend="object.sleep">__sleep()</link> será ignorado. Se o objeto implementa a interface <link linkend="class.serializable">Serializable</link>,
     o método <literal>serialize()</literal> da interface será ignorado e o método mágico <link linkend="object.serialize">__serialize()</link>
     será utilizado.
    </para>
   </note>
   <para>
    O uso pretendido de <link linkend="object.serialize">__serialize()</link> é definir uma representação arbitrária,
    amigável, da representação do objeto. Elementos do array podem corresponder a propriedades do objeto diretamente, mas
    isso não é obrigatório.
   </para>
   <para>
    Inversamente, <function>unserialize</function> verifica a
    presença da função mágica
    <link linkend="object.unserialize">__unserialize()</link>. Se presente, essa função será chamada
    com o array retornado de <link linkend="object.serialize">__serialize()</link>. Ela poderá,
    então, restaurar as propriedades do objeto a partir do array.
   </para>
   <note>
    <para>
     Se ambos <link linkend="object.unserialize">__unserialize()</link> e <link linkend="object.wakeup">__wakeup()</link>
     estiverem definidos, somente <link linkend="object.unserialize">__unserialize()</link> será chamado, e
     <link linkend="object.wakeup">__wakeup()</link> será ignorado.
    </para>
   </note>
   <note>
    <para>
     Esse recurso está disponível desde o PHP 7.4.0.
    </para>
   </note>
   <example>
    <title>Serialize e unserialize</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
   <para>
    O método <link linkend="object.tostring">__toString()</link> permite que uma classe decida
    como se comportar quando convertida para uma string. Por exemplo,
    o que <literal>echo $obj;</literal> irá imprimir.
   </para>
   <warning>
    <para>
     A partir do PHP 8.0.0, o valor de retorno segue as mesma semântica de tipo do PHP,
     significando que o valor será convertido para <type>string</type> se possível e se
     <link linkend="language.types.declarations.strict">strict typing</link>
     estiver desligado.
    </para>
    <para>
     A partir do PHP 8.0.0, quaisquer classe que contenha o método <link linkend="object.tostring">__toString()</link>
     também implementa implicitamente a interface <interfacename>Stringable</interfacename>, e portanto passa
     os testes para essa interface. Implementar explicitamente essa interface é o
     recomendado.
    </para>
    <para>
     No PHP 7.4, o valor retornado <emphasis>precisa</emphasis> ser uma
     <type>string</type>, senão um erro <classname>Error</classname> é lançado.
    </para>
    <para>
     Anteriormente ao PHP 7.4.0, o valor retornado <emphasis>precisa</emphasis> ser uma
     <type>string</type>, senão um erro fatal <constant>E_RECOVERABLE_ERROR</constant>
     é emitido.
    </para>
   </warning>
   <warning>
    <simpara>
     Não era possível lançar uma exception de dentro de um método
     <link linkend="object.tostring">__toString()</link>
     antes do PHP 7.4.0. Isso gera um erro fatal.
    </simpara>
   </warning>
   <example>
    <title>Exemplo Simples</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declara uma classe simples
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam rep="repeat"><parameter>values</parameter></methodparam>
   </methodsynopsis>
   <para>
    O método <link linkend="object.invoke">__invoke()</link> é chamado quando um script tenta
    chamar um objeto como uma função.
   </para>
   <example>
    <title>Usando <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
   <example>
    <title>Exemplo de <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class Sort
{
    private $key;

    public function __construct(string $key)
    {
        $this->key = $key;
    }

    public function __invoke(array $a, array $b): int
    {
        return $a[$this->key] <=> $b[$this->key];
    }
}

$customers = [
    ['id' => 1, 'first_name' => 'John', 'last_name' => 'Do'],
    ['id' => 3, 'first_name' => 'Alice', 'last_name' => 'Gustav'],
    ['id' => 2, 'first_name' => 'Bob', 'last_name' => 'Filipe']
];

// Ordena os clientes pelo primeiro nome
usort($customers, new Sort('first_name'));
print_r($customers);

// Ordena os clientes pelo último nome
usort($customers, new Sort('last_name'));
print_r($customers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )

    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )

    [2] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )

)
Array
(
    [0] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )

    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )

    [2] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )

)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    Esse método <link linkend="language.oop5.static">estático</link> é chamado
    em classes exportadas por <function>var_export</function>.
   </para>
   <para>
    O único parâmetro deste método é um array contendo propriedades
    exportadas no formato <literal>['property' => value, ...]</literal>.
   </para>
   <example>
    <title>Usando <link linkend="object.set-state">__set_state()</link></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array)
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

$b = var_export($a, true);
var_dump($b);
eval('$c = ' . $b . ';');
var_dump($c);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(60) "A::__set_state(array(
   'var1' => 5,
   'var2' => 'foo',
))"
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
   <note>
    <simpara>
     Quando exportando um objeto, <function>var_export</function> não verifica
     se <link linkend="object.set-state">__set_state()</link> está
     implementado na classe do objeto, de forma que re-importar esses objetos falham com um erro <classname>Error</classname>
     na ausência de __set_state(). Isto afeta particularmente algumas
     classes internas.
    </simpara>
    <simpara>
     É responsabilidade do programador verificar se todos os objetos podem
     ser re-importados, ou seja, que todas as classes implementem __set_state().
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.magic.debuginfo">
   <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
   <para>
    Este método é chamado pela função <function>var_dump</function> ao despejar um
    objeto para obter as propriedades que devem ser exibidas. Se este método não for
    definido em um objeto, todos as propriedades públicas, protegidas e provadas
    serão exibidas.
   </para>
   <example>
    <title>Utilizando o  <link linkend="object.debuginfo">__debugInfo()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
