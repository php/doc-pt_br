<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d73c3dcbd6e2b085781115aa42d17b80ea285b9e Maintainer: fabioluciano Status: ready --><!-- CREDITS: fabioluciano,mauricio, @ABDALAZARD -->
 <sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
  <title>Herança de Objetos</title>
  <para>
   Herança é um conceito de programação estabelecido, e o PHP faz
   use deste em seu modelo de objetos. Este princípio afeta a forma
   com que classes e objetos se relacionam com outras.
  </para>
  <para>
   Por exemplo, ao estender uma classe, a subclasse herda todos os métodos
   públicos e protegidos, propriedades e constantes da classe pai.
   A não que uma classe sobrescreva
   estes métodos, eles manterão sua funcionalidade original.
  </para>
  <para>
   Isto é útil para definir uma funcionalidade abstrata, e permitir a
   implementação de uma funcionalidade adicional em objetos similares sem a
   necessidade de reimplementar todas as funcionalidades compartilhadas.
  </para>
  <para>
   Os métodos privados de uma classe pai não são acessíveis a uma classe filha. Como resultado,
   as classes filhas podem reimplementar um método privado sem levar em conta as regras normais
   de herança. Antes do PHP 8.0.0, entretanto, as restrições <literal>final</literal> e <literal>static</literal>
   eram aplicadas aos métodos privados. Desde o PHP 8.0.0, a única restrição de método privado
   que é aplicada é <literal>private final</literal> para construtores, já que essa
   é uma maneira comum de "desabilitar" o construtor ao usar métodos de fábricação estáticos.
  </para>
 <para>
  A <link linkend="language.oop5.visibility">visibilidade</link>
  de métodos, propriedades e constantes pode ser relaxada, por exemplo, um
  método com <literal>protected</literal> pode ser marcado como
  <literal>public</literal>, mas não pode ser restrito, por exemplo,
  marcar uma propriedade que tenha <literal>public</literal> como <literal>private</literal>.
 </para>

  <note>
   <para>
    A não ser que o autoload seja usado, as classes devem ser definidas antes de
    utilizadas. Se uma classe estende outra, a classe pai deve ser declarada
    antes da estrutura da classe filha. Esta regra se aplica a classes que herdam
    outras classes e interfaces.
   </para>
  </note>
  <note>
     <para>
      Não é permitido sobrescrever uma propriedade de leitura/gravação com um <link linkend="language.oop5.properties.readonly-properties">propriedade somente de leitura</link> ou vice versa.
      <example>
       <programlisting role="php">
  <![CDATA[
  <?php

  class A {
      public int $prop;
  }
  class B extends A {
      // Illegal: read-write -> readonly
      public readonly int $prop;
  }
  ?>
  ]]>
     </programlisting>
    </example>
   </para>
  </note>
  
  <sect2 xml:id="language.oop5.inheritance.examples">
   <example xml:id="language.oop5.inheritance.examples.ex1">
    <title>Exemplo de Herança</title>
     <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }

    public function printPHP()
    {
        echo 'PHP is great.' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // Output: 'Foo: baz'
$foo->printPHP();       // Output: 'PHP is great'
$bar->printItem('baz'); // Output: 'Bar: baz'
$bar->printPHP();       // Output: 'PHP is great'

?>
]]>
    </programlisting>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
