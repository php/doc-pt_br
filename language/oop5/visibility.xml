<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 5cba5bb19fa1ae97aea20ae869f8fd812d22b731 Maintainer: ae Status: ready --><!-- CREDITS: narigone, felipe, ae, fabioluciano -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Visibilidade</title>
  <para>
   A visibilidade de uma propriedade ou método pode ser definida prefixando a
   declaração com as palavras-chave: <emphasis>public</emphasis>,
   <emphasis>protected</emphasis> ou
   <emphasis>private</emphasis>. Itens declarados como públicos podem ser
   acessados de qualquer lugar. Membros declarados como protegidos só podem ser acessados
   na classe declarante e suas classes herdeiras. Membros
   declarados como privados só podem ser acessados na classe que define
   o membro privado.
  </para>

  <sect2 xml:id="language.oop5.visibility-members">
   <title>Visibilidade de propriedades</title>
   <para>
    Propriedades de classes devem ser declarados como públicas, privadas ou
    protegidas. Se declarado com <emphasis>var</emphasis>
    a propriedade será definida como pública.
   </para>
   <para>
    <example>
     <title>Declaração de propriedade</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Define MinhaClasse
 */
class MinhaClasse
{
    public $publica = 'Public';
    protected $protegida = 'Protected';
    private $privada = 'Private';

    function imprimeAlo()
    {
        echo $this->publica;
        echo $this->protegida;
        echo $this->privada;
    }
}

$obj = new MinhaClasse();
echo $obj->publica; // Funciona
echo $obj->protegida; // Erro Fatal
echo $obj->privada; // Erro Fatal
$obj->imprimeAlo(); // Mostra Public, Protected e Private


/**
 * Define MinhaClasse2
 */
class MinhaClasse2 extends MinhaClasse
{
    // Nós podemos redeclarar as propriedades públicas e protegidas mas não as privadas
    protected $protegida = 'Protected2';

    function imprimeAlo()
    {
        echo $this->publica;
        echo $this->protegida;
        echo $this->privada;
    }
}

$obj2 = new MinhaClasse2();
echo $obj2->publica; // Works
echo $obj2->privada; // Undefined
echo $obj2->protegida; // Fatal Error
$obj2->imprimeAlo(); // Mostra Public, Protected2, Undefined

?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     O uso da declaração de variável com a palavra-chave
     <emphasis>var</emphasis> ainda é suportada por razões de
     compatibilidade (como um sinônimo para a palavra-chave public). Em versões do PHP anteriores ao 5.1.3,
     isso gerará um aviso do tipo <constant>E_STRICT</constant>.
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Visibilidades de métodos</title>
   <para>
    Métodos de classe podem ser definidos como público, privado
    ou protegido. Métodos sem qualquer declaração explícita serão
    definidos como público.
   </para>
   <para>
    <example>
     <title>Declaração de método</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Define MinhaClasse
 */
class MinhaClasse
{
    // Declara um construtor público
    public function __construct() { }

    // Declara um método public
    public function MeuPublico() { }

    // Declara um método protected
    protected function MeuProtegido() { }

    // Declara um método private
    private function MeuPrivado() { }

    // Esse é public
    function Foo()
    {
        $this->MeuPublico();
        $this->MeuProtegido();
        $this->MeuPrivado();
    }
}

$minhaclasse = new MinhaClasse;
$minhaclasse->MeuPublico(); // Funciona
$minhaclasse->MeuProtegido(); // Erro Fatal
$minhaclasse->MeuPrivado(); // Erro Fatal
$minhaclasse->Foo(); // Public, Protected e Private funcionam


/**
 * Define MinhaClasse2
 */
class MinhaClasse2 extends MinhaClasse
{
    // Esse é public
    function Foo2()
    {
        $this->MeuPublico();
        $this->MeuProtegido();
        $this->MeuPrivado(); // Erro Fatal
    }
}

$minhaclasse2 = new MinhaClasse2;
$minhaclasse2->MeuPublico(); // Funciona
$minhaclasse2->Foo2(); // Public e Protected funcionam, Private não

class Bar
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }

    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }

    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Visibilidade de outros objetos</title>
   <para>
    Objetos do mesmo tipo terão acesso a outros mementos privados e
    protegidos mesmo que não sejam da mesma instância. Isso acontece
    por que os detalhes específicos de implementação já são conhecidos dentro
    destes objetos.
   </para>
   <example>
    <title>Acessando membros privados entre objetos do mesmo tipo</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Acessou o método privado.';
    }

    public function baz(Test $other)
    {
        // Pode-se alterar a propriedade privada:
        $other->foo = 'hello';
        var_dump($other->foo);

        // Pode-se chamar método privado:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "hello"
Acessou o método privado.
]]>
    </screen>
   </example>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
