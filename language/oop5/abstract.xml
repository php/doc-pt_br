<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: leonardolara Status: ready --><!-- CREDITS: narigone,ae,fabioluciano,geekcom,leonardolara -->
 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Abstração de Classes</title>

  <para>
   O PHP possui métodos, classes e propriedades abstratas. Classes definidas como
   abstratas não podem ser instanciadas, e qualquer classe que
   contenha ao menos um método abstrato ou uma propriedade abstrata também deve ser abstrata.
   Métodos definidos como abstratos simplesmente declaram a assinatura e se ele é público ou protegido;
   eles não podem definir a implementação. Propriedades definidas como abstratas
   podem declarar um requisito para o comportamento de <literal>get</literal> ou <literal>set</literal>,
   e podem fornecer uma implementação para uma das operações, mas não para ambas.
  </para>

  <para>
   Quando herdando de uma classe abstrata, todos os métodos marcados como abstratos
   da classe herdada precisam ser definidos na classe implementante.
   além de seguir as regras usuais de
   <link linkend="language.oop5.inheritance">herança</link> e
   <link linkend="language.oop.lsp">compatibilidade de assinatura</link>.
  </para>

  <simpara>
   A partir do PHP 8.4, uma classe abstrata pode declarar uma propriedade abstrata, seja pública ou protegida.
   Uma propriedade abstrata protegida pode ser satisfeita por uma propriedade que pode ser lida/gravada no
   escopo protegido ou público.
  </simpara>
  <simpara>
   Uma propriedade abstrata pode ser satisfeita por uma propriedade padrão ou por uma propriedade
   com <link linkend="language.oop5.property-hooks">ganchos</link> definidos, correspondentes à operação necessária.
  </simpara>

  <example>
   <title>Exemplo de método abstrato</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class ClasseAbstrata
{
    // Força a classe que estende ClasseAbstrata a definir esse método
    abstract protected function pegarValor();
    abstract protected function valorComPrefixo( $prefixo );

    // Método comum
    public function imprimir()
    {
        print $this->pegarValor();
    }
}

class ClasseConcreta1 extends ClasseAbstrata
{
    protected function pegarValor()
    {
        return "ClasseConcreta1";
    }

    public function valorComPrefixo( $prefixo )
    {
        return "{$prefixo}ClasseConcreta1";
    }
}

class ClasseConcreta2 extends ClasseAbstrata
{
    protected function pegarValor()
    {
        return "ClasseConcreta2";
    }

    public function valorComPrefixo( $prefixo )
    {
        return "{$prefixo}ClasseConcreta2";
    }
}

$classe1 = new ClasseConcreta1();
$classe1->imprimir();
echo $classe1->valorComPrefixo('FOO_'), "\n";

$classe2 = new ClasseConcreta2();
$classe2->imprimir();
echo $classe2->valorComPrefixo('FOO_'), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>
  </example>

  <example>
   <title>Exemplo de método abstrato</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class ClasseAbstrata
{
    // Um método abstrato precisa definir apenas os parâmetros requeridos
    abstract protected function prefixName($name);
}

class ClasseConcreta extends ClasseAbstrata
{
    // Uma classe filha pode definir parâmetros opcionais que não estão presentes na assinatura da classe superior
    public function prefixName($name, $separator = ".")
    {
        if ($name == "Pacman") {
            $prefix = "Mr";
        } elseif ($name == "Pacwoman") {
            $prefix = "Mrs";
        } else {
            $prefix = "";
        }

        return "{$prefix}{$separator} {$name}";
    }
}

$class = new ClasseConcreta();
echo $class->prefixName("Pacman"), "\n";
echo $class->prefixName("Pacwoman"), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Mr. Pacman
Mrs. Pacwoman
]]>
   </screen>
  </example>
  <example>
   <title>Exemplo de propriedade abstrata</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    // A extensão de classes deve ter uma propriedade que pode ser obtida publicamente.
    abstract public string $readable {
        get;
    }

    // A extensão de classes deve ter uma propriedade gravável protegida ou pública.
    abstract protected string $writeable {
        set;
    }

    // A extensão de classes deve ter uma propriedade simétrica protegida ou pública.
    abstract protected string $both {
        get;
        set;
    }
}

class C extends A
{
    // Isto satisfaz o requisito e também o torna configurável, o que é válido.
    public string $readable;

    // Isso NÃO satisfaria o requisito, pois não é legível publicamente.
    protected string $readable;

    // Isso satisfaz exatamente o requisito, portanto é suficiente.
    // Pode ser alterado, somente a partir do escopo protegido.
    protected string $writeable {
        set => $value;
    }

    // Isso expande a visibilidade de protegida para pública, o que é aceitável.
    public string $both;
}

?>
]]>
   </programlisting>
  </example>
  <simpara>
   Uma propriedade abstrata em uma classe abstrata pode fornecer implementações para qualquer gancho,
   mas deve ter <literal>get</literal> ou <literal>set</literal> declarado, mas não definido (como no exemplo acima).
  </simpara>
  <example>
   <title>Exemplo de propriedade abstrata com ganchos</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

abstract class A
{
    // Isso fornece uma implementação de conjunto padrão (mas substituível)
    // e requer que classes filhas forneçam uma implementação get.
    abstract public string $foo {
        get;

        set {
            $this->foo = $value
        }
    }
}

?>
 ]]>
   </programlisting>
  </example>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
