<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 2ef411d8ef4f8e3ecbcb9c23fbb8017061e44501 Maintainer: ae Status: ready --><!-- CREDITS: narigone, felipe, ae, fabioluciano, @ABDALAZARD -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>Operador de Resolução de Escopo (::)</title>

 <para>
  O Operador de Resolução de Escopo (também chamado de Paamayim Nekudotayim), ou em
  termos mais simples, dois pontos duplo, é um símbolo que permite acesso a
  métodos ou propriedades <link linkend="language.oop5.static">estáticas</link>,
  <link linkend="language.oop5.constants">constantes</link>, e sobrecarregadas
  de uma classe.
 </para>

 <para>
  Ao referenciar estes itens fora da definição da classe, use
  o nome da classe.
 </para>

 <para>
  É possível referenciar a classe usando a variável.
  O valor da variável não pode ser uma palavra-chave (por exemplo, <literal>self</literal>,
  <literal>parent</literal> e <literal>static</literal>).
 </para>

 <para>
  Paamayim Nekudotayim pode parecer, de início, uma escolha estranha para chamar
  dois pontos duplo. No entanto, na hora de escrever a Zend Engine 0.5
  (que provia o PHP 3), foi o que a equipe da Zend decidiu.
  Realmente significa dois pontos duplo - em Hebreu!
 </para>

 <example>
  <title>:: de fora da definição da classe</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Um valor constante';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE;

echo MyClass::CONST_VALUE;
?>
]]>
  </programlisting>
 </example>

 <para>
  Três palavras-chave especiais <varname>self</varname>, <varname>parent</varname> e
  <varname>static</varname>, são utilizadas para acessar propriedades e métodos dentro
  de uma definição de classe.
 </para>

 <example>
  <title>:: de dentro da definição da classe</title>
  <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'variável estática';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
echo $classname::doubleColon();

OtherClass::doubleColon();
?>
]]>
  </programlisting>
 </example>

 <para>
  Quando uma subclasse sobrecarrega a definição de um método do pai,
  o PHP não chamará o método pai. Fica a cargo da subclasse
  chamar o método pai ou não. Isso também se aplica a definições de métodos <link
  linkend="language.oop5.decon">Construtores e Destrutores</link>, <link
  linkend="language.oop5.overloading">de Sobrecarga</link> e <link
  linkend="language.oop5.magic">Mágicos</link>.
 </para>

 <example>
  <title>Chamando um método pai</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Sobrescreve e definição da classe estendida
    public function myFunc()
    {
        // Mas ainda consegue chamar o método na classe herdada
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
  </programlisting>
 </example>
 <para>
  Veja também <link linkend="language.oop5.basic.class.this">outros exemplos de
  chamadas estáticas mais complexas</link>.
 </para>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
