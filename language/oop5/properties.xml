<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ba65e0f4f7f28bb29b42362c38d60e41970bdfe6 Maintainer: ae Status: ready --><!-- CREDITS: fabioluciano,ae, vinelouzada -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Propriedades</title>

  <para>
   Variáveis membros de classes são chamados de <emphasis>propriedades</emphasis>.
   Eles também são conhecidos por outros termos, como <emphasis>campos</emphasis> (field),
   mas para propósitos deste manual será utilizado o termo <emphasis>propriedade</emphasis>.
   Elas podem ser definidas com ao menos um modificador opcional (ver
   <xref linkend="language.oop5.visibility"/>,
   <xref linkend="language.oop5.static"/>,
   ou, a partir do PHP 8.1.0, <link linkend="language.oop5.properties.readonly-properties">readonly</link>),
   (exceto para propriedades <code>readonly</code> properties), a partir do PHP 7.4,
   seguido também de uma declaração de tipo, finalizando com um nome de variável comum.
   Essa declaração pode ainda incluir uma inicialização, desde que essa inicialização
   seja um valor <link linkend="language.constants">constante</link>.
  </para>
  <note>
   <para>
    Uma forma obsoleta de declarar propriedades de classe é através da instrução
    <literal>var</literal> ao invés de um modificador.
   </para>
  </note>
  <note>
   <simpara>
    Uma propriedade declarada sem um modificador de <xref linkend="language.oop5.visibility"/>
    funcionará como uma propriedade <literal>public</literal>.
   </simpara>
  </note>
  <para>
   Internamente às classes, métodos não estáticos podem ser acessados utilizando-se
   <literal>-&gt;</literal> (operador de objeto): <varname>$this-&gt;property</varname>
   (onde <literal>property</literal> é o nome da propriedade).
   Propriedades estáticas são acessadas utilizando-se o operador <literal>::</literal> (duplo dois pontos), assim:
   <varname>self::$property</varname>. Veja <xref linkend="language.oop5.static" />
   para mais informações sobre a diferença de propriedades estáticas e não estáticas.
  </para>
  <para>
   A pseudo-variável <varname>$this</varname> está disponível dentro
   de qualquer classe de método chamada no contexto do objeto.
   <varname>$this</varname> é uma referência ao objeto de contexto do qual o método foi chamado.
  </para>

  <para>
   <example>
    <title>Declaração de propriedades</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'Olá ' . 'mundo';
   public $var2 = <<<EOD
Olá mundo
EOD;
   public $var3 = 1+2;
   // Declaração de propriedade inválida
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Declaração de propriedade válida
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
Olá mundo
EOD;

   // Sem um modificador de visibilidade:
   static $var9;
   readonly int $var10;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Existem várias funções para manipular classes e objetos.
    Veja a seção sobre <link linkend="ref.classobj">funções sobre classes/objetos</link>
    para mais detalhes.
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Declaração de propriedades tipadas</title>
   <para>
    A partir do PHP 7.4.0, definições de propriedades podem incluir uma
    <xref linkend="language.types.declarations" />,
    com exceção do tipo <type>callable</type>.
    <example>
     <title>Exemplo de propriedades tipadas</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Propriedades tipadas precisam ser inicializadas antes de serem acessadas, senão um
    <classname>Error</classname> é lançado.
    <example>
     <title>Acessando propriedades</title>
     <programlisting role="php">
<![CDATA[
<?php

class Forma
{
    public int $numeroDeLados;
    public string $nome;

    public function setnumeroDeLados(int $numeroDeLados): void
    {
        $this->numeroDeLados = $numeroDeLados;
    }

    public function setNome(string $nome): void
    {
        $this->nome = $nome;
    }

    public function getnumeroDeLados(): int
    {
        return $this->numeroDeLados;
    }

    public function getNome(): string
    {
        return $this->nome;
    }
}

$triangle = new Forma();
$triangle->setNome("triângulo");
$triangle->setnumeroDeLados(3);
var_dump($triangle->getNome());
var_dump($triangle->getnumeroDeLados());

$circle = new Forma();
$circle->setNome("cículo");
var_dump($circle->getNome());
var_dump($circle->getnumeroDeLados());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(9) "triângulo"
int(3)
string(7) "círculo"

Fatal error: Uncaught Error: Typed property Forma::$numeroDeLados must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.properties.readonly-properties">
   <title>Propriedades somente leitura</title>
   <para>
    A partir do PHP 8.1.0, uma propriedade pode ser declarada com o modificador <code>readonly</code>, o que previne modificação da propriedade após a inicialização.
    <example>
     <title>Exemplo de propriedade somente leitura</title>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
   public readonly string $prop;

   public function __construct(string $prop) {
       // Inicialização permitida.
       $this->prop = $prop;
   }
}

$test = new Test("foobar");
// Legal read.
var_dump($test->prop); // string(6) "foobar"

// Modificação ilegal. Não importa que o valor seja o mesmo.
$test->prop = "foobar";
// Error: Cannot modify readonly property Test::$prop
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      O modificador readonly somente pode ser aplicado a <link linkend="language.oop5.properties.typed-properties">propriedades tipadas</link>.
      Uma propriedade somente leitura sem restrições de tipo pode ser declarada utilizando o tipo <xref linkend="language.types.mixed" />.
     </para>
    </note>
    <note>
     <para>
      Propriedades estáticas não são suportadas.
     </para>
    </note>
   </para>
   <para>
    Uma propriedade somente leitura somente pode ser inicializada uma única vez, e somente do escopo onde ela foi declarada. Quaisquer outras modificações da propriedade resultam em um <classname>Error</classname>.
    <example>
     <title>Inicilização ilegal de propriedades somente leitura.</title>
     <programlisting role="php">
<![CDATA[
<?php
class Test1 {
    public readonly string $prop;
}

$test1 = new Test1;
// Inicialização ilegal fora do escopo privado.
$test1->prop = "foobar";
// Error: Cannot initialize readonly property Test1::$prop from global scope
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Especificar um valor default para uma propriedade somente leitura não é permitido, porque uma propriedade com um valor default é essencialmente uma constante, e portanto não tem outro propósito.
     <example>
      <programlisting role="php">
<![CDATA[
<?php

class Test {
    // Fatal error: Readonly property Test::$prop cannot have default value
    public readonly int $prop = 42;
}
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <note>
    <para>
     Propriedades somente leitura não podem ser <function>unset</function> depois de inicializadas. Entretanto é possível realizar essa operação antes da inicialização, dentro do escopo onde a variável foi declarada.
    </para>
   </note>
   <para>
    Nenhum tipo de modificação é permitido, e o seguintes casos resultarão em um <classname>Error</classname>:
    <example>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}

$test = new Test;
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Entretanto, propriedades somente leitura não proíbem mutação. Objetos ou recursos armazenados em propriedades somente leitura ainda podem ser modificados internamente:
    <example>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
    public function __construct(public readonly object $obj) {}
}

$test = new Test(new stdClass);
// Modificação interna permitida
$test->obj->foo = 1;
// Reinicialização proibida.
$test->obj = new stdClass;
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.properties.dynamic-properties">
   <title>Propriedades dinâmicas</title>
   <para>
    Ao tentar atribuir uma propriedade inexistente em um &object;,
    o PHP irá automaticamente criar a propriedade.
    Essa propriedade criada dinamicamente será disponível <emphasis>apenas</emphasis>
    naquela instância específica.
   </para>

   <warning>
    <simpara>
     Propriedades dinâmicas estão obsoletas a partir do PHP 8.2.0.
     É recomendado declarar todas as propriedades previamente.
     Para suportar nomes de propriedades arbitrárias, a classe deve implementar os métodos
     mágicos <link linkend="object.get">__get()</link> e
     <link linkend="object.set">__set()</link>.
     Como último recurso, a classe pode ser marcada com o atributo
     <code>#[\AllowDynamicProperties]</code>.
    </simpara>
   </warning>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
