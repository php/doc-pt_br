<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7b50ce5861a2fcceaa05da7adb3d946a025ca72d Maintainer: ae Status: ready --><!-- CREDITS: narigone,felipe,ae,fabioluciano -->
 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Construtores e Destrutores</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Construtores</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
   </methodsynopsis>
   <para>
    O PHP permite aos desenvolvedores declararem métodos construtores para as classes.
    Classes que tem um método construtor chamam o método a cada
    objeto recém criado, sendo apropriado para qualquer inicialização que o
    objeto necessite antes de ser utilizado.
   </para>
   <note>
    <simpara>
     Construtores pais não são chamados implicitamente se a classe filha define
     um construtor. Para executar o construtor da classe pai, uma chamada a
     <function>parent::__construct</function> dentro do construtor da classe filha
     é necessária. Se a classe filha não definir um construtor, será herdado
     da classe pai como um método normal (se não foi declarado
     como privado).
    </simpara>
   </note>
   <example>
    <title>Construtoras em herança</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "In BaseClass constructor\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "In SubClass constructor\n";
    }
}

class OtherSubClass extends BaseClass {
    // inherits BaseClass's constructor
}

// In BaseClass constructor
$obj = new BaseClass();

// In BaseClass constructor
// In SubClass constructor
$obj = new SubClass();

// In BaseClass constructor
$obj = new OtherSubClass();
?>
]]>
    </programlisting>
   </example>
   <para>
    Diferente de outros métodos, <link linkend="object.construct">__construct()</link>
    não precisa seguir as regras usuais de
    <link linkend="language.oop.lsp">compatibilidade de assinatura</link>
    em objetos derivados.
   </para>
   <para>
    Construtores são métodos ordinários que são chamados durante a criação
    do objeto correspondente. Eles podem definir um número arbitrários de argumentos, quais
    podem ser obrigatórios, podem ter um tipo, e podem ter valores padrão. Argumentos de construtores
    são informados dentro de parênteses depois do nome da classe.
   </para>
   <example>
    <title>Utilizando argumentos de construtor</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Passagem de ambos os argumentos.
$p1 = new Point(4, 5);
// Passar somente o argumento obrigatório, $y terá o valor padrão zero.
$p2 = new Point(4);
// Com parâmetros nomeados (a partir do PHP 8.0):
$p3 = new Point(y: 5, x: 4);
?>
]]>
    </programlisting>
   </example>
   <para>
    Se a classe não tem construtor, ou o construtor não tem argumentos obrigatórios, o parêntesis
    pode ser omitido.
   </para>
   <sect3>
    <title>Construtores em estilo antigo</title>
    <para>
     Anteriormente ao PHP 8.0.0 as classes no namespace global interpretam um método com o mesmo nome
     da classe como sendo um construtor válido. Essa sintaxe foi descontinuada,
     e gerará um erro <constant>E_DEPRECATED</constant> embora ainda continue funcionando como um construtor.
     Se ambos o <link linkend="object.construct">__construct()</link> e um método homônimo da classe
     estiverem definidos, <link linkend="object.construct">__construct()</link> que será chamado.
    </para>
    <para>
     Em classes dentro de namespaces, ou quaisquer classes a partir do PHP 8, um método
     homônimo ao nome da classe não tem um significado especial.
    </para>
    <para>Sempre utilize <link linkend="object.construct">__construct()</link> em novos códigos.
    </para>
   </sect3>
   <sect3 xml:id="language.oop5.decon.constructor.promotion">
    <title>Promoção de propriedades no construtor</title>
    <para>
     A partir do PHP 8, parâmetros de construtores podem ser promovidos a uma propriedade
     do objeto. Isto é bastante comum quando parâmetros do construtor de serem informados
     em uma propriedade no construtor, sem nenhum processamento. Promoção de construtor
     fornece uma sintaxe reduzida para esse caso. O exemplo acima pode ser reescrito assim:
    </para>
    <example>
     <title>Utilizando promoção de propriedades no construtor</title>
     <programlisting role="php">
<![CDATA[
<?php
class Point {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
     </programlisting>
    </example>
    <para>
     Quanto um argumento de construtor incluir um modificador, o PHP interpreta como sendo
     uma propriedade de objeto e como um argumento do construtor, e assimilará o valor do argumento
     a uma propriedade de mesmo nome. O corpo do construtor pode estar vazio ou conter outras operações.
     Quaisquer operações serão executados após os valores dos argumentos serem definidos
     nas respectivas propriedades.
    </para>
    <para>
     Nem todos os argumentos são promovidos. É possível misturar os argumentos promovidos e não promovidos
     em qualquer ordem. Argumentos promovidos não têm impacto no código chamador do construtor.
    </para>
    <note>
     <para>
      Utilizar um <link linkend="language.oop5.visibility">modificador de visibilidade</link> (<literal>public</literal>,
      <literal>protected</literal> ou <literal>private</literal>) é o modo mais expressivo de gerar a promoção
      de propriedades, mas quaisquer outro modificador (como por exemplo <literal>readonly</literal>) terá o mesmo efeito.
     </para>
    </note>
    <note>
     <para>
      Propriedades de objeto não podem ser do tipo <type>callable</type> dado uma ambiguidade que poderia
      introduzir. Argumentos promovidos, portanto, não podem ser do tipo <type>callable</type>. Quaisquer
      outra <link linkend="language.types.declarations">declaração de tipo</link> é permitida.
     </para>
    </note>
    <note>
     <para>
      Propriedades promovidas são convertidas em uma propriedade normal assim como um parâmetro de função,
      portanto todas as restrições de nomeação de propriedades e parâmetros se aplicam.
     </para>
    </note>
    <note>
     <para>
      <link linkend="language.attributes">Atributos</link> informados em
      um argumento promovido será replicado tanto na propriedade como no
      no argumento. Valores padrão de argumentos promovidos no construtor serão replicados apenas no argumento, mas não na propriedade.
     </para>
    </note>
   </sect3>

   <sect3 xml:id="language.oop5.decon.constructor.new">
    <title>New em inicializadores de parâmetros</title>
    <para>
     A partir do PHP 8.1.0, objetos podem ser utilizados como valores padrão de parâmetros,
     variáveis estáticas e constantes globais, assim como argumentos de atributos.
     Novos objetos também podem ser passados na instrução <function>define</function>.
    </para>
    <note>
     <para>
      Não é permitido nomes de classe não-string ou classes anônimas.
      Não é permitido o espalhamento de argumentos.
      Não é permitido o uso de expressões.
     </para>
    </note>
    <example>
     <title>New em inicializações</title>
     <programlisting role="php">
<![CDATA[
<?php

// Permitido:
static $x = new Foo;

const C = new Foo;

function test($param = new Foo) {}

#[AnAttribute(new Foo)]
class Test {
    public function __construct(
        public $prop = new Foo,
    ) {}
}

// Não permitido, resultad em erro de compilação:
function test(
    $a = new (CLASS_NAME_CONSTANT)(), // Nome dinâmico de classe
    $b = new class {}, // Classe anônima
    $c = new A(...[]), // Espalhamento de argumento
    $d = new B($abc), // Expressão
) {}
?>
]]>
     </programlisting>
    </example>
   </sect3>

   <sect3 xml:id="language.oop5.decon.constructor.static">
    <title>Métodos de criação estáticos</title>
    <para>
     O PHP suporta apenas um único construtor por classe. Em alguns casos pode ser
     desejável de permitir a um objeto ser construído de maneiras diferentes, a partir de argumentos diferentes.
     O método recomendado para realizar isso é através de métodos estáticos, utilizados como empacotadores do construtor.
    </para>
    <example>
     <title>Utilizando métodos estáticos para construção</title>
     <programlisting role="php">
<![CDATA[
<?php
class Product {

    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static {
        // Custom logic here.
        $data = convert_xml_to_array($xml);
        $new = new static();
        $new->id = $data['id'];
        $new->name = $data['name'];
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);
]]>
     </programlisting>
    </example>
    <para>
     O construtor pode ser private ou protected para evitar que ele seja chamado externamente.
     Nesses casos apenas um construtor estático será capaz de instanciar a classe. Por eles estarem
     nas mesma definição de classe, os métodos estáticos são capazes de instanciar o objeto, mesmo em
     uma instância diferente. O construtor privado é opcional e pode não fazer sentido em
     todos os casos.
    </para>
    <para>
     Os três métodos estáticos a seguir demonstram as maneiras diferentes de instanciar um objeto.
    </para>
    <simplelist>
     <member><code>fromBasicData()</code> obtém os exatos parâmetros que são necessários, e então cria
      o objeto através da chamada do construtor e retorna o resultado</member>
     <member><code>fromJson()</code> aceita uma string JSON, realiza algum pré-processamento para
     converter os dados no formato necessário ao construtor. Só então retorna o novo objeto.</member>
     <member><code>fromXml()</code> aceita uma string XML, pré-processa, e então cria um objeto
     limpo. O construtor é chamado, mas com todos os parâmetros opcionais o método
     os ignora. Por fim, os valores nas propriedades do objeto são associados antes de retornar o resultado.</member>
    </simplelist>
    <para>
     Nos três casos, a palavra chave <code>static</code> é convertida no nome da classe onde o código reside.
     Nesse caso a classe <code>Product</code>.
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Destrutor</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    O PHP introduz um conceito de destrutor similar ao de outras
    linguagens orientadas a objeto, como C++. O método destrutor será chamado
    assim que todas as referências a um objeto particular forem removidas ou quando
    o objeto for explicitamente destruído ou qualquer ordem na sequência de encerramento.
   </para>
   <example>
    <title>Exemplo de Destrutor</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyDestructableClass
{
    function __construct() {
        print "In constructor\n";
    }

    function __destruct() {
        print "Destroying " . __CLASS__ . "\n";
    }
}

$obj = new MyDestructableClass();

]]>
    </programlisting>
   </example>
   <para>
    Assim como os construtores, os destrutores da classe pai não serão chamados implicitamente pelo
    PHP. Para executar o destrutor pai, deve-se fazer uma chamada
    explícita a <function>parent::__destruct</function> no corpo do
    destrutor. Assim como construtores, uma classe filha pode herdar o destrutor
    caso não implemente um.
   </para>
   <para>
    O destrutor será chamado mesmo se o script for terminado utilizando-se
    <function>exit</function>. Chamar <function>exit</function> em um destrutor
    irá impedir que as demais rotinas de encerramento executem.
   </para>
   <note>
    <para>
     Destrutores chamados durante o encerramento da execução do script já enviaram os cabeçalhos HTTP.
     O diretório atual na fase de encerramento do script pode ser diferente
     em alguns SAPIs (e.g. Apache).
    </para>
   </note>
   <note>
    <para>
     Tentar disparar uma exceção em um destrutor (chamado no término
     do script), lançará um erro fatal.
    </para>
   </note>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
