<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cd2980a57a0845def25ed84276d9662159a91bd5 Maintainer: leonardolara Status: ready -->
<sect1 xml:id="language.oop5.property-hooks" xmlns="http://docbook.org/ns/docbook">
 <title>Ganchos de Propriedade</title>

 <simpara>
  Ganchos de propriedade, também conhecidos como "acessadores de propriedade" em algumas outras linguagens,
  são uma forma de interceptar e substituir o comportamento de leitura e gravação de uma propriedade.
  Esta funcionalidade tem dois propósitos:
 </simpara>
 <orderedlist>
  <listitem>
   <simpara>
    Permite que as propriedades sejam usadas diretamente, sem os métodos 'get' e 'set',
    deixando aberta a opção de incluir comportamento adicional no futuro.
    Isso torna desnecessários a maioria dos métodos 'get'/'set' padronizados,
    mesmo sem usar ganchos.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Permite propriedades que descrevem um objeto sem a necessidade de armazenar
    um valor diretamente.
   </simpara>
  </listitem>
 </orderedlist>
 <simpara>
  Existem dois ganchos disponíveis em propriedades não estáticas: <literal>get</literal> e <literal>set</literal>.
  Eles permitem substituir o comportamento de leitura e gravação de uma propriedade, respectivamente.
  Os ganchos estão disponíveis para propriedades tipadas e não tipadas.
 </simpara>
 <simpara>
  Uma propriedade pode ser "apoiada" ou "virtual".
  Uma propriedade apoiada é aquela que realmente armazena um valor.
  Qualquer propriedade que não tenha ganchos será apoiada.
  Uma propriedade virtual é aquela que possui ganchos e esses ganchos não interagem com a propriedade em si.
  Nesse caso, os ganchos são efetivamente iguais aos métodos,
  e o objeto não usa nenhum espaço para armazenar um valor para aquela propriedade.
 </simpara>
 <simpara>
  Ganchos de propriedade são incompatíveis com propriedades <literal>readonly</literal> (somente-leitura).
  Se houver necessidade de restringir acesso a uma operação <literal>get</literal> ou <literal>set</literal>
  além de alterar seu comportamento, deve ser usada a
  <link linkend="language.oop5.visibility-members-aviz">visibilidade de propriedade assimétrica</link>.
 </simpara>

 <note>
  <title>Informação de Versão</title>
  <simpara>
   Ganchos de Propriedade foram introduzidos no PHP 8.4.
  </simpara>
 </note>

 <sect2>
  <title>Sintaxe Básica de Gancho</title>
  <simpara>
   A sintaxe geral para declarar um gancho é a seguinte.
  </simpara>
  <example>
   <title>Ganchos de propriedade (versão completa)</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get {
            if ($this->modified) {
                return $this->foo . ' (modified)';
            }
            return $this->foo;
        }
        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}

$example = new Example();
$example->foo = 'changed';
print $example->foo;
?>
]]>
   </programlisting>
  </example>
  <simpara>
   A propriedade <varname>$foo</varname> termina com <literal>{}</literal>, em vez de ponto e vírgula.
   Isso indica a presença de ganchos.
   Ambos os ganchos <literal>get</literal> e <literal>set</literal> são definidos,
   embora seja permitido definir apenas um ou outro.
   Ambos os ganchos possuem um corpo, indicado por <literal>{}</literal>, que pode conter código arbitrário.
  </simpara>
  <simpara>
   O gancho <literal>set</literal> permite adicionalmente especificar o tipo e o nome de um valor recebido,
   usando a mesma sintaxe de um método.
   O tipo deve ser igual ao tipo da propriedade
   ou uma <link linkend="language.oop5.variance.contravariance">contravariante</link> (mais amplo) a ela.
   Por exemplo, uma propriedade do tipo <type>string</type> poderia ter um
   gancho <literal>set</literal> que aceita <type class="union"><type>string</type><type>Stringable</type></type>,
   mas não aquele que aceita apenas <type>array</type>.
  </simpara>
  <simpara>
   Pelo menos um dos ganchos faz referência a <code>$this->foo</code>, a própria propriedade.
   Isso significa que a propriedade será "apoiada".
   Ao chamar <code>$example->foo = 'changed'</code>,
   a string fornecida será primeiro convertida em minúsculas e depois salva no valor de apoio.
   Ao ler a propriedade, o valor salvo anteriormente pode ser anexado condicionalmente
   com texto adicional.
  </simpara>
  <simpara>
   Existem também várias variantes de sintaxe abreviada para lidar com casos comuns.
  </simpara>
  <simpara>
   Se o gancho <literal>get</literal> for uma expressão única,
   <literal>{}</literal> poderá ser omitido e substituído por uma expressão de seta.
  </simpara>
  <example>
   <title>Expressão para leitura de propriedade</title>
   <simpara>
    Este exemplo é equivalente ao anterior.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');

        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Se o tipo de parâmetro do gancho <literal>set</literal> for igual ao tipo de propriedade (o que é típico),
   ele poderá ser omitido.  Nesse caso, o valor a ser definido recebe automaticamente o nome <varname>$value</varname>.
  </simpara>
  <example>
   <title>Padrão de definição de propriedade</title>
   <simpara>
    Este exemplo é equivalente ao anterior.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');

        set {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Se o gancho <literal>set</literal> estiver apenas definindo uma versão modificada do valor passado,
   então ele também poderá ser simplificado para uma expressão de seta.
   O valor avaliado pela expressão será definido no valor de apoio.
  </simpara>
  <example>
   <title>Expressão para definição de propriedade</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');
        set => strtolower($value);
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Este exemplo não é exatamente equivalente ao anterior,
   pois também não modifica <code>$this->modified</code>.
   Se várias instruções forem necessárias no corpo do gancho definido, use a versão entre chaves.
  </simpara>
  <simpara>
   Uma propriedade pode implementar zero, um ou ambos os ganchos conforme a situação exigir.
   Todas as versões abreviadas são mutuamente independentes.
   Ou seja, usar um 'get' curto com um 'set' longo,
   ou um 'set' curto com um tipo explícito, ou assim por diante, é válido.
  </simpara>
  <simpara>
   Em uma propriedade apoiada, omitir um gancho <literal>get</literal> ou <literal>set</literal>
   significa que o comportamento padrão de leitura ou gravação será usado.
  </simpara>
  <note>
   <simpara>
    Ganchos podem ser definidos ao usar
    <link linkend="language.oop5.decon.constructor.promotion">promoção de propriedade de construtor</link>.
    No entanto, quando isso é feito, os valores fornecidos
    ao construtor precisam ter o tipo associado à propriedade correspondido,
    independentemente do que o gancho <literal>set</literal> possa permitir.
   </simpara>
   <simpara>
    Considere o seguinte:
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(
        public private(set) DateTimeInterface $created {
            set (string|DateTimeInterface $value) {
                if (is_string($value)) {
                    $value = new DateTimeImmutable($value);
                }
                $this->created = $value;
            }
        },
    ) {
    }
}
]]>
   </programlisting>
   <simpara>
    Internamente, o mecanismo decompõe para o seguinte:
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public private(set) DateTimeInterface $created {
        set (string|DateTimeInterface $value) {
            if (is_string($value)) {
                $value = new DateTimeImmutable($value);
            }
            $this->created = $value;
        }
    }

    public function __construct(
        DateTimeInterface $created,
    ) {
        $this->created = $created;
    }
}
]]>
   </programlisting>
   <simpara>
    Quaisquer tentativas de definir a propriedade fora do construtor
    permitirão valores do tipo <type>string</type> ou <interfacename>DateTimeInterface</interfacename>
    mas o construtor permitirá apenas <interfacename>DateTimeInterface</interfacename>.
    Isto acontece porque o tipo definido para a propriedade (<interfacename>DateTimeInterface</interfacename>)
    é usado como o tipo do parâmetro dentro da assinatura do construtor, não importando o que
    o gancho <literal>set</literal> permite.
   </simpara>
   <simpara>
    Se este tipo de comportamento do construtor for necessário, a promoção de
    propriedade no construtor não pode ser usada.
   </simpara>
  </note>
 </sect2>
 <sect2 xml:id="language.oop5.property-hooks.virtual">
  <title>Propriedades virtuais</title>
  <simpara>
   Propriedades virtuais são propriedades que não possuem valor de apoio.
   Uma propriedade é virtual se nem seu gancho <literal>get</literal>
   nem seu gancho <literal>set</literal> fizerem referência à própria propriedade usando sintaxe exata.
   Ou seja, uma propriedade chamada <code>$foo</code> cujo gancho contém <code>$this->foo</code> será apoiada.
   Mas a seguinte não é uma propriedade apoiada e causará erro:
  </simpara>
  <example>
   <title>Propriedade virtual inválida</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo {
        get {
            $temp = __PROPERTY__;
            return $this->$temp; // Não faz referência a $this->foo, por isso não é válida.
        }
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Para propriedades virtuais, se um gancho for omitido, essa operação
   não existe e tentar usá-la produzirá um erro.
   As propriedades virtuais não ocupam espaço de memória em um objeto.
   As propriedades virtuais são adequadas para propriedades "derivadas",
   como aquelas que são a combinação de duas outras propriedades.
  </simpara>
  <example>
   <title>Propriedade virtual</title>
   <programlisting role="php">
<![CDATA[
<?php
class Rectangle
{
    // Uma propriedade virtual.
    public int $area {
        get => $this->h * $this->w;
    }

    public function __construct(public int $h, public int $w) {}
}

$s = new Rectangle(4, 5);
print $s->area; // exibe 20
$s->area = 30; // Erro, pois não há operação 'set' definida.
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Definir ambos os ganchos <literal>get</literal> e <literal>set</literal> em uma propriedade virtual também é permitido.
  </simpara>
 </sect2>
 <sect2>
  <title>Escopo</title>
  <simpara>
   Todos os ganchos operam no escopo do objeto que está sendo modificado.
   Isso significa que eles têm acesso a todos os métodos públicos, privados ou protegidos do objeto,
   bem como a quaisquer propriedades públicas, privadas ou protegidas,
   incluindo propriedades que possam ter seus próprios ganchos de propriedade.
   Acessar outra propriedade de dentro de um gancho não ignora os ganchos definidos nesta propriedade.
  </simpara>
  <simpara>
   A implicação mais notável disso é que ganchos não triviais podem fazer subchamadas
   a um método arbitrariamente complexo, se desejarem.
  </simpara>
  <example>
   <title>Chamando um método a partir de um gancho</title>
   <programlisting role="php">
<![CDATA[
<?php
class Person {
    public string $phone {
        set => $this->sanitizePhone($value);
    }

    private function sanitizePhone(string $value): string {
        $value = ltrim($value, '+');
        $value = ltrim($value, '1');

        if (!preg_match('/\d\d\d\-\d\d\d\-\d\d\d\d/', $value)) {
            throw new \InvalidArgumentException();
        }
        return $value;
    }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>
 <sect2>
  <title>Referências</title>
  <simpara>
   Como a presença de ganchos intercepta o processo de leitura e gravação de propriedades,
   eles causam problemas ao adquirir uma referência a uma propriedade ou com modificação
   indireta, como <code>$this->arrayProp['chave'] = 'valor';</code>.
   Isso ocorre porque qualquer tentativa de modificação do valor por referência ignoraria um gancho 'set',
   se algum estiver definido.
  </simpara>
  <simpara>
   No caso raro de ser necessário obter uma referência a uma propriedade que tenha ganchos definidos,
   o gancho <literal>get</literal> pode ser prefixado com <literal>&amp;</literal>
   para fazer com que ele retorne por referência.
   Definir <literal>get</literal> e <literal>&amp;get</literal> na
   mesma propriedade é um erro de sintaxe.
  </simpara>
  <simpara>
   Não é permitido definir ganchos <literal>&amp;get</literal> e <literal>set</literal> em uma propriedade apoiada.
   Conforme observado acima, escrever no valor retornado por referência ignoraria o gancho <literal>set</literal>.
   Nas propriedades virtuais, não há nenhum valor comum necessário compartilhado entre os dois ganchos, portanto, é permitido definir ambos.
  </simpara>
  <simpara>
   Escrever em um índice de uma propriedade de array também envolve uma referência implícita.
   Por esse motivo, gravar em uma propriedade de array apoiada com ganchos definidos é
   permitido se e somente se ela definir apenas um gancho <literal>&amp;get</literal>.
   Em uma propriedade virtual, escrever no array retornado de
   <literal>get</literal> ou <literal>&amp;get</literal> é legal,
   mas se isso terá algum impacto no objeto depende da implementação do gancho.
  </simpara>
  <simpara>
   Substituir toda a propriedade do array é aceitável e se comporta da mesma forma que qualquer outra propriedade.
   Trabalhar apenas com elementos do array requer cuidados especiais.
  </simpara>
 </sect2>
 <sect2>
  <title>Herança</title>
  <sect3>
   <title>Ganchos finais</title>
   <simpara>
    Um gancho pode também ser declarado como <link linkend="language.oop5.final">final</link>,
    neste caso ele não pode ser substituído.
   </simpara>
   <example>
    <title>Ganchos finais</title>
    <programlisting role="php">
<![CDATA[
<?php
class User
{
    public string $username {
        final set => strtolower($value);
    }
}

class Manager extends User
{
    public string $username {
        // Isto é permitido
        get => strtoupper($this->username);

        // Mas isto NÃO é permitido, porque 'set' é final na classe superior.
        set => strtoupper($value);
    }
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Uma propriedade também pode ser declarada como <link linkend="language.oop5.final">final</link>.
    Uma propriedade final não pode ser declarada novamente por uma classe filha de forma alguma,
    o que impede a alteração de ganchos ou a ampliação de seu acesso.
   </simpara>
   <simpara>
    Declarar ganchos como finais em uma propriedade declarada como final é redundante
    e será silenciosamente ignorado.
    Este é o mesmo comportamento dos métodos finais.
   </simpara>
   <simpara>
    Uma classe filha pode definir ou redefinir ganchos individuais em uma propriedade
    redefinindo a propriedade e apenas os ganchos que deseja substituir.
    Uma classe filha também pode adicionar ganchos a uma propriedade que não possui nenhum.
    Isto é, essencialmente, como se os ganchos fossem métodos.
   </simpara>
   <example>
    <title>Herança de gancho</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point
{
    public int $x;
    public int $y;
}

class PositivePoint extends Point
{
    public int $x {
        set {
            if ($value < 0) {
                throw new \InvalidArgumentException('Muito pequeno');
            }
            $this->x = $value;
        }
    }
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Cada gancho substitui as implementações pai independentemente umas das outras.
    Se uma classe filha adicionar ganchos, qualquer valor padrão definido na propriedade será removido e deverá ser declarado novamente.
    Isso é consistente com o modo como a herança funciona em propriedades sem gancho.
   </simpara>
  </sect3>
  <sect3>
   <title>Acessando ganchos pais</title>
   <simpara>
    Um gancho em uma classe filha pode acessar a propriedade da classe pai usando a
    palavra-chave <code>parent::$prop</code>, seguida pelo gancho desejado.
    Por exemplo, <code>parent::$propName::get()</code>.
    Pode ser lido como "acessar a <varname>prop</varname> definida na classe pai
    e então executar sua operação 'get'" (ou operação 'set', conforme apropriado).
   </simpara>
   <simpara>
    Se não for acessado dessa forma, o gancho da classe pai será ignorado.
    Esse comportamento é consistente com o funcionamento de todos os métodos.
    Isso também oferece uma maneira de acessar o armazenamento da classe pai, se houver.
    Se não houver gancho na propriedade pai,
    seu comportamento 'get'/'set' padrão será usado.
    Os ganchos não podem acessar nenhum outro gancho, exceto seu próprio pai em sua própria propriedade.
   </simpara>
   <simpara>
    O exemplo acima poderia ser reescrito da seguinte maneira, que permitiria que
    a classe <literal>Point</literal> adicionasse seu próprio grancho <literal>set</literal>
    no futuro sem problemas (no exemplo anterior, um gancho adicionado à
    classe pai seria ignorado na classe filha).
   </simpara>
   <example>
    <title>Acessando gancho pai ('set')</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point
{
    public int $x;
    public int $y;
}

class PositivePoint extends Point
{
    public int $x {
        set {
            if ($value < 0) {
                throw new \InvalidArgumentException('Muito pequeno');
            }
            parent::$x::set($value);
        }
    }
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Um exemplo de substituição apenas de um gancho 'get' poderia ser:
   </simpara>
   <example>
    <title>Acessando gancho pai ('get')</title>
    <programlisting role="php">
<![CDATA[
<?php
class Strings
{
    public string $val;
}

class CaseFoldingStrings extends Strings
{
    public bool $uppercase = true;

    public string $val {
        get => $this->uppercase
            ? strtoupper(parent::$val::get())
            : strtolower(parent::$val::get());
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect3>
 </sect2>
 <sect2>
  <title>Serialização</title>
  <simpara>
   O PHP possui diversas maneiras diferentes pelas quais um objeto pode ser serializado,
   seja para consumo público ou para fins de depuração.
   O comportamento dos ganchos varia dependendo do caso de uso.
   Em alguns casos, o valor bruto de apoio de uma propriedade será usado,
   ignorando quaisquer ganchos.
   Em outros, a propriedade será lida ou escrita "através" do gancho,
   assim como qualquer outra ação normal de leitura/gravação.
  </simpara>
  <simplelist>
   <member><function>var_dump</function>: Usa valor bruto</member>
   <member><function>serialize</function>: Usa valor bruto</member>
   <member><function>unserialize</function>: Usa valor bruto</member>
   <member><link linkend="object.serialize">__serialize()</link>/<link linkend="object.unserialize">__unserialize()</link>: Lógica customizada, usa gancho 'get'/'set'</member>
   <member>Conversão de array: Usa valor bruto</member>
   <member><function>var_export</function>: Usa gancho 'get'</member>
   <member><function>json_encode</function>: Usa gancho 'get'</member>
   <member><interfacename>JsonSerializable</interfacename>: Lógica customizada, usa gancho 'get'</member>
   <member><function>get_object_vars</function>: Usa gancho 'get'</member>
   <member><function>get_mangled_object_vars</function>: Usa valor bruto</member>
  </simplelist>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
