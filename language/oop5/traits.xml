<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7341710fa635b4a969bc855a1e4619cdfa6b63f1 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
 <sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
  <title>Traits</title>
  <para>
   O PHP implementa uma maneira de reúso de código chamada Traits.
  </para>
  <para>
   Traits (Traços, Carecterísticas) são um mecanismo para reúso de código em linguagens de herança simples
   como o PHP. A intenção de uma Trait é reduzir algumas limitações de herança simples
   permitindo que um desenvolvedor reutilize livremente conjuntos de métodos em várias classes
   independentes habitando em diferentes hierarquias de classe. A semântica da combinação
   de Traits e classes é definida de uma maneira que reduz a complexidade, e evita
   os problemas típicos associados com herança múltipla e Mixins.
  </para>
  <para>
   Uma Trait é similar a uma classe, mas destina-se apenas a agrupar funcionalidade de uma
   forma refinada e consistente. Não é possível instanciar uma Trait por
   si só. Ela é uma adição à herança tradicional e permite composição e
   comportamento horizontais; isto é, a aplicação de membros de classe sem
   exigir herança.
  </para>
  <example xml:id="language.oop5.traits.basicexample">
    <title>Exemplo de Trait</title>
    <programlisting role="php">
<![CDATA[
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>
]]>
    </programlisting>
   </example>

  <sect2 xml:id="language.oop5.traits.precedence">
   <title>Precedência</title>
   <para>
    Um membro herdado de uma classe base é substituído por um membro inserido
    por uma Trait. Na ordem de precedência, os membros da classe atual
    substituem os métodos da Trait, que por sua vez substituem os métodos herdados.
   </para>
   <example xml:id="language.oop5.traits.precedence.examples.ex1">
    <title>Exemplo de Ordem de Precedência</title>
    <para>
     Um membro herdado de uma classe base é substituído pelo
     método inserido em MyHelloWorld da Trait SayWorld. O comportamento é
     o mesmo para métodos definidos na classe MyHelloWorld. Na ordem de precedência,
     os métodos da classe atual sobrescrevem os métodos da Trait, que por sua
     vez substituem os métodos da classe base.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.precedence.examples.ex2">
    <title>Exemplo de Ordem de Precedência Alternativa</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough {
    use HelloWorld;
    public function sayHello() {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello Universe!
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.multiple">
   <title>Traits Múltiplas</title>
   <para>
    Traits múltiplas podem ser inseridas em uma classe, listando-as na declaração
    <literal>use</literal>, separadas por vírgulas.
   </para>
   <example xml:id="language.oop5.traits.multiple.ex1">
    <title>Uso de Traits Múltiplas</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.conflict">
   <title>Resolução de Conflitos</title>
   <para>
    Se duas Trais inserem dois métodos com o mesmo nome, um erro fatal é gerado,
    se o conflito não for explicitamente resolvido.
   </para>
   <para>
    Para resolver conflitos de nomes entre Traits usados na mesma classe,
    o operador <literal>insteadof</literal> deve ser usado para escolher exatamente
    um dos métodos conflitantes.
   </para>
   <para>
    Como isto permite apenas excluir métodos, o operador
    <literal>as</literal> pode ser usado para adicionar um apelido a um dos métodos. Note que
    o operador <literal>as</literal> não renomeia o método e também não
    afeta nenhum outro método.
   </para>
   <example xml:id="language.oop5.traits.conflict.ex1">
    <title>Exemplo de Resolução de Conflito</title>
    <para>
      Neste exemplo, Talker usa as Traits A e B.
      Como A e B possuem métodos conflitantes, a classe define
      a variante de smallTalk da Trait B, e a variante bigTalk da
      Trait A.
    </para>
    <para>
      A classe Aliased_Talker usa o operador <literal>as</literal>
      para perrmitir o uso da implementação bigTalk da Trait B sob um apelido adicional
      <literal>talk</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.visibility">
   <title>Mudando a Visibilidade de Método</title>
   <para>
    Ao utilizar a sintaxe <literal>as</literal>, pode-se também ajustar a visibilidade
    de métodos na classe.
   </para>
   <example xml:id="language.oop5.traits.visibility.ex1">
    <title>Exemplo de Mudança de Visibilidade de Método</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// Modifica a visibilidade de sayHello
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// Apelido de método com visibilidade modificada
// Visibilidade de sayHello não é modificada
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.composition">
   <title>Traits Compostas de Traits</title>
   <para>
    Assim como as classes podem usar Trais, outros Traits tamém podem. Ao utilizar uma
    ou mais Traits em uma definição de Trait, ela pode ser comporta parcialmente ou
    integralmente dos membros definidos nessas outras Traits.
   </para>
   <example xml:id="language.oop5.traits.composition.ex1">
    <title>Exemplo de Traits Compostas de Traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.abstract">
   <title>Membros abstratos de Traits</title>
   <para>
    Traits suportam o uso de métodos abstratos para impor requisitos
    sobre uma classe expositora. Métodos públicos, protegidos e privados são suportados.
    Antes do PHP 8.0.0, apenas métodos abstratos públicos e protegidos eram suportados.
   </para>
   <caution>
    <simpara>
     A partir do PHP 8.0.0, a assinatura de um método concreto deverá seguir as
     <link linkend="language.oop.lsp">regras de compatibilidade de assinaturas</link>.
     Anteriormente, sua assinatura poderia ser diferente.
    </simpara>
   </caution>
   <example xml:id="language.oop5.traits.abstract.ex1">
    <title>Requisitos Expressos por Métodos Abstratos</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHelloWorld() {
        echo 'Hello'.$this->getWorld();
    }
    abstract public function getWorld();
}

class MyHelloWorld {
    private $world;
    use Hello;
    public function getWorld() {
        return $this->world;
    }
    public function setWorld($val) {
        $this->world = $val;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.static">
   <title>Membros Estáticos de Traits</title>
   <para>
    Traits podem definir variáveis estáticas, métodos estáticos e propriedades estáticas.
   </para>
   <note>
    <para>
     A partir do PHP 8.1.0, chamar um métod estático, ou acessar uma propriedade estática diretamente em uma Trait tornou-se obsoleto.
     Métods estáticos e propriedades somente devem ser acessados em uma classe utilizando a Trait.
    </para>
   </note>
   <example xml:id="language.oop5.traits.static.ex1">
    <title>Variáveis Estáticas</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Counter {
    public function inc() {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1 {
    use Counter;
}

class C2 {
    use Counter;
}

$o = new C1(); $o->inc(); // echo 1
$p = new C2(); $p->inc(); // echo 1
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.static.ex2">
    <title>Métodos Estáticos</title>
    <programlisting role="php">
<![CDATA[
<?php
trait StaticExample {
    public static function doSomething() {
        return 'Doing something';
    }
}

class Example {
    use StaticExample;
}

Example::doSomething();
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.static.ex3">
    <title>Propriedades Estáticas</title>
    <programlisting role="php">
     <![CDATA[
<?php
trait StaticExample {
    public static $static = 'foo';
}

class Example {
    use StaticExample;
}

echo Example::$static;
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.traits.properties">
   <title>Propriedades</title>
   <para>
    Traits podem também definir propriedades.
   </para>
   <example xml:id="language.oop5.traits.properties.example">
    <title>Definindo Propriedades</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $x = 1;
}

class PropertiesExample {
    use PropertiesTrait;
}

$example = new PropertiesExample;
$example->x;
?>
]]>
    </programlisting>
   </example>
   <para>
    Se uma Trait define uma propriedade, uma classe não pode definir uma propriedade com
    o mesmo nome a menos que seja compatível (mesma visibilidade, tipo,
    modificador de somente-leitura e valor inicial), caso contrário um erro fatal é emitido.
   </para>
   <example xml:id="language.oop5.traits.properties.conflicts">
    <title>Resolução de Conflito</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $same = true;
    public $different1 = false;
    public bool $different2;
    public bool $different3;
}

class PropertiesExample {
    use PropertiesTrait;
    public $same = true;
    public $different1 = true; // Fatal error
    public string $different2; // Fatal error
    readonly protected bool $different3; // Fatal error
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

 <sect2 xml:id="language.oop5.traits.constants">
  <title>&Constants;</title>
  <para>
   Traits podem, a partir do PHP 8.2.0, também definir constantes.
  </para>
  <example xml:id="language.oop5.traits.constants.example">
   <title>Definindo Constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
}

$example = new ConstantsExample;
echo $example::FLAG_MUTABLE; // 1
?>
]]>
   </programlisting>
  </example>
  <para>
   Se uma Trait define uma constante, uma classe não pode definir uma constante com
   o mesmo nome a não ser que seja compatível (mesma visibilidade, valor inicial, e
   finalidade), caso contrário um erro fatal é emitido.
  </para>
  <example xml:id="language.oop5.traits.constants.conflicts">
   <title>Resolução de Conflito</title>
   <programlisting role="php">
<![CDATA[
<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
    public const FLAG_IMMUTABLE = 5; // Fatal error
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
