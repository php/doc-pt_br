<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 009f215fc983eeded6161676bcffdd8cf3b6b080 Maintainer: leonardolara Status: ready --><!-- CREDITS: felipe, fabioluciano, leonardolara -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>Vinculações Estáticas Tardias</title>
  <para>
   O PHP implementa um recurso chamado Vinculações Estáticas Tardias que
   pode ser usado para referenciar a classe chamada no contexto de herança estática.
  </para>

  <para>
   Mais precisamente, as Vinculações Estáticas Tardias funcionam através do armazenamento do nome da classe na
   última "chamada não encaminhada". No caso de chamadas a métodos estáticos, é a
   classe explicitamente chamada (normalmente o nome à esquerda do operador
   <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>);
   no caso de chamadas a métodos não estáticos, é o nome da classe do objeto. Uma
   "chamada encaminhada" é àquela estática, realizada pelos prefixos <literal>self::</literal>,
   <literal>parent::</literal>, <literal>static::</literal>, ou, se subindo
   na hierarquia de classes, <function>forward_static_call</function>.
   <!-- technically, static:: may be non forwarding, but it's irrelevant -->

   A função <function>get_called_class</function> pode ser utilizada para recuperar
   uma string com o nome da classe chamada e <literal>static::</literal>
   introduz seu escopo.
  </para>

  <para>
   Esse recurso foi chamado de "Vinculações Estáticas Tardias" de uma perspectiva interna em
   mente. "Vinculação tardia" vem do fato que <literal>static::</literal>
   não será resolvido usando a classe onde o método foi definido, mas
   computada utilizando informações em tempo de execução.

   É também chamado "vinculação estática" pois pode ser utilizado em (mas não
   limitado a) chamadas de métodos estáticos.
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title>Limitações do <literal>self::</literal></title>
   <para>
    Referências estáticas para a atual classe como <literal>self::</literal> ou
    <literal>__CLASS__</literal> são resolvidas usando a classe na qual
    a função pertence, como onde ele foi definido:
   </para>
   <example>
    <title>Uso do <literal>self::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function who()
    {
        echo __CLASS__;
    }

    public static function test()
    {
        self::who();
    }
}

class B extends A
{
    public static function who()
    {
        echo __CLASS__;
    }
}

B::test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>Uso de Vinculações Estáticas Tardias</title>

   <para>
    Vinculações Estáticas Tardias tentam resolver a limitação introduzindo uma
    palavra-chave que referencia a classe que foi inicialmente chamada em tempo de execução.
    Basicamente, é uma palavra-chave que permite referenciar
    <literal>B</literal> em <literal>test()</literal>, no exemplo
    anterior. Foi decidido não introduzir uma nova palavra-chave, mas usar
    <literal>static</literal>, já reservada.
   </para>

   <example>
    <title>Uso simples de <literal>static::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function who()
    {
        echo __CLASS__;
    }

    public static function test()
    {
        static::who(); // Aqui acontecem as Vinculações Estáticas Tardias
    }
}

class B extends A
{
    public static function who()
    {
        echo __CLASS__;
    }
}

B::test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     Em contextos não estáticos, a classe chamada será a classe da instância
     do objeto. Assim como <literal>$this-></literal> chamará métodos privados
     do mesmo escopo, utilizar <literal>static::</literal> pode ter
     resultados diferentes. Outra diferença é que <literal>static::</literal>
     só pode referenciar propriedades estáticas.
    </para>
   </note>
   <example>
    <title>Uso de <literal>static::</literal> em um contexto não-estático</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    private function foo()
    {
        echo "successo!\n";
    }

    public function test()
    {
        $this->foo();
        static::foo();
    }
}

class B extends A
{
   /* foo() será copiado para B, assim seu escopo ainda será A e
    * e a chamada funcionará */
}

class C extends A
{
    private function foo()
    {
        /* método original foi substituído, escopo agora é C */
    }
}

$b = new B();
$b->test();

$c = new C();
try {
    $c->test();
} catch (Error $e) {
    echo $e->getMessage();
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
successo!
successo!
successo!
Call to private method C::foo() from scope A
]]>
    </screen>
   </example>
   <note>
    <para>
     As resoluções de Vinculações Estáticas Tardias terminarão quando a chamada for realizada
     sem retorno. Por outro lado, chamadas estáticas utilizando instruções como
     <literal>parent::</literal> ou <literal>self::</literal> irão repassar a informação
     do chamador.
    </para>
    <example>
     <title>Chamadas repassadas e não repassadas</title>
     <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function foo()
    {
        static::who();
    }

    public static function who()
    {
        echo __CLASS__."\n";
    }
}

class B extends A
{
    public static function test()
    {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who()
    {
        echo __CLASS__."\n";
    }
}

class C extends B
{
    public static function who()
    {
        echo __CLASS__."\n";
    }
}

C::test();

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
