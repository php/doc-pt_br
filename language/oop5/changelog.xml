<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8d181538611c512546ac394511aa1d8e900dd9a3 Maintainer: adiel Status: ready --><!-- CREDITS: fabioluciano, rogeriopradoj, adiel -->
<sect1 xml:id="language.oop5.changelog" xmlns="http://docbook.org/ns/docbook">
 <title>Lista de alterações da POO</title>
 <para>
  As alterações no modelo de POO do PHP são registradas aqui. Descrições e outras notas
  relacionadas a estes recursos estão documentadas na documentação do modelo POO.
 </para>
 <para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.1.0</entry>
      <entry>
       Adicionado: suporte ao modificador <modifier>final</modifier> para constantes de classe. Além disso, as constantes de interface agora são substituíveis por padrão.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Adicionado: suporte ao <link linkend="language.oop5.basic.nullsafe">operador nullsafe</link> <emphasis>?-&gt;</emphasis> para acessar propriedades e métodos em objetos que podem ser nulos.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Alterado: agora é possível lançar uma exceção dentro de
       <function>__toString</function>.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Adicionado: suporte a covariância limitada de tipo de retorno e contravariância
       de tipo de argumento. O suporte completo à variância só estará disponível se o
       carregamento automático for usado. Dentro de um único arquivo, apenas
       referências de tipo não cíclicas são possíveis.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Adicionado: agora é possível usar tipos nas propriedades da classe.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Incompatibilidade: o desempacotamento de argumentos com instâncias de
       <classname>Traversable</classname> com chaves não-&integer; não é mais
       suportado. Esse comportamento não era intencional e, portanto, foi removido.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Incompatibilidade: nas versões anteriores era possível separar as
       propriedades estáticas atribuindo uma referência. Isso foi removido.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Alterado: o operador <link linkend="language.operators.type">instanceof</link>
       agora permite literais como o primeiro operando, caso em que o resultado
       é sempre &false;.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Defasado: a função <function>__autoload</function> tornou-se obsoleta em
       favor da função <function>spl_autoload_register</function>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Alterado: o seguinte nome não pode ser usado para nomear classes,
       interfaces ou traits: <literal>object</literal>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Alterado: uma vírgula à direita agora pode ser adicionada à sintaxe de
       agrupamento de use para namespaces.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Alterado: extensão do tipo de parâmetro. Os tipos de parâmetro de métodos
       sobrescritos e de implementações de interface agora podem ser omitidos.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Alterado: métodos abstratos agora podem ser sobrescritos quando uma
       classe abstrata estende outra classe abstrata.
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Alterado: os nomes a seguir não podem ser usados para nomear classes,
       interfaces ou traits: <literal>void</literal>
       e <literal>iterable</literal>.
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Adicionado: agora é possível especificar a
       <link linkend="language.oop5.visiblity-constants">visibilidade das constantes de classe</link>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Defasado: chamadas <link linkend="language.oop5.static">estáticas</link>
       a métodos que não são declarados estáticos.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Defasado: <link linkend="language.oop5.decon">construtor</link>
       no estilo do PHP 4.
       Ou seja, métodos com o mesmo nome da classe em que eles são definidos.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Adicionado: a declaração <emphasis>use</emphasis> de grupo: classes,
       funções e constantes importadas do mesmo namespace agora podem ser
       agrupadas em uma única declaração use.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Adicionado: o suporte a
       <link linkend="language.oop5.anonymous">classes anônimas</link>
       foi adicionado via <literal>new class</literal>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Incompatibilidade: iterar sobre um &object; que não seja uma instância de
       <classname>Traversable</classname> agora terá o mesmo comportamento que
       iterar sobre &array;s por referência.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Alterado: definir propriedades (compatíveis) em duas
       <link linkend="language.oop5.traits">traits</link>
       não dispara mais um erro.
      </entry>
     </row>
     <row>
      <entry>5.6.0</entry>
      <entry>
       Adicionado: o método <link linkend="object.debuginfo">__debugInfo()</link>.
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       Adicionado: a constante mágica <link linkend="language.oop5.basic.class.class">::class</link>.
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       Adicionado: <link linkend="language.exceptions">finally</link> para manipular exceções.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Adicionado: <link linkend="language.oop5.traits">traits</link>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Alterado: se uma classe <link linkend="language.oop5.abstract">abstrata</link>
       definir uma assinatura para o <link linkend="language.oop5.decon">construtor</link>,
       agora ela será imposta.
      </entry>
     </row>
     <row>
      <entry>5.3.3</entry>
      <entry>
       Alterado: métodos com o mesmo nome do último elemento de uma classe
       <link linkend="language.namespaces">com namespace</link>
       não serão mais tratados como
       <link linkend="language.oop5.decon">construtor</link>.
       Esta alteração não afeta classes sem namespace.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Alterado: classes que implementam interfaces com métodos que possuem
       valores padrão no protótipo não precisam mais corresponder ao valor
       padrão da interface.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Alterado: agora é possível referenciar a classe usando uma variável
       (por exemplo, <literal>echo $nome_da_classe::CONSTANTE;</literal>).
       O valor da variável não pode ser uma palavra-chave (por exemplo, <literal>self</literal>,
       <literal>parent</literal> ou <literal>static</literal>).
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Alterado: um erro de nível <constant>E_WARNING</constant> será emitido se
       os métodos mágicos de <link linkend="language.oop5.overloading">sobrecarga</link>
       forem declarados <link linkend="language.oop5.static">estáticos</link>.
       Também impõe o requisito de visibilidade pública.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Alterado: antes do PHP 5.3.0, as exceções lançadas na função
       <function>__autoload</function> não podiam ser capturadas no bloco
       <link linkend="language.exceptions">catch</link> e resultariam em um
       erro fatal. Agora as exceções lançadas na função __autoload podem ser
       capturadas no bloco <link linkend="language.exceptions">catch</link>,
       com uma condição. Se uma exceção personalizada for lançada, a classe de exceção
       personalizada deve estar disponível. A função __autoload pode ser usada recursivamente
       para carregar automaticamente a classe de exceção personalizada.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adicionado: o método <link linkend="language.oop5.overloading">__callStatic</link>.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adicionado: suporte a <link linkend="language.types.string.syntax.heredoc">heredoc</link>
       e <link linkend="language.types.string.syntax.nowdoc">nowdoc</link>
       nas definições de <emphasis>constantes</emphasis> e propriedades de classe.
       Nota: os valores heredoc devem seguir as mesmas regras que strings com
       aspas duplas, (por exemplo, sem variáveis dentro).
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adicionado: <link linkend="language.oop5.late-static-bindings">Late Static Bindings</link>.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adicionado: o método <link linkend="object.invoke">__invoke()</link>.
      </entry>
     </row>
     <row>
      <entry>5.2.0</entry>
      <entry>
       Alterado: o método <link linkend="object.tostring">__toString()</link>
       só era chamado quando combinado diretamente com
       <function>echo</function> ou <function>print</function>.
       Mas agora, ele é chamado em qualquer contexto de &string; (por exemplo,
       em <function>printf</function> com o modificador <literal>%s</literal>), mas não
       em outros contextos de tipos (por exemplo, com o modificador <literal>%d</literal>).
       A partir do PHP 5.2.0, a conversão de &object;s sem um
       método <link linkend="object.tostring">__toString</link> para &string;
       emitirá um erro de nível <constant>E_RECOVERABLE_ERROR</constant>.
      </entry>
     </row>
     <row>
      <entry>5.1.3</entry>
      <entry>
       Alterado: nas versões anteriores do PHP 5, o uso de <literal>var</literal>
       era considerado defasado e emitiria um erro de nível <constant>E_STRICT</constant>.
       Agora não é mais defasado, portanto não emite o erro.
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       Alterado: o método estático <link linkend="object.set-state">__set_state()</link>
       agora é chamado por classes exportadas com a função <function>var_export</function>.
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       Adicionado: os métodos <link linkend="object.isset">__isset()</link>
       e <link linkend="object.unset">__unset()</link>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
