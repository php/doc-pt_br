<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9463e5b660c4883b91a30f07ff68731bbcc48346 Maintainer: leonardolara Status: ready --><!-- CREDITS: ae,amandavale,felipe,leonardolara -->
 <chapter xml:id="language.references" xmlns="http://docbook.org/ns/docbook">
  <title>Referências</title>

  <sect1 xml:id="language.references.whatare">
   <title>O que são referências</title>
   <simpara>
    Referência em PHP significa acessar o mesmo conteúdo de variável
    através de vários nomes. Isto não é parecido com os ponteiros em C. Por exemplo,
    não é possível efetuar aritmética de ponteiros com referências, já que elas
    não são endereços de memória. Consulte
    <xref linkend="language.references.arent" /> para mais
    informações. Ao invés disso, elas são
    apelidos para <link linkend="features.gc.refcounting-basics">tabela de símbolos</link>.
    Observe que no PHP, um nome de variável e um conteúdo de variável são coisas diferentes, portanto o mesmo
    conteúdo pode ter nomes diferentes. A analogia mais próxima é com arquivos
    e nomes de arquivos Unix - os nomes de variáveis são como entradas de diretórios,
    enquanto que o conteúdo de variável é com o conteúdo do arquivo em si. Referências são
    parecidas com ligações concretas no sistema de arquivo Unix.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.whatdo">
   <title>O que as referências fazem</title>
   <para>
    Há três operações básicas ao se utilizar referências:
    <link linkend="language.references.whatdo.assign">atribuição por
    referência</link>, <link linkend="language.references.whatdo.pass">passagem
    por referência</link>,
    e <link linkend="language.references.whatdo.return">retorno por
    referência</link>. Esta seção fará uma introdução dessas
    operações, com atalhos para leituras posteriores.
   </para>
   <sect2 xml:id="language.references.whatdo.assign">
    <title>Atribuição por referência</title>
    <para>
     Referências no PHP permitem criar duas
     variáveis que se referem ao mesmo conteúdo. Ou seja, quando se faz:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$a =& $b;

?>
]]>
      </programlisting>
     </informalexample>
     <varname>$a</varname> e <varname>$b</varname>
     apontam para o mesmo conteúdo.
     <note>
      <para>
       <varname>$a</varname> e <varname>$b</varname> são completamente
       iguais aqui, mas não porque <varname>$a</varname> está apontando para
       <varname>$b</varname> ou vice-versa, mas sim que
       <varname>$a</varname> e <varname>$b</varname> apontam para o
       mesmo lugar.
      </para>
     </note>
    </para>
    <note>
     <para>
      Se uma variável indefinida for atribuída, passada ou retornada por referência,
      ela será criada.
      <example>
       <title>Usando referência com variáveis indefinidas</title>
       <programlisting role="php">
<![CDATA[
<?php

function foo(&$var) {}

foo($a); // $a é "criada" e definida como null

$b = array();
foo($b['b']);
var_dump(array_key_exists('b', $b)); // bool(true)

$c = new stdClass();
foo($c->d);
var_dump(property_exists($c, 'd')); // bool(true)

?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     A mesma sintaxe pode ser utilizada com funções que retornem
     referências:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$foo =& find_var($bar);

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Usar essa mesma sintaxe com uma função que <emphasis>não</emphasis>
     retorna por referência irá gerar um erro, da mesma forma no caso
     do operador <link linkend="language.oop5.basic.new">new</link>.
     Ainda que objetos sejam internamente passados como ponteiros, isso não é o mesmo que uma referência,
     como explicado em <link linkend="language.oop5.references">Objetos e Referências</link>.
    </para>
    <warning>
     <para>
      Se for atribuída uma referência para uma variável declarada <literal>global</literal>
      dentro da função, a referência será visível somente dentro da função.
      Pode-se evitar isso usando o array <varname>$GLOBALS</varname>.
      <example>
       <title>Referenciando variáveis globais de dentro de funções</title>
       <programlisting role="php">
<![CDATA[
<?php

$var1 = "Variável de exemplo";
$var2 = "";

function global_references($use_globals)
{
    global $var1, $var2;

    if (!$use_globals) {
        $var2 =& $var1; // visível somente dentro da função
    } else {
        $GLOBALS["var2"] =& $var1; // visível também no contexto global
    }
}

global_references(false);
echo "var2 é definida como '$var2'\n"; // var2 é definida como ''

global_references(true);
echo "var2 é definida como '$var2'\n"; // var2 é definida como 'Variável de exemplo'

?>
]]>
       </programlisting>
      </example>
      Veja <literal>global $var;</literal> como atalho para <literal>$var
      =&amp; $GLOBALS['var'];</literal>. Assim, atribuir outra referência
      para <literal>$var</literal> somente modifica a variável de referência local.
     </para>
    </warning>
    <note>
     <para>
      Se um valor for atribuído por referência a uma variável numa instrução
      &foreach;, a referência também é modificada.
      <example>
       <title>Referências e o comando foreach</title>
       <programlisting role="php">
<![CDATA[
<?php

$ref = 0;
$row =& $ref;

foreach (array(1, 2, 3) as $row) {
    // Faz alguma coisa
}

echo $ref; // 3 - último elemento do array iterado

?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     Ainda que não seja uma atribuição por referência explícita, expressões criadas
     com o construtor
     <link linkend="function.array"><literal>array()</literal></link> também podem
     se comportar como tais com o prefixo <literal>&amp;</literal> no elemento de array
     a ser acrescentado. Exemplo:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$a = 1;
$b = array(2, 3);

$arr = array(&$a, &$b[0], &$b[1]);
$arr[0]++;
$arr[1]++;
$arr[2]++;
/* $a == 2, $b == array(3, 4); */

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Note que referências dentro de arrays são potencialmente perigosas.
     Fazer uma atribuição normal (sem referência) com uma referência à
     direita não transforma a expressão a esquerda numa referência, mas referências
     dentro de arrays são preservadas nessas atribuições normais. Isso também se
     aplica a chamadas de função onde arrays são passados por valor. Exemplo:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

/* Atribuição de variáveis escalares */
$a = 1;
$b =& $a;
$c = $b;
$c = 7; // $c não é referência; não modifica $a ou $b

/* Atribuição de variáveis do array */
$arr = array(1);
$a =& $arr[0]; // $a e $arr[0] estão no mesmo conjunto de referências
$arr2 = $arr; // Não atribui por referência!
$arr2[0]++;
/* $a == 2, $arr == array(2) */
/* O conteúdo de $arr é modificado embora ele não seja uma referência! */

?>
]]>
      </programlisting>
     </informalexample>
     Em outras palavras, o comportamento de referências em arrays é definido
     elemento por elemento. O comportamento de referências dos elementos individuais
     é dissociado do status da referência do array que os contém.
    </para>
   </sect2>
   <sect2 xml:id="language.references.whatdo.pass">
    <title>Passagem por referência</title>
    <para>
     A segunda coisa que referências fazem é passar variáveis por
     referência. Isso é feito com a criação de uma variável local em uma função
     e uma variável no escopo chamador que referenciam o mesmo
     conteúdo. Assim:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);

?>
]]>
      </programlisting>
     </informalexample>
     a variável <varname>$a</varname> será 6 no final. Isto ocorre porque
     na função <varname>foo</varname> a variável
     <varname>$var</varname> se referem ao mesmo conteúdo de
     <varname>$a</varname>. Para mais informações disso veja
     a seção de <link linkend="language.references.pass">passagem por
     referência</link>.
    </para>
   </sect2>
   <sect2 xml:id="language.references.whatdo.return">
    <title>Retorno por referência</title>
    <para>
     A terceira coisa que as referências fazem é <link
     linkend="language.references.return">retorno por referência</link>.
    </para>
   </sect2>
  </sect1>

  <sect1 xml:id="language.references.arent">
   <title>O que referências não são</title>
   <para>
    Como dito anteriormente, referências não são ponteiros. Isso significa que
    a construção a seguir não funciona como se possa esperar:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

function foo(&$var)
{
    $var =& $GLOBALS["baz"];
}

foo($bar);

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    O que acontece é que <varname>$var</varname> em
    <varname>foo</varname> será ligada com
    <varname>$bar</varname> pelo chamador, mas depois será
    re-ligada com <varname>$GLOBALS["baz"]</varname>. Não há como
    ligar <varname>$bar</varname> no escopo chamador para outra coisa
    utilizando-se o mecanismo de referência, pois <varname>$bar</varname> não está
    disponível na função <varname>foo</varname> (ela é representada por
    <varname>$var</varname>, mas <varname>$var</varname> somente tem
    o conteúdo da variável e não a vinculação nome-valor na
    <link linkend="features.gc.refcounting-basics">tabela de símbolos</link> do chamador).
    Pode-se utilizar <link linkend="language.references.return">retorno por
    referência</link> para referenciar variáveis selecionadas pela função.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.pass">
   <title>Passagem por referência</title>
   <para>
   Uma variável pode ser passada por referência a uma função de forma que a função
   possa modificar a variável. A sintaxe é a seguinte:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

function foo(&$var)
{
    $var++;
}

$a=5;

foo($a);
// $a é 6 aqui

?>
]]>
     </programlisting>
    </informalexample>
    <note>
     <simpara>
      Não há o sinal de referência na chamada da função - apenas nas
      definições de função. As definições de função, sozinhas, são suficientes para
      passar o argumento por referência.
     </simpara>
    </note>
  </para>
  <para>
  Os itens seguintes podem ser passados por referência:
   <itemizedlist>
    <listitem>
     <simpara>
      Variáveis, como <literal>foo($a)</literal>
     </simpara>
    </listitem>
    <listitem>
     <para>
      Referências retornadas de funções, como:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

function foo(&$var)
{
    $var++;
}

function &bar()
{
    $a = 5;
    return $a;
}

foo(bar());

?>
]]>
     </programlisting>
    </informalexample>
    Veja mais sobre isso em <link
    linkend="language.references.return">retorno por referência</link>.
     </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>
  Nenhuma outra expressão pode ser passada por referência pois
  não tem comportamento definido. Os seguintes exemplos de passagem
  por referência são inválidos:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

function foo(&$var)
{
    $var++;
}

function bar() // Repare que falta &
{
    $a = 5;
    return $a;
}

foo(bar()); // Gera um aviso

foo($a = 5); // Expressão, não uma variável
foo(5); // Gera um erro fatal

class Foobar {}

foo(new Foobar()) // Produz um aviso no PHP 7.0.7
                  // Somente variáveis devem ser passadas por referência

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 xml:id="language.references.return">
   <title>Retornando referências</title>
   <para>
    Retorno por referência é útil quando é necessário utilizar uma função
    para localizar variáveis cuja referência precisa ser obtida.
    <emphasis>Não</emphasis> deve ser usado retorno por referência para aumentar desempenho, o
    mecanismo é esperto o bastante para otimizar isso. Referências somente devem ser retornadas
    quando existir uma razão técnica para isso! Para
    retornar referências, a sintaxe abaixo deve ser usada:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public $value = 42;

    public function &getValue()
    {
        return $this->value;
    }
}

$obj = new Foo();
$myValue = &$obj->getValue(); // $myValue é uma referência a $obj->value, que é 42
$obj->value = 2;
echo $myValue;                // imprime o valor valor de $obj->value, ou seja, 2

?>
]]>
     </programlisting>
    </informalexample>
    Neste exemplo, a propriedade do objeto retornado pela
    função <varname>getValue</varname> precisa ser assimilada, não
    copiada, como acontecerá se não utilizar a sintaxe de referências.
   </para>
   <note>
    <simpara>
     Diferentemente da passagem de parâmetros por referência, aqui é necessário utilizar
     <literal>&amp;</literal> em ambos os lugares - primeiro para indicar o
     retorno por referência (e não a cópia), e depois para indicar a
     ligação da referência (em vez da assimilação convencional) que precisa ser
     explícita para <varname>$myValue</varname>.
    </simpara>
   </note>
   <note>
    <simpara>
     Se houver tentativa de retornar uma referência de uma função com a sintaxe
     <literal>return ($this->value);</literal>, isto <emphasis>não</emphasis>
     funcionará como esperado para retornar o resultado de uma
     <emphasis>expressão</emphasis>, e não uma variável, por referência. Deve-se
     retornar variáveis por referência somente para uma função - nada além disso.
    </simpara>
   </note>
   <para>
   Para utilizar a referência retornada, é necessário utilizar a atribuição por referência:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

function &collector()
{
    static $collection = array();
    return $collection;
}

$collection = &collector();
// Agora $collection é uma variável por referência que referencia o array estático dentro da função

$collection[] = 'foo';

print_r(collector());
// Array
// (
//    [0] => foo
// )

?>
]]>
     </programlisting>
    </informalexample>
   <note>
    <simpara>
     Se a atribuição for feita sem o símbolo <literal>&amp;</literal> symbol, por exemplo, <code>$collection = collector();</code>,
     a variável <varname>$collection</varname> receberá uma cópia do valor, e não a referência retornada pela função.
    </simpara>
   </note>
   Para passar a referência retornada para outra função que espera uma referência,
   a seguinte sintaxe pode ser utilizada:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

function &collector()
{
    static $collection = array();
    return $collection;
}

array_push(collector(), 'foo');

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <simpara>
      Note que <literal>array_push(&amp;collector(), 'foo');</literal>
      <emphasis>não</emphasis> funcionará, e retornará um erro fatal.
    </simpara>
   </note>
  </sect1>

  <sect1 xml:id="language.references.unset">
   <title>Destruindo referências</title>
   <para>
    Quando uma referência é quebrada, ela apenas para de fazer o apontamento entre
    o nome da variável e o conteúdo. Mas isto não significa que
    o conteúdo da variável é destruído. Por exemplo:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$a = 1;
$b =& $a;
unset ($a);

?>
]]>
     </programlisting>
    </informalexample>
    não apaga <varname>$b</varname>, apenas <varname>$a</varname>.
   </para>
   <simpara>
    Novamente, é mais fácil pensar em analogia ao comando UNIX
    <command>unlink</command>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.references.spot">
   <title>Demonstrando referências</title>
   <simpara>
    Vários construtores sintáticos do PHP são implementados através de mecanismos
    de referência, assim, tudo o explicado até aqui sobre referências também
    se aplica a esses construtores. Alguns desses construtores, como a passagem e o
    retorno de referências foram mencionados acima. Outros construtores que
    também utilizam referências são:
   </simpara>

   <sect2 xml:id="references.global">
    <title>Referências globais</title>
    <para>
     Quando uma variável é declarada como <command>global $var</command>,
     de fato uma referência está sendo criada para a variável global. Isto significa que
     isto é o mesmo que:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$var =& $GLOBALS["var"];

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     O que significa também que destruir <varname>$var</varname>
     não apaga a variável global.
    </simpara>
   </sect2>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
