<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 00e8d1f2b04d3c55e7e31a323be68f90d1662c7d Maintainer: ae Status: ready --><!-- CREDITS: ae,felipe,fabioluciano,adiel,gabrielsanva -->
 <chapter xml:id="language.variables" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Variáveis</title>

  <sect1 xml:id="language.variables.basics">
   <title>Básico</title>

   <simpara>
    As variáveis no PHP são representadas por um cifrão ($) seguido pelo
    nome da variável. Os nomes de variável são case-sensitive (ou seja, há distinção entre maiúsculas e minúsculas).
   </simpara>

   <para>
    Nomes de variável seguem as mesmas regras como outros rótulos no PHP.
    Um nome de variável válido inicia-se com uma letra ou sublinhado, seguido
    de qualquer número de letras, números ou sublinhados. Em uma
    expressão regular, poderia ser representado assim:
    <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>
   </para>

   <note>
    <simpara>
     Para nosso propósito, as letras a-z, A-Z e os bytes
     de 127 a 255 (<literal>0x80-0xff</literal>).
    </simpara>
   </note>

   <note>
    <simpara>
     <literal>$this</literal> é uma variável especial que não pode
     ser atribuída.
     Anteriormente ao PHP 7.1.0, atribuição indireta (usando
     <link linkend="language.variables.variable">variáveis variáveis</link>)
     era possível.
    </simpara>
   </note>

   &tip.userlandnaming;

   <para>
    Para informação sobre funções relacionadas a variáveis, veja a
    <link linkend="ref.var">Referência de funções para variáveis</link>.
   </para>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$var = 'Bob';
$Var = 'Joe';
echo "$var, $Var";      // exibe "Bob, Joe"

$4site = 'not yet';     // inválido; começa com um número
$_4site = 'not yet';    // válido; começa com um sublinhado
$täyte = 'mansikka';    // válido; 'ä' é um caracter ASCII (extendido) 228
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Por padrão, as variáveis são sempre atribuídas por valor. Isto significa
    que ao atribuir uma expressão a uma variável, o valor
    da expressão original é copiado integralmente para a variável de destino.
    Isto significa também que, após atribuir o valor de uma variável a
    outra, a alteração de uma destas variáveis
    não afetará a outra. Para maiores informações sobre este tipo de
    atribuição, veja o capítulo em <link
    linkend="language.expressions">Expressões</link>.
   </para>
   <para>
    O PHP também oferece um outro meio de atribuir valores a variáveis:
    <link linkend="language.references">atribuição por referência</link>.
    Isto significa que a nova variável simplesmente referência (em outras palavras,
    "torna-se um apelido para" ou "aponta para") a variável original.
    Alterações na nova variável afetam a original, e vice-versa.
   </para>
   <para>
    Para atribuir por referência, simplesmente adicione um e-comercial (&amp;)
    na frente do nome da variável que estiver sendo atribuída (variável
    de origem) Por exemplo, o trecho de código abaixo imprime '<literal>My
    name is Bob</literal>' duas vezes:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 'Bob';              // Atribui o valor 'Bob' a variável $foo
$bar = &$foo;              // Referecia $foo através de $bar.
$bar = "My name is $bar";  // Altera $bar...
echo $bar;
echo $foo;                 // $foo é alterada também.
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Uma observação importante a se fazer, é que somente variáveis
    nomeadas podem ser atribuídas por referência.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = 25;
$bar = &$foo;      // Esta atribuição é válida.
$bar = &(24 * 7);  // Inválido; referencia uma expressão sem nome.

function test()
{
   return 25;
}

$bar = &test();    // Inválido.
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Não é necessário inicializar variáveis no PHP, contudo é uma ótima
    prática. Variáveis não inicializadas tem um valor padrão de tipo dependendo do contexto no qual são usadas
    - padrão de booleanos é &false;, de inteiros e ponto-flutuantes é zero, strings (por exemplo, se utilizados em <function>echo</function>), são
    definidas como vazias e arrays tornam-se um array vazio.
   </para>
   <para>
    <example>
     <title>Valores padrões de variáveis não inicializadas</title>
     <programlisting role="php">
<![CDATA[
<?php
// Limpa e remove referência (sem uso de contexto) a variável; imprime NULL
var_dump($unset_var);

// Uso de booleano; imprime 'false' (Veja sobre operadores ternário para saber mais sobre a sintaxe)
echo $unset_bool ? "true\n" : "false\n";

// Uso de string; imprime 'string(3) "abc"'
$unset_str .= 'abc';
var_dump($unset_str);

// Uso de inteiro; imprime 'int(25)'
$unset_int += 25; // 0 + 25 => 25
var_dump($unset_int);

// Uso de float; imprime 'float(1.25)'
$unset_float += 1.25;
var_dump($unset_float);

// Uso de array; imprime array(1) {  [3]=>  string(3) "def" }
$unset_arr[3] = "def"; // array() + array(3 => "def") => array(3 => "def")
var_dump($unset_arr);

// Uso de objeto; cria novo objeto stdClass (veja http://www.php.net/manual/en/reserved.classes.php)
// Imprime: object(stdClass)#1 (1) {  ["foo"]=>  string(3) "bar" }
$unset_obj->foo = 'bar';
var_dump($unset_obj);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Confiar no valor padrão de uma variável não inicializada é problemático
    no caso de incluir um arquivo em outro que usa uma variável de mesmo
    nome.
    Erros de nível <constant>E_WARNING</constant> (e anteriormente ao PHP 8.0.0, <constant>E_NOTICE</constant>)
    serão emitidos no caso de
    variáveis não inicializadas, contudo não no caso de adicionar
    elementos a um array não inicializado. A instrução da linguagem <function>isset</function>
    pode ser usado para detectar se uma variável não foi inicializada.
   </para>
  </sect1>

  <sect1 xml:id="language.variables.predefined">
   <title>Variáveis Predefinidas</title>

   <para>
    O PHP fornece um grande número de variáveis predefinidas para qualquer script
    que ele execute. Muitas dessas variáveis, no entanto, não podem ser totalmente
    documentadas, pois dependem de qual servidor está sendo usado, a
    versão e configuração do servidor, e outros fatores. Algumas dessas
    variáveis não estarão disponíveis quando o PHP for executado na
    <link linkend="features.commandline">linha de comando</link>.
    Consulte a <link linkend="reserved.variables">lista de variáveis predefinidas</link>
    para mais detalhes.
   </para>

   <para>
    O PHP fornece um conjunto adicional de arrays predefinidos
    contendo as variáveis do servidor web (se aplicável), as
    variáveis de ambiente e as entradas do usuário. Esses novos arrays são especiais
    por serem automaticamente globais--significando que estão
    disponíveis automaticamente em qualquer escopo. Por esta razão, também são conhecidos como
    "superglobais". (Não há um mecanismo no PHP para
    superglobais definidas pelo usuário.) Consulte a
    <link linkend="language.variables.superglobals">lista de superglobals</link>
    para mais detalhes.
   </para>

   <note>
    <title>Variáveis variáveis</title>
    <para>
     Superglobais não podem ser utilizadas como
     <link linkend="language.variables.variable">variáveis variáveis</link>
     dentro de funções ou métodos de classe.
    </para>
   </note>

   <para>
    Se determinadas variáveis não estiverem definidas na diretiva <link
    linkend="ini.variables-order">variables_order</link>, seus
    arrays predefinidos também estarão vazios.
   </para>
  </sect1>


  <sect1 xml:id="language.variables.scope">
   <title>Escopo de variáveis</title>

   <simpara>
    O escopo de uma variável é o contexto onde foi definida.
    A maioria das variáveis do PHP tem somente escopo local.
    Este escopo local inclui os arquivos incluídos e requeridos. Por
    exemplo:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
include 'b.inc';
?>
]]>
    </programlisting>
   </informalexample>
   <simpara>
    Aqui a variável <varname>$a</varname> estará disponível
    no script incluído <filename>b.inc</filename>. Entretanto, nas
    funções definidas pelo usuário, um escopo local é introduzido. Qualquer
    variável utilizada dentro de uma função é, por padrão, limitada ao
    escopo local da função. Por exemplo:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1; /* escopo global */

function Teste()
{
    echo $a; /* referencia uma variável do escopo local (não definida) */
}

Teste();
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Este script geraá uma aviso de variável não definida de nível <constant>E_WARNING</constant>
    (ou nível <constant>E_NOTICE</constant> anteriormente ao PHP 8.0.0).
    Entretanto, se a configuração INI
    <link linkend="ini.display-errors">display_errors</link> estiver configurada para esconder
    tais diagnósticos, então nada será impresso.
    Isto ocorre porque a instrução echo
    refere-se a uma versão local da variável <varname>$a</varname>,
    e não possui nenhum valor atribuído neste escopo. Pode-se
    perceber que esta é uma pequena diferença em relação à linguagem C, em que
    variáveis globais estão automaticamente disponíveis para
    funções sem sobrescrever uma definição local.
    Isto pode causar problemas quando inadvertidamente
    modificar-se uma variável global. No PHP, as variáveis globais precisam ser
    declaradas como globais dentro de uma função, se for utilizada
    em uma.
   </simpara>

   <sect2 xml:id="language.variables.scope.global">
    <title>A palavra-chave <literal>global</literal></title>
    <simpara>
     Primeiro, um exemplo de <literal>global</literal>:
    </simpara>
    <para>
     <example>
      <title>Usando <literal>global</literal></title>
      <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Soma()
{
    global $a, $b;

    $b = $a + $b;
}

Soma();
echo $b;
?>
]]>
      </programlisting>
     </example>
    </para>

   <simpara>
    O script acima imprimirá <literal>3</literal>. Declarando
    <varname>$a</varname> e <varname>$b</varname> globais na
    função, fará com que todas as referências a essas variáveis referenciam a
    versão global. Não há um limite para o número de variáveis
    globais que podem ser manipuladas por uma função.
   </simpara>

   <simpara>
    Uma segunda maneira de acessar variáveis do escopo global é utilizando
    o array especial <varname>$GLOBALS</varname> definido pelo PHP. O
    exemplo anterior poderia ser reescrito como:
   </simpara>
   <para>
    <example>
     <title>Usando <varname>$GLOBALS</varname> no lugar de global</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Soma()
{
    $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b'];
}

Soma();
echo $b;
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    O array <varname>$GLOBALS</varname> é um array associativo, sendo
    o nome da variável global a chave do array e o seu conteúdo da
    variável como o valor do elemento do array.
    Veja que <varname>$GLOBALS</varname> existe em qualquer escopo, isto
    porque <varname>$GLOBALS</varname> é uma <link
    linkend="language.variables.superglobals">superglobal</link>.
    Segue um exemplo demonstrando o poder das superglobais:
   </simpara>
   <para>
    <example>
     <title>Exemplo demonstrando superglobals e escopos</title>
     <programlisting role="php">
<![CDATA[
<?php
function test_superglobal()
{
    echo $_POST['name'];
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Utilizar a instrução <literal>global</literal> fora de uma função não é
     um erro. Deve ser utilizado se um arquivo for incluído dentro de uma função.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.variables.scope.static">
   <title>Utilizando variáveis <literal>static</literal></title>
   <simpara>
    Outro recurso importante do escopo de variáveis é a
    variável <emphasis>static</emphasis>. Uma variável estática existe
    somente no escopo local da função, mas não perde seu valor
    quando o nível de execução do programa deixa o escopo. Considere o seguinte
    exemplo:
   </simpara>
   <para>
    <example>
     <title>Exemplo demonstrando a necessidade de variáveis estáticas</title>
     <programlisting role="php">
<![CDATA[
<?php
function Teste()
{
    $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Essa função é inútil, já que cada vez que é chamada, define
    <varname>$a</varname> com o valor <literal>0</literal>, e imprime
    <literal>0</literal>. A instrução <varname>$a</varname>++ , que aumenta o valor da
    variável, não tem sentido já que assim que a função termina a
    variável <varname>$a</varname> desaparece. Para fazer um função
    contadora, que não perderá a conta atual,
    a variável <varname>$a</varname> será declarada como estática:
   </simpara>
   <para>
    <example>
     <title>Exemplo de uso de variáveis estáticas</title>
     <programlisting role="php">
<![CDATA[
<?php
function Teste()
{
    static $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Agora, a variável <varname>$a</varname> é inicializada apenas na primeira chamada da função
    e cada vez que a função <literal>test()</literal> for chamada, imprimirá o
    valor de <varname>$a</varname> e depois o incrementará.
   </simpara>

   <simpara>
    Variáveis estáticas fornecem uma solução para lidar com funções
    recursivas. Uma função recursiva é aquela que chama a si mesma. Cuidados
    devem ser tomados quando escrever funções recursivas porque é
    possível que ela continue na recursão indefinidamente. Deve-se assegurar
    que há uma maneira adequada de terminar a recursão. A seguinte
    função recursiva conta até 10, utilizando a variável
    estática <varname>$count</varname> para saber quando parar:
   </simpara>
   <para>
    <example>
     <title>Variáveis estáticas em funções recursivas</title>
     <programlisting role="php">
<![CDATA[
<?php
function Teste()
{
    static $count = 0;

    $count++;
    echo $count;
    if ($count < 10) {
        Teste();
    }
    $count--;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Variáveis estáticas podem ser declaradas como visto nos exemplos acima.
    É possível atribuir valores a essas variáveis, que são
    resultados de expressões, porém não é possível usar nenhuma função, o que causará um erro de interpretação.
   </para>
   <para>
    <example>
     <title>Declarando variáveis estáticas</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo(){
    static $int = 0;          // correro
    static $int = 1+2;        // correto (a partir do PHP 5.6)
    static $int = sqrt(121);  // errado (é uma expressão)

    $int++;
    echo $int;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    A partir do PHP 8.1.0, quando um método com variáveis estáticas é herdado (mas não sobrescrito),
    o método herdado não compartilhará as variáveis estáticas do método acima.
    Isso significa que variáveis estáticas nos métodos agora se comportam da mesma forma que propriedades estáticas.
   </para>

   <example>
    <title>Uso de variáveis estáticas em métodos herdados</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function counter() {
        static $counter = 0;
        $counter++;
        return $counter;
    }
}
class Bar extends Foo {}
var_dump(Foo::counter()); // int(1)
var_dump(Foo::counter()); // int(2)
var_dump(Bar::counter()); // int(3), e antes do PHP 8.1.0 int(1)
var_dump(Bar::counter()); // int(4), e antes do PHP 8.1.0 int(2)
?>
]]>
    </programlisting>
   </example>

   <note>
    <para>
     Declarações estáticas são resolvidas em tempo de compilação.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.variables.scope.references">
   <title>Referencias em variáveis <literal>global</literal> e <literal>static</literal></title>
   <simpara>
    O PHP implementa os modificadores
    <link linkend="language.variables.scope.static">static</link> e
    <link linkend="language.variables.scope.global">global</link>
    para variáveis, em termo de <link linkend="language.references">
    referências</link>. Por exemplo, uma variável global verdadeira,
    importada dentro do escopo de uma função com a instrução <literal>global</literal>,
    na verdade, cria uma referência para a variável global. Isto pode levar a
    comportamentos imprevisíveis nos seguintes casos:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function test_global_ref() {
    global $obj;
    $new = new stdClass;
    $obj = &$new;
}

function test_global_noref() {
    global $obj;
    $new = new stdClass;
    $obj = $new;
}

test_global_ref();
var_dump($obj);
test_global_noref();
var_dump($obj);
?>
]]>
    </programlisting>
   </informalexample>

   &example.outputs;

   <screen>
<![CDATA[
NULL
object(stdClass)#1 (0) {
}
]]>
   </screen>

   <simpara>
    Um comportamento similar se aplica a declaração <literal>static</literal>.
    Referências não são armazenadas estaticamente:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &get_instance_ref() {
    static $obj;

    echo 'Objeto estático: ';
    var_dump($obj);
    if (!isset($obj)) {
        $new = new stdClass;
        // Assimila uma referencia a variável estática
        $obj = &$new;
    }
    if (!isset($obj->property)) {
        $obj->property = 1;
    } else {
        $obj->property++;
    }
    return $obj;
}

function &get_instance_noref() {
    static $obj;

    echo "Objeto estático: ";
    var_dump($obj);
    if (!isset($obj)) {
        $new = new stdClass;
        // Assimila o objeto para a variável estática
        $obj = $new;
    }
    if (!isset($obj->property)) {
        $obj->property = 1;
    } else {
        $obj->property++;
    }
    return $obj;
}

$obj1 = get_instance_ref();
$still_obj1 = get_instance_ref();
echo "\n";
$obj2 = get_instance_noref();
$still_obj2 = get_instance_noref();
?>
]]>
    </programlisting>
   </informalexample>
   &example.outputs;
   <screen>
<![CDATA[
Objeto estatico: NULL
Objeto estatico: NULL

Objeto estatico: NULL
Objeto estatico: object(stdClass)#3 (1) {
  ["property"]=>
  int(1)
}
]]>
   </screen>

   <simpara>
    Este exemplo demonstra que, atribuir uma referência a uma variável
    estática, fará com que ela <emphasis>não se lembre</emphasis> quando chamou a função
    <literal>&amp;get_instance_ref()</literal> uma segunda vez.
   </simpara>
   </sect2>
  </sect1>

  <sect1 xml:id="language.variables.variable">
   <title>Variáveis variáveis</title>

   <simpara>
    As vezes, é conveniente possuir variáveis com nomes
    variáveis. Isto é, o nome de uma variável que pode ser definido e utilizado
    dinamicamente. Uma variável normal é definida com uma instrução como:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = 'hello';
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Uma variável variável obtém o valor de uma variável e a trata como
    o nome de uma variável. No exemplo acima,
    <emphasis>hello</emphasis> pode ser utilizada como o nome de uma variável
    utilizando dois sinais de cifrão:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$$a = "world";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Neste ponto, duas variáveis foram definidas e armazenadas na
    árvore de símbolos do PHP: <varname>$a</varname> que contém "hello" e
    <varname>$hello</varname> que contém "world". Assim, esta
    instrução:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a {$$a}";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    produz a mesma saída que:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a $hello";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    assim sendo, as duas produzem: <computeroutput>hello world</computeroutput>.
   </simpara>

   <simpara>
    Para poder utilizar variáveis variáveis com arrays, você precisa
    resolver um problema de ambiguidade. Isso é, se você escrever
    <varname>$$a[1]</varname> o interpretador precisa saber que se
    deseja utilizar <varname>$a[1]</varname> como uma variável ou que se
    deseja usar <varname>$$a</varname> como uma variável e [1]
    como o índice dessa variável. A sintaxe para resolver essa ambiguidade
    é <varname>${$a[1]}</varname> para o primeiro caso e
    <varname>${$a}[1]</varname>, para o segundo.
   </simpara>

   <simpara>
    Propriedades de classes também podem ser acessadas utilizando-se nomes de propriedades variáveis. O
    nome de propriedade variável será resolvido dentro do escopo em que a
    chamada foi feita. Por exemplo, se houver uma expressão como
    <varname>$foo->$bar</varname>, o escopo local será examinado procurando por
    <varname>$bar</varname> e seu valor será utilizado como o nome da
    propriedade <varname>$foo</varname>. Isso também funciona se
    <varname>$bar</varname> for um array.
   </simpara>

   <simpara>
    Colchetes também podem ser utilizados para delimitar claramente os nomes
    de propriedade. São muito úteis ao acessar valores de uma propriedade que
    contenham um array, quando o nome da propriedade tem várias partes,
    ou quando o nome da propriedade contém caracteres que não
    são válidos (por exemplo, em saídas da função <function>json_decode</function>
    ou <link linkend="book.simplexml">SimpleXML</link>).
   </simpara>

   <para>
    <example>
     <title>Exemplo de propriedade variável</title>
      <programlisting role="php">
<![CDATA[
<?php
class foo {
    var $bar = 'I am bar.';
    var $arr = array('I am A.', 'I am B.', 'I am C.');
    var $r   = 'I am r.';
}

$foo = new foo();
$bar = 'bar';
$baz = array('foo', 'bar', 'baz', 'quux');
echo $foo->$bar . "\n";
echo $foo->{$baz[1]} . "\n";

$start = 'b';
$end   = 'ar';
echo $foo->{$start . $end} . "\n";

$arr = 'arr';
echo $foo->{$arr[1]} . "\n";

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
I am bar.
I am bar.
I am bar.
I am r.
     </screen>
    </example>
   </para>

   <warning>
    <simpara>
     Note que variáveis variáveis não podem ser utilizadas nos
     <link linkend="language.variables.superglobals">arrays Superglobais</link>
     dentro de funções ou métodos de classe. A variável <literal>$this</literal>
     também é uma variável especial que não pode ser referenciada dinamicamente.
    </simpara>
   </warning>

  </sect1>

  <sect1 xml:id="language.variables.external">
   <title>Variáveis de fontes externas</title>

   <sect2 xml:id="language.variables.external.form">
    <title>Formulários HTML (GET e POST)</title>

    <simpara>
     Quando um formulário é submetido para um script PHP, a informação deste
     formulário estará automaticamente disponível ao script. Há
     algumas maneiras de acessar estas informações, por exemplo:
    </simpara>

    <para>
     <example>
      <title>Um formulário HTML simples</title>
      <programlisting role="html">
<![CDATA[
<form action="foo.php" method="post">
    Nome:  <input type="text" name="username" /><br />
    Email: <input type="text" name="email" /><br />
    <input type="submit" name="submit" value="Me aperte!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     A partir do PHP 5.4.0, existem apenas duas formas de acessar dados de formulários PHP.
     Os métodos disponíveis atualmente são listadas a seguir:
    </para>

    <para>
     <example>
      <title>Acessando dados de um formulário HTML via POST</title>
      <programlisting role="php">
<![CDATA[
<?php
echo $_POST['username'];
echo $_REQUEST['username'];
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Utilizar um formulário GET é similar, exceto que você usará a variável
     GET predefinida. GET também se aplica a superglobal
     <literal>QUERY_STRING</literal> (a informação depois do '?' numa URL). Então,
     por exemplo, <literal>http://www.example.com/test.php?id=3</literal>
     contém os dados GET que estarão acessíveis com <varname>$_GET['id']</varname>.
     Veja também <varname>$_REQUEST</varname>.
    </para>

    <note>
     <para>
      Pontos e espaços em nomes de variáveis são convertidos para sublinhados. Por
      exemplo <literal>&lt;input name="a.b" /&gt;</literal> se tornará
      <literal>$_REQUEST["a_b"]</literal>.
     </para>
    </note>

    <simpara>
     O PHP também entende arrays no contexto de variáveis de formulário
     (veja essa <link linkend="faq.html">FAQ</link>). Pode-se,
     por exemplo, agrupar variáveis relacionadas, ou utilizar este
     recurso para obter valores de um input select múltiplo. Por
     exemplo, iremos enviar o formulário abaixo para si mesmo, e depois de submetido, mostra
     os dados:
    </simpara>

    <para>
     <example>
      <title>Variáveis de formulários mais complexos</title>
      <programlisting role="php">
<![CDATA[
<?php
if ($_POST) {
    echo '<pre>';
    echo htmlspecialchars(print_r($_POST, true));
    echo '</pre>';
}
?>
<form action="" method="post">
    Nome:  <input type="text" name="personal[name]" /><br />
    Email: <input type="text" name="personal[email]" /><br />
    Cerveja: <br />
    <select multiple name="beer[]">
        <option value="antarctica">Antarctica</option>
        <option value="brahma">Brahma</option>
        <option value="skol">Skol</option>
    </select><br />
    <input type="submit" value="Enviar dados!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <note>
     <simpara>
      Se um nome de variável externa se parece com sintaxe de array válida, as letras
      finais são silenciosamente ignoradas. Por exemplo, <literal>&lt;input name="foo[bar]baz"&gt;</literal>
      se torna <literal>$_REQUEST['foo']['bar']</literal>.
     </simpara>
    </note>

    <sect3 xml:id="language.variables.external.form.submit">
     <title>Nomes de variáveis SUBMIT IMAGE</title>

     <simpara>
      Ao submeter um formulário, é possível de utilizar imagens em vez
      do botão de submit padrão com uma tag do tipo:
     </simpara>

     <informalexample>
      <programlisting role="html">
<![CDATA[
<input type="image" src="image.gif" name="sub" />
]]>
      </programlisting>
     </informalexample>

     <simpara>
      Quando o usuário clicar em algum lugar da imagem, o formulário
      será transmitido para o servidor com duas variáveis
      adicionais, <varname>sub_x</varname> and <varname>sub_y</varname>.
      Elas contém as coordenadas do
      clique do usuário na imagem. Os mais experientes percebem que os
      atuais nomes dessas variáveis enviadas ao navegador contém um ponto
      ao invés de um sublinhado, mas o PHP converte o ponto para um
      sublinhado automaticamente.
     </simpara>
    </sect3>

   </sect2>

   <sect2 xml:id="language.variables.external.cookies">
    <title>Cookies HTTP</title>

    <simpara>
     O PHP suporta transparentemente cookies HTTP como os definidos pela <link
     xlink:href="&url.rfc;6265">RFC 6265</link>. Cookies são um
     mecanismo o armazenamento de dados no navegador,
     rastreando e identificando o retorno de usuários. Você pode definir cookies com
     a função <function>setcookie</function>. Cookies são parte do
     cabeçalho HTTP, então a função SetCookie precisa ser chamada antes
     de qualquer saída ser enviada ao navegador. Esta é a mesma restrição
     da função <function>header</function>. Dados de cookies
     estão disponíveis nos arrays de dados de cookies apropriados,
     como <varname>$_COOKIE</varname> e também em <varname>$_REQUEST</varname>.
     Veja o manual de <function>setcookie</function> para mais detalhes e
     exemplos.
    </simpara>

    <note>
     <simpara>
      A partir dos PHP 7.2.34, 7.3.23 e 7.4.11, respectivamente, os <emphasis>nomes</emphasis>
      dos cookies não url-coded por razões de segurança.
     </simpara>
    </note>

    <simpara>
     Se você deseja atribuir vários valores para uma única variável do cookie, você
     pode fazer dele um array:
    </simpara>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
  setcookie("MyCookie[foo]", 'Testing 1', time()+3600);
  setcookie("MyCookie[bar]", 'Testing 2', time()+3600);
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     Isso irá criar dois cookies separados enquanto que <varname>MyCookie</varname> será
     um único array em seu script. Se quiser definir apenas um cookie com
     vários valores, considere utilizar <function>serialize</function> ou
     <function>explode</function> nos valores primeiro.
    </simpara>

    <simpara>
     Note que um cookie substituiu um anterior com o mesmo
     nome em seu navegador, a menos que o nome ou o caminho seja diferente. Então,
     para uma aplicação de carrinho de compras em que se quer ter um contador
     e repassá-lo:
    </simpara>

    <example>
     <title>Exemplo <function>setcookie</function></title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['count'])) {
    $count = $_COOKIE['count'] + 1;
} else {
    $count = 1;
}
setcookie('count', $count, time()+3600);
setcookie("Cart[$count]", $item, time()+3600);
?>
]]>
     </programlisting>
    </example>

   </sect2>

   <sect2 xml:id="language.variables.external.dot-in-names">
    <title>Pontos em nomes de variáveis postadas</title>

    <para>
     Normalmente o PHP não altera o nome de variáveis quando elas
     são passadas para o script. Entretanto, é necessário notar que o
     ponto (ponto final) não é um caractere válido no nomes de
     variáveis do PHP. Para ilustrar, veja o seguinte exemplo:
     <programlisting role="php">
<![CDATA[
<?php
$varname.ext;  /* nome de variável inválido */
?>
]]>
     </programlisting>
     Dessa forma, o interpretador entende isso como uma variável nomeada
     <varname>$varname</varname>, seguida do operador de concatenação
     de strings, seguida de uma string crua (uma string não delimitada que
     não bate com nenhuma palavra-chave ou reservada) 'ext'. Obviamente,
     isso não tem os resultados pretendidos.
    </para>

    <para>
     Nessa situação, é importante notar que o PHP
     substituirá automaticamente qualquer ponto nos nomes de variáveis recebidas por
     sublinhados.
    </para>

   </sect2>

   <sect2 xml:id="language.variables.determining-type-of">
    <title>Determinando o tipo das variáveis</title>

    <para>
     Como o PHP determina os tipos de variáveis e faz conversões
     (geralmente) quando necessárias, nem sempre é óbvio o tipo de uma variável
     em todos os momentos. O PHP incluí várias funções
     que permitem determinar qual o tipo de uma variável, por exemplo:
     <function>gettype</function>, <function>is_array</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_object</function>, e
     <function>is_string</function>. Veja também o capítulo
     <link linkend="language.types">Tipos</link>.
    </para>
    <para>
     Por o HTTP ser um protocolo texto, a maioria, se não todo o conteúdo presente nos
     <link linkend="language.variables.superglobals">arrays superglobais</link>,
     como <varname>$_POST</varname> e <varname>$_GET</varname> permanecerão
     como strings. O PHP não tentará converter valores para um tipo específico.
     No exemplo abaixo, <varname>$_GET["var1"]</varname> irá conter a
     string "null" e <varname>$_GET["var2"]</varname> conterá a string "123".
     <programlisting>
<![CDATA[
/index.php?var1=null&var2=123
]]>
      </programlisting>
    </para>
   </sect2>

   <sect2 xml:id="language.variables.external.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>7.2.34, 7.3.23, 7.4.11</entry>
         <entry>
          Os <emphasis>nomes</emphasis> dos cookies recebidos não são mais codificados no formato URL
          por razões de segurança.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
