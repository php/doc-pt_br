<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5fccbe5195820cd9ec0045674312ec567ef5f6ed Maintainer: ae Status: ready --><!-- CREDITS: ae,lcobucci,felipe,fabioluciano,lisaldo,gabrielsanva -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Tipos</title>

 <sect1 xml:id="language.types.intro">
  <title>Introdução</title>

  <para>
   Cada expressão no PHP tem um dos seguintes
   tipos ou valores internos:
   <itemizedlist>
    <listitem><simpara><type>null</type></simpara></listitem>
    <listitem><simpara><type>bool</type></simpara></listitem>
    <listitem><simpara><type>int</type></simpara></listitem>
    <listitem><simpara><type>float</type> (número de ponto flutuante)</simpara></listitem>
    <listitem><simpara><type>string</type></simpara></listitem>
    <listitem><simpara><type>array</type></simpara></listitem>
    <listitem><simpara><type>object</type></simpara></listitem>
    <listitem><simpara><type>callable</type></simpara></listitem>
    <listitem><simpara><type>resource</type></simpara></listitem>
   </itemizedlist>
  </para>

  <para>
   O PHP é uma linguagem com tipagem dinâmica, o que significa que por padrão não
   existe a necessidade de especificar o tipo de uma variável, já que isso será
   determinado em tempo de execução. Entretanto, é possível de restringir estaticamente os tipos
   através do uso de
   <link linkend="language.types.declarations">declarações de tipo</link>.
  </para>

  <para>
   Os tipos restringem quais operações podem ser realizadas nos valores.
   Entretanto, se uma expressão ou variável for utilizada numa operação que
   o tipo não suporte, o PHP tentará
   <link linkend="language.types.type-juggling">transformar o valor</link>
   em um tipo que suporte a operação.
   Esse processo depende do contexto de onde o valor é utilizado.
   Para mais informações, veja a seção sobre
   <link linkend="language.types.type-juggling">Transformações de tipos</link>.
  </para>

  <tip>
   <simpara>
    <link linkend="types.comparisons">A tabela de comparação de tipos</link>
    também pode ser útil, pelos vários exemplos de comparação de valores
    demonstrados.
   </simpara>
  </tip>

  <note>
   <simpara>
    É possível forçar a reavaliação de uma expressão para um tipo específico
    através do uso de <link linkend="language.types.typecasting">cast</link>.
    Uma variável pode ser modificada para um tipo através da função
    <function>settype</function>.
   </simpara>
  </note>

  <para>
   Para verificar o valor e tipo de uma
   <link linkend="language.expressions">expressão</link>,
   utilize a função<function>var_dump</function>.
   Para extrair o tipo de uma
   <link linkend="language.expressions">expressão</link>,
   utilize a função<function>get_debug_type</function>.
   Para apenas validar se uma expressão é de um certo tipo, utilize as funções
   <!-- TODO When PhD support is there: <function>is_<replaceable>type</replaceable></function> -->
   <literal>is_<replaceable>type</replaceable></literal>.

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a_bool = true;   // um valor boleano
$a_str  = "foo";  // um texto
$a_str2 = 'foo';  // um texto
$an_int = 12;     // um inteiro

echo get_debug_type($a_bool), "\n";
echo get_debug_type($a_str), "\n";

// Se essa variável conter um inteiro, aumento o número por quatro
if (is_int($an_int)) {
    $an_int += 4;
}
var_dump($an_int);

// Se $a_bool for um texto, imprima
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
bool
string
int(16)
]]>
    </screen>
   </informalexample>
  </para>
  <note>
   <simpara>
    <function>get_debug_type</function> se tornou disponível no PHP 8.0.0.
    Anteriormente, a função <function>gettype</function> pode ser utilizada.
    Entretanto, a função antiga não retorna nomes bem definidos.
   </simpara>
  </note>
 </sect1>

 &language.types.type-system;
 &language.types.null;
 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.numeric-strings;
 &language.types.array;
 &language.types.object;
 &language.types.enumerations;
 &language.types.resource;
 &language.types.callable;
 &language.types.mixed;
 &language.types.void;
 &language.types.never;
 &language.types.relative-class-types;
 &language.types.value;
 &language.types.iterable;
 &language.types.declarations;
 &language.types.type-juggling;

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
