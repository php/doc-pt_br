<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 161dde4fe721309398dd324edbf02aec409f127b Maintainer: fabioluciano Status: ready --><!-- CREDITS: felipe, fabioluciano, geekcom, github:lisaldo, gabrielsanva, adiel, marcosmarcolin -->
<sect1 xml:id="language.types.integer">
 <title>Inteiros</title>

 <simpara>
  Um <type>int</type> é um número do conjunto
  &#8484; = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="language.types.float">Números de ponto flutuante</link></member>
    <member><link linkend="book.bc">Precisão arbitrária / BCMath</link></member>
    <member><link linkend="book.gmp">Número inteiro de comprimento arbitrário / GMP</link></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Sintaxe</title>

  <simpara>
   <type>Int</type> pode ser especificado em notação decimal (base 10), hexadecimal
   (base 16), octal (base 8) ou binária (base 2).
   O <link linkend="language.operators.arithmetic">operador de negação</link>
   pode ser usado para indicar um <type>int</type> negativo.
  </simpara>

  <para>
   Para usar a notação octal, preceda o número com um <literal>0</literal> (zero).
   A partir do PHP 8.1.0, a notação octal também pode ser precedida por <literal>0o</literal> ou <literal>0O</literal>.
   Para utilizar a notação hexadecimal, preceda o número com <literal>0x</literal>.
   Para utilizar a notação binária, preceda o número com <literal>0b</literal>.
  </para>

  <para>
   A partir do PHP 7.4.0, inteiros literais podem conter sublinhados (<literal>_</literal>) entre os dígitos,
   para melhorar a sua leitura. Estes sublinhados serão removidos pelo scanner do PHP.
  </para>

  <example>
   <title>Literais inteiras</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // número decimal
$a = 0123; // número octal (equivalente a 83 em decimal)
$a = 0o123; // número octal (a partir do PHP 8.1.0)
$a = 0x1A; // número hexadecimal (equivalente a 26 em decimal)
$a = 0b11111111; // número binário (equivalente ao 255 decimal)
$a = 1_234_567; // número decimal (a partir do PHP 7.4.0)
?>
]]>
   </programlisting>
  </example>

  <para>
   Formalmente, a estrutura para literais <type>int</type> é a partir do PHP 8.1.0
   (anteriormente, os prefixos octal <literal>0o</literal> ou <literal>0O</literal>
   não eram permitidos, e antes do PHP 7.4.0 os sublinhados
   não eram permitidos):
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
decimal     : [1-9][0-9]*(_[0-9]+)*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+(_[0-9a-fA-F]+)*

octal       : 0[oO]?[0-7]+(_[0-7]+)*

binary      : 0[bB][01]+(_[01]+)*

integer     : decimal
            | hexadecimal
            | octal
            | binary
]]>
   </programlisting>
  </informalexample>

  <para>
   O tamanho de um <type>int</type> depende da plataforma, embora um valor máximo
   de cerca de dois bilhões seja o valor usual (são 32 bits assinados).
   As plataformas de 64 bits geralmente têm um valor máximo de cerca de 9E18.
   O PHP não suporta <type>int</type> não assinados.
   O tamanho <type>int</type> pode ser determinado
   usando a constante <constant>PHP_INT_SIZE</constant>, o valor máximo
   usando a constante <constant>PHP_INT_MAX</constant> e
   o valor mínimo usando a constante <constant>PHP_INT_MIN</constant>.
  </para>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Overflow de inteiros</title>

  <para>
   Se o PHP encontrar um número além dos limites do tipo <type>int</type>,
   ele será interpretado como um <type>float</type>. Assim, uma
   operação que resulte em um número além dos limites do tipo
   <type>int</type>, retornará um <type>float</type>.
  </para>

  <example>
   <title>Overflow de inteiros em sistemas 32-bit</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)

$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)

$million = 1000000;
$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Overflow de inteiros em sistemas 64-bit</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 9223372036854775807;
var_dump($large_number);                     // int(9223372036854775807)

$large_number = 9223372036854775808;
var_dump($large_number);                     // float(9.2233720368548E+18)

$million = 1000000;
$large_number =  50000000000000 * $million;
var_dump($large_number);                     // float(5.0E+19)
?>
]]>
   </programlisting>
  </example>

  <para>
   Não existe operador de divisão <type>int</type> no PHP, para conseguir isso
   use a função <function>intdiv</function> .
   <literal>1/2</literal> produz o <type>float</type> <literal>0.5</literal>.
   O valor pode ser convertido em um <type>int</type> para arredondar para zero ou
   a função <function>round</function>  fornece um controle mais preciso sobre o arredondamento.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286)
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4)
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>Convertendo para inteiro</title>

  <simpara>
   Para converter explicitamente um valor para <type>int</type>, utiliza-se um dos modificadores
   <literal>(int)</literal> ou <literal>(integer)</literal>. Entretanto, na
   maioria dos casos, o modificador não é necessário, já que o valor
   será automaticamente convertido se um operador, função ou estrutura de controle
   requerer um <type>int</type> como argumento. Um valor também pode ser convertido para
   <type>int</type> utilizando a função <function>intval</function>.
  </simpara>

  <simpara>
   Se um <type>resource</type> for convertido para um <type>int</type>,
   resultará no número único do recurso, atribuído ao
   <type>resource</type> pelo PHP em tempo de execução.
  </simpara>

  <simpara>
   Veja também <link linkend="language.types.type-juggling">Manipulação de tipos</link>.
  </simpara>

  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>De <link linkend="language.types.boolean">booleanos</link></title>

   <simpara>
    &false; será retornado como <literal>0</literal> (zero), e &true; retornará
    <literal>1</literal> (um).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    De <link linkend="language.types.float">números de ponto flutuante</link>
   </title>

   <simpara>
    Ao converter de <type>float</type> para <type>int</type>, o número
    será arredondado <emphasis>towards zero</emphasis>.
    A partir do PHP 8.1.0, um aviso de descontinuação é emitido ao converter implicitamente um &float; não integral para &integer; que perde precisão.
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php

function foo($value): int {
  return $value;
}

var_dump(foo(8.1)); // "Descontinuado: conversão implícita de float 8.1 para int perde precisão" a partir do PHP 8.1.0
var_dump(foo(8.1)); // 8 antes do PHP 8.1.0
var_dump(foo(8.0)); // 8 em ambos os casos

var_dump((int)8.1); // 8 em ambos os casos
var_dump(intval(8.1)); // 8 em ambos os casos
?>
]]>
   </programlisting>

   <para>
    Se o float estiver além dos limites de  <type>int</type> (geralmente
    <literal>+/- 2.15e+9 = 2^31</literal> em plataformas de 32 bits e
    <literal>+/- 9.22e+18 = 2^63</literal> em plataformas de 64 bits),
    o resultado é indefinido , já que o <type>float</type> não tem
    precisão suficiente para fornecer um resultado <type>int</type> exato.
    Nenhum aviso, nem mesmo um aviso será emitido quando isso acontecer!
   </para>

   <note>
    <para>
     NaN e infinito sempre serão zero quando convertidos para <type>int</type>.
    </para>
   </note>

   <warning>
    <para>
     Nunca modifique uma fração desconhecida para <type>int</type>, porque isto pode,
     as vezes, fornecer resultados inesperados.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // imprime 7!
?>
]]>
     </programlisting>
    </informalexample>

    <para>
     Veja também o <link linkend="warn.float-precision">alerta sobre a precisão de número
     flutuante</link>.
    </para>
   </warning>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>De strings</title>

   <simpara>
    Se a string for
    <link linkend="language.types.numeric-strings">numérica</link>
    ou numérica inicial, ela será resolvida para o valor
    inteiro correspondente, caso contrário, será convertida em zero
    (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting-from-null">
   <title>De <type>NULL</type></title>

   <simpara>
    &null; é sempre convertido em zero (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>De outros tipos</title>

   <caution>
    <simpara>
     O comportamento da conversão de um <type>int</type> é desconhecido para outros
     tipos. <emphasis>Não confie</emphasis> em nenhum comportamento observado, pois ele pode
     mudar sem aviso.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
