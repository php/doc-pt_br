<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: leonardolara Status: ready --><!-- CREDITS: lcobucci, fabioluciano, geekcom, lhsazevedo, marcosmarcolin, leonardolara -->
<sect1 xml:id="language.types.callable">
 <title>Funções de Retorno / Chamáveis</title>

 <para>
  Funções de retorno podem ser representadas pela declaração de tipo <type>callable</type>.
 </para>

 <para>
  Algumas funções como <function>call_user_func</function> ou
  <function>usort</function> aceitam funções de retorno definidas pelo usuário
  como parâmetro. Funções de retorno não precisam ser apenas funções simples, mas também
  métodos de <type>object</type>s, incluindo os estáticos.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Passagem por parâmetro</title>

  <para>
   Uma função PHP é passada através do seu nome como uma <type>string</type>. Qualquer função interna
   ou definida pelo usuário pode ser utilizada, com exceção dos construtores de linguagem como:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> ou
   <function>unset</function>.
  </para>

  <para>
   Um método de um <type>object</type> instanciado é passado como um
   <type>array</type> contendo um <type>object</type> no índice 0 e o
   nome do método no índice 1. Acessar métodos protegidos e privados
   de uma classe é permitido.
  </para>

  <para>
   Métodos estáticos também podem ser passados sem a instância de um
   <type>object</type> dessa classe ao passar um nome da classe
   em vez de um <type>object</type> no índice 0, ou passando
   <literal>'ClassName::methodName'</literal>.
  </para>

  <para>
   Além de funções comuns definidas pelo usuário,
   <link linkend="functions.anonymous">funções anônimas</link> e
   <link linkend="functions.arrow">funções de seta</link> também podem ser
   passadas como um parâmetro de callback.
  </para>

  <note>
   <para>
    A partir do PHP 8.1.0, funções anônimas também podem ser criadas usando a <link linkend="functions.first_class_callable_syntax">sintaxe de chamável de primeira classe</link>.
   </para>
  </note>

  <para>
   Geralmente, qualquer objeto implementando <link linkend="object.invoke">__invoke()</link> também pode
   ser passado para um parâmetro de função de retorno.
  </para>

  <para>
   <example>
    <title>
     Exemplos de funções de retorno
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Exemplo de função de retorno
function minha_funcao_retorno() {
    echo 'Olá mundo!', PHP_EOL;
}

// Exemplo de método de retorno
class MinhaClasse {
    static function meuMetodoRetorno() {
        echo 'Olá Mundo!', PHP_EOL;
    }
}

// Tipo 1: Função de Retorno Simples
call_user_func('minha_funcao_retorno');

// Tipo 2: Chamada a métodos estáticos
call_user_func(array('MinhaClasse', 'meuMetodoRetorno'));

// Tipo 3: Chamada a métodos de objetos
$obj = new MinhaClasse();
call_user_func(array($obj, 'meuMetodoRetorno'));

// Tipo 4: Chamada a métodos estáticos
call_user_func('MinhaClasse::meuMetodoRetorno');

// Tipo 5: Chamada relativa a métodos estáticos
class A {
    public static function quem() {
        echo "A\n", PHP_EOL;
    }
}

class B extends A {
    public static function quem() {
        echo "B\n", PHP_EOL;
    }
}

call_user_func(array('B', 'parent::quem')); // A, descontinuado a partir do PHP 8.2.0

// Type 6: Objetos que implementam __invoke podem ser utilizados como chamáveis
class C {
    public function __invoke($nome) {
        echo 'Olá ', $nome, PHP_EOL;
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Exemplo de Função de retorno utilizando uma Closure
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Nossa closure
$double = function($a) {
    return $a * 2;
};

// Esta é a série de números
$numbers = range(1, 5);

// O uso da closure aqui é para
// dobrar o valor de cada elemento de nossa
// série
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
