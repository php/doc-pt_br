<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: leonardolara Status: ready --><!-- CREDITS: ae, leonardolara -->
<sect1 xml:id="language.operators.increment">
 <title>Operadores de Incremento/Decremento</title>
 <titleabbrev>Incremento e Decremento</titleabbrev>
 <para>
  O PHP suporta operadores de pré e pós-incremento operadores de decremento.
  Esses operadores unários permitem aumentar o diminuir o valor por um.
 </para>
 <table>
  <title>Operadores de Incremento/Decremento</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Exemplo</entry>
     <entry>Nome</entry>
     <entry>Efeito</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Pré-incremento</entry>
     <entry>Incrementa <varname>$a</varname> em um, e então retorna <varname>$a</varname>.</entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Pós-incremento</entry>
     <entry>Retorna <varname>$a</varname>, e então incrementa <varname>$a</varname> em um.</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Pré-decremento</entry>
     <entry>Diminuiu <varname>$a</varname> em um, e então retorna <varname>$a</varname>.</entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Pós-decremento</entry>
     <entry>Retorna <varname>$a</varname>, e então diminui <varname>$a</varname> em um.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  <example>
   <title>Exemplos de incremento/decremento</title>
   <programlisting role="php">
<![CDATA[
<?php
echo 'Pós-incremento:', PHP_EOL;
$a = 5;
var_dump($a++);
var_dump($a);

echo 'Pré-incremento:', PHP_EOL;
$a = 5;
var_dump(++$a);
var_dump($a);

echo 'Pós-incremento:', PHP_EOL;
$a = 5;
var_dump($a--);
var_dump($a);

echo 'Pré-decremento:', PHP_EOL;
$a = 5;
var_dump(--$a);
var_dump($a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Pós-incremento:
int(5)
int(6)
Pré-incremento:
int(6)
int(6)
Pós-incremento:
int(5)
int(4)
Pós-decremento:
int(4)
int(4)
]]>
   </screen>
  </example>

  <warning>
   <para>
    Os operadores de incremento e decremento não tem efeitos em valores
    do tipo <type>bool</type>.
    Um <constant>E_WARNING</constant> é emitido desde o PHP 8.3.0,
    porque isso causará uma conversão implícita para um tipo <type>int</type> no futuro.
   </para>
   <para>
    O operador de decremento não tem efeito em valores
    do tipo <type>null</type>.
    Um <constant>E_WARNING</constant> é emitido desde o PHP 8.3.0,
    porque isso causará uma conversão implícita para um tipo <type>int</type> no futuro.
   </para>
   <para>
    O operador de decremento não tem efeito em strings não
    <link linkend="language.types.numeric-strings">numéricas</link>.
    Um <constant>E_WARNING</constant> é emitido desde o PHP 8.3.0,
    porque isso lançará um <classname>TypeError</classname> no futuro.
   </para>
  </warning>
  <note>
   <para>
    Objetos internos que suportam a sobrecarga de adição ou subtração
    também podem ser incrementados ou decrementados.
    Um exemplo de objeto assim é o <classname>GMP</classname>.
   </para>
  </note>
 </para>

 <sect2 xml:id="language.operators.increment.string">
  <title>Incremento de strings no estilo PERL</title>
  <warning>
   <simpara>
    Esse recurso está desencorajado desde o PHP 8.3.0.
    A função <function>str_increment</function> deve ser utilizada.
   </simpara>
  </warning>

  <para>
   É possível incremente strings não
   <link linkend="language.types.numeric-strings">numéricas</link>
   no PHP. A string precisa ser um texto ASCII.
   O efeito é incrementar a última letra até a próxima, e quando é alcançada a letra
   <literal>Z</literal> o incremento é carregado para a letra à esquerda.
   Por exemplo, <code>$a = 'Z'; $a++;</code> transforma <varname>$a</varname>
   em <literal>'AA'</literal>.
  </para>

  <example>
   <title>Exemplo de incremento de string estilo PERL</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== String alfabética ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// String alfanuméricas tem outro comportamento
echo '== Strings alfanuméricas ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== String alfabética ==
X
Y
Z
AA
AB
AC
== Strings alfanuméricas ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>

  <warning>
   <para>
    Se uma string alfanumérica pode ser interpretada como uma
    <link linkend="language.types.numeric-strings">string numérica</link>
    ela será convertida para um <type>int</type> ou <type>float</type>.
    Isso pode ser um problema para strings que parecem como números de ponto flutuante
    escritos em notação exponencial.
    A função <function>str_increment</function> não sofre desse problema
    de conversão implícita.
   </para>
   <example>
    <title>Strings alfanuméricas convertida para float</title>
    <programlisting role="php">
<![CDATA[
<?php
$s = "5d9";
var_dump(++$s);
var_dump(++$s);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "5e0"
float(6)
]]>
    </screen>
    <para>
     Isto ocorre porque o valor <literal>"5e0"</literal> é interpretado
     como <type>float</type> e é convertido para o valor de <literal>5.0</literal>
     antes de ser incrementado.
    </para>
   </example>
  </warning>
 </sect2>
</sect1>
