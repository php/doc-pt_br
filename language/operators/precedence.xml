<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: ae Status: ready -->
<sect1 xml:id="language.operators.precedence">
 <title>Precedência de Operadores</title>
 <titleabbrev>Precedência de Operadores</titleabbrev>
 <para>
  A precedência de um operador especifica quem tem mais prioridade quando há
  duas delas juntas. Por exemplo, na expressão <literal>1 +
  5 * 3</literal>, a resposta é <literal>16</literal> e não
  <literal>18</literal> porque o operador de multiplicação ("*")
  tem prioridade de precedência que o operador de adição ("+").
  Parênteses podem ser utilizados para forçar a precedência, se necessário.
  Assim, <literal>(1 + 5) * 3</literal> é avaliado como
  <literal>18</literal>.
 </para>
 <para>
  Quando operadores têm precedência igual a associatividade decide
  como os operadores são agrupados. Por exemplo "-" é associado à esquerda, de forma que
  <literal>1 - 2 - 3</literal> é agrupado como <literal>(1 - 2) - 3</literal>
  e resulta em <literal>-4</literal>. "=" por outro lado
  associa para a direita, de forma que <literal>$a = $b = $c</literal> é agrupado como
  <literal>$a = ($b = $c)</literal>.
 </para>
 <para>
  Operadores de igual precedência e associatividade não podem
  ser utilizados uns próximos aos outros. Por exemplo <literal>1 &lt; 2 &gt; 1</literal> é
  ilegal no PHP. A expressão <literal>1 &lt;= 1 == 1</literal> por outro
  lado é válida, porque o operador <literal>==</literal> tem menor
  precedência que o operador <literal>&lt;=</literal>.
 </para>
 <para>
  A associatividade somente faz sentido para operadores binários e ternários.
  Operadores unários são precedentes ou seguintes, de forma que essa outra noção não se aplica.
  Por exemplo <literal>!!$a</literal> somente pode ser agrupado como <literal>!(!$a)</literal>.
 </para>
 <para>
  O uso de parênteses, embora não estritamente necessário, pode melhorar
  a leitura do código ao deixar o agrupamento explícito em vez de depender
  da associatividade e precedências implícitos.
 </para>
 <para>
  A tabela seguinte mostra a precedência dos operadores, com a maior
  precedência no começo. Operadores com a mesma precedência estão na mesma linha,
  nesses casos a associatividade deles decidirá qual ordem eles serão avaliados.
  <table>
   <title>Precedência dos operadores</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Associação</entry>
      <entry>Operadores</entry>
      <entry>Informação Adicional</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(não aplicável)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry><link linkend="language.oop5.cloning">clone</link> e <link linkend="language.oop5.basic.new">new</link></entry>
     </row>
     <row>
      <entry>direita</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">aritmética</link></entry>
     </row>
     <row>
      <entry>(não aplicável)</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritméticos</link> (unário <literal>+</literal> e <literal>-</literal>),
       <link linkend="language.operators.increment">incremento/decremento</link>,
       <link linkend="language.operators.bitwise">bitwise</link>,
       <link linkend="language.types.typecasting">type cast</link>&listendand;
       <link linkend="language.operators.errorcontrol">controle de erro</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">tipos</link>
      </entry>
     </row>
     <row>
      <entry>(não aplicável)</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógicos</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link> (binário <literal>+</literal> e <literal>-</literal>),
       <link linkend="language.operators.array">array</link>&listendand;
       <link linkend="language.operators.string">string</link> (<literal>.</literal> anteriormente ao PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">bits</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">string</link> (desde o PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>não associativo</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparação</link>
      </entry>
     </row>
     <row>
      <entry>não associativo</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparação</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bits</link>&listendand;
       <link linkend="language.references">referências</link></entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bits</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bits</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógicos</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógicos</link>
      </entry>
     </row>
     <row>
      <entry>direita</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">null coalescing</link>
      </entry>
     </row>
     <row>
      <entry>não associativo</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">ternário</link>
       (esquerda anteriormente ao PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>direita</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">atribuição</link>
      </entry>
     </row>
     <row>
      <entry>(não aplicável)</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(não aplicável)</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(não aplicável)</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógicos</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógicos</link>
      </entry>
     </row>
     <row>
      <entry>esquerda</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógicos</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Associação</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// associação do operador ternário difere do C/C++
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2 (antes do PHP 8.0.0)

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  A precedência e associatividade apenas determinam como as expressões são
  agrupadas, mas não especificam a ordem de avaliação. O PHP
  (geralmente) não especifica em que ordem as expressões são avaliadas,
  então códigos que assumem ordens específicas de avaliação devem ser evitados
  porque o comportamento pode ser alterado entre versões do PHP ou dependendo
  do código em volta.
  <example>
   <title>Ordem de avaliação não definida</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
echo $a + $a++; // pode imprimir 2 ou 3

$i = 1;
$array[$i] = $i++; // pode definir o índice 1 ou 2
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><literal>+</literal>, <literal>-</literal> and <literal>.</literal> possuem a mesma precedência</title>
   <programlisting role="php">
<![CDATA[
<?php
$x = 4;
// esta linha pode resultar em uma saída inesperada:
echo "x menos um é igual a " . $x-1 . ", ou assim eu espero\n";
// porque é avaliada como esta linha (antes do PHP  8.0.0):
echo (("x menos um é igual a " . $x) - 1) . ", ou assim eu espero\n";
// a precedência desejada pode ser aplicada utilizando parênteses:
echo "x menos um é igual a " . ($x-1) . ", ou assim eu espero\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, ou assim eu espero
-1, ou assim eu espero
x menos um é igual a 3, ou assim eu espero
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   Embora o <literal>=</literal> tenha uma precedência menor que
   a maioria dos operadores, o PHP ainda permite expressões
   similares a <literal>if (!$a = foo())</literal>,
   onde o valor retornado de <literal>foo()</literal> é
   colocado em <varname>$a</varname>.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Concatenação de strings (<literal>.</literal>) tem uma precedência menor que
       adição/subtração (<literal>+</literal> e <literal>-</literal>) e
       shift de bits à esquerda/direita (<literal>&lt;&lt;</literal> e <literal>&gt;&gt;</literal>);
       anteriormente ele tinha a mesma precedência que <literal>+</literal> e <literal>-</literal>
       uma precedência maior que <literal>&lt;&lt;</literal> e <literal>&gt;&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       O operador ternário (<literal>? :</literal>) agora é não associativo;
       anteriormente associava a esquerda.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Depender da precedência da concatenação de strings (<literal>.</literal>) em relação
       à adição/subtração (<literal>+</literal> ou <literal>-</literal>) ou
       shift de bits a esquerda/direta (<literal>&lt;&lt;</literal> ou <literal>&gt;&gt;</literal>),
       ou seja, os usar numa mesma expressão, foi descontinuado.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Depender da associatividade à esquerda do operador ternário (<literal>? :</literal>),
       ou seja, o utilizar em várias expressões sem parênteses, foi descontinuado.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
