<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: leonardolara Status: ready --><!-- CREDITS: ae, leonardolara -->
<sect1 xml:id="language.operators.type">
 <title>Operadores de Tipo</title>
 <titleabbrev>Tipo</titleabbrev>
 <para>
  <literal>instanceof</literal> é usado para determinar se um variável do PHP
  é uma objeto instanciado de uma certa
  <link linkend="language.oop5.basic.class">classe</link>:
  <example>
   <title>Usando <literal>instanceof</literal> com classes</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> pode também ser usado para determinar se uma variável
  é um objeto instanciado de uma classe que herda de uma classe pai:
  <example>
   <title>Usando <literal>instanceof</literal> com herança</title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Para verificar se um objeto <emphasis>não</emphasis> é uma instância de uma classe, o
  <link linkend="language.operators.logical">operador lógico <literal>not</literal>
   </link> pode ser usado.
  <example>
   <title>Usando <literal>instanceof</literal> para verificar se o objeto <emphasis>não</emphasis> é uma
    instância da classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Por fim, <literal>instanceof</literal> pode também ser usado para determinar se
  uma variável é um objeto instanciado de uma classe que implementa uma
  <link linkend="language.oop5.interfaces">interface</link>:
  <example>
   <title>Usando <literal>instanceof</literal> para classe</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Embora <literal>instanceof</literal> é usualmente usado com um nome de classe literal,
  ele pode também ser usado com outro objeto ou uma variável string:
  <example>
   <title>Usando <literal>instanceof</literal> com outras variáveis</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b é um objeto da classe MyClass
var_dump($a instanceof $c); // $c é uma string 'MyClass'
var_dump($a instanceof $d); // $d é uma string 'NotMyClass'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof não lança erros se a variável testada não for
  um objeto, apenas retorna &false;. Constantes não são permitidas
  anteriormente ao PHP 7.3.0.
  <example>
   <title>Utilizando <literal>instanceof</literal> para testar outras variáveis</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = fopen('/tmp/', 'r');
var_dump($a instanceof stdClass); // $a é um inteiro
var_dump($b instanceof stdClass); // $b é NULL
var_dump($c instanceof stdClass); // $c é um recurso
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  Desde o PHP 7.3.0, constantes são permitidas à esquerda do operador
  <literal>instanceof</literal>.
  <example>
   <title>Utilizando <literal>instanceof</literal> em constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  Desde o PHP 8.0.0, <literal>instanceof</literal> pode ser utilizado em expressões arbitrárias.
  A expressão precisa estar dentro de parênteses e produzir uma <type>string</type>.
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>Usando <literal>instanceof</literal> em expressões arbitrárias</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  O operador <literal>instanceof</literal> tem uma variação funcional
  chamada <function>is_a</function>.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
