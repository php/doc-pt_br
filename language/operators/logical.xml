<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: ae Status: ready -->
<sect1 xml:id="language.operators.logical">
 <title>Operadores Lógicos</title>
 <titleabbrev>Lógica</titleabbrev>

 <table>
  <title>Operadores Lógicos</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Exemplo</entry>
     <entry>Nome</entry>
     <entry>Resultado</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>$a and $b</entry>
     <entry>E</entry>
     <entry>&true; se ambos <varname>$a</varname> e <varname>$b</varname> são &true;.</entry>
    </row>
    <row>
     <entry>$a or $b</entry>
     <entry>OU</entry>
     <entry>&true; se <varname>$a</varname> ou <varname>$b</varname> é &true;.</entry>
    </row>
    <row>
     <entry>$a xor $b</entry>
     <entry>XOR</entry>
     <entry>&true; se <varname>$a</varname> ou <varname>$b</varname> é &true;, mas não ambos ao mesmo tempo.</entry>
    </row>
    <row>
     <entry>! $a</entry>
     <entry>Não</entry>
     <entry>&true; se <varname>$a</varname> não é &true;.</entry>
    </row>
    <row>
     <entry>$a &amp;&amp; $b</entry>
     <entry>E</entry>
     <entry>&true; se ambos <varname>$a</varname> e <varname>$b</varname> são &true;.</entry>
    </row>
    <row>
     <entry>$a || $b</entry>
     <entry>OU</entry>
     <entry>&true; se <varname>$a</varname> ou <varname>$b</varname> é &true;.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <simpara>
  A razão para as duas variantes dos operandos "and" e "or"
  é que eles operam com precedências diferentes. (Veja
  <link linkend="language.operators.precedence">Precedência
   de Operadores</link>.)
 </simpara>
 <example>
  <title>Ilustrando operadores lógicos</title>
  <programlisting role="php">
<![CDATA[
<?php

// --------------------
// foo() nunca será chamada porque toda a expressão sofre curto circuito

$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// --------------------
// "||" tem maior precedência que "or"

// O resultado da expressão (false || true) é atribuido em $e
// Funciona como: ($e = (false || true))
$e = false || true;

// A constante false é atribuída a $f antes que o "or" ocorra
// Funciona como: (($f = false) or true)
$f = false or true;

var_dump($e, $f);

// --------------------
// "&&" tem maior precedência que "and"

// O resultado da expressão (true && false) é atribuído em $g
// Funciona como: ($g = (true && false))
$g = true && false;

// A constante true é atribuída em $h antes que o "and" ocorra
// Funciona como: (($h = true) and false)
$h = true and false;

var_dump($g, $h);
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
bool(true)
]]>
  </screen>
 </example>
</sect1>
