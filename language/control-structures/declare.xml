<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 17297101a4e423420de52d6ef389403bfbd3cf7f Maintainer: ae Status: ready --><!-- CREDITS: diegopires,ae,fabioluciano,geekcom -->

<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>declare</title>
 <?phpdoc print-version-for="declare"?>
 <para>
  A instrução <literal>declare</literal> é usada
  para definir diretivas de execução para um bloco de código.
  A sintaxe do <literal>declare</literal> é similar à
  sintaxe de outros construtos de controle de fluxo:
  <informalexample>
   <programlisting>
<![CDATA[
declare (directive)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  A seção <literal>directive</literal> permite que
  o comportamento do bloco do <literal>declare</literal> seja
  definido.
  Atualmente três diretivas são reconhecidas: a diretiva
  <literal>ticks</literal> (Veja abaixo para mais
  informações da diretiva
  <link linkend="control-structures.declare.ticks">ticks</link>),
  a diretiva <literal>encoding</literal> (Veja abaixo para mais
  informações da diretiva
  <link linkend="control-structures.declare.encoding">encoding</link>)
  e a diretiva <literal>strict_types</literal> (Veja abaixo para mais
  informações na seção
  <link linkend="language.types.declarations.strict">strict</link>
  sobre argumentos de função).
 </para>

 <para>
  As diretivas são manipuladas na compilação do arquivo, somente literais podem
  ser usadas como valores da diretiva. Variáveis e constantes não podem ser usadas. Para
  ilustrar:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Isto é válido:
declare(ticks=1);

// isto é inválido:
const TICK_VALUE = 1;
declare(ticks=TICK_VALUE);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  A parte <literal>statement</literal> do bloco do
  <literal>declare</literal> será executada - como
  é executada e quais os efeitos colaterais que ocorrem durante
  a execução depende da diretiva definida no bloco
  <literal>directive</literal>.
 </para>
 <para>
  O construtor do <literal>declare</literal> também pode ser usado
  no escopo global, afetando todo o código que o segue (entretanto se o arquivo com o
  <literal>declare</literal> for incluído, não afetará o
  arquivo principal).
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Os exemplos abaixo tem o mesmo efeito

// Pode ser usado assim:
declare(ticks=1) {
    // script aqui
}

// ou assim:
declare(ticks=1);
// script inteiro aqui
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.declare.ticks">
  <title>Ticks</title>
  <para>Um 'tick' é um evento que ocorre a cada
  <varname>N</varname> declarações de baixo nível executadas
  pelo interpretador dentro do bloco <literal>declare</literal>.
  O valor de <varname>N</varname> é especificado
  usando <code>ticks=<varname>N</varname></code>
  dentro do bloco <literal>declare</literal> da seção
  <literal>directive</literal>.
 </para>
 <para>
  Nem todas declarações são passíveis de executar um 'tick'. Normalmente, expressões de
  condições e argumentos de expressões não são.
 </para>
 <para>
  Os eventos que serão executados a cada tick são especificados usando a função
  <function>register_tick_function</function>. Veja o exemplo
  abaixo para mais detalhes. Note que mais de um evento pode ser executado
  para cada tick.
 </para>
 <para>
  <example>
   <title>Exemplo de uso do Tick</title>
   <programlisting role="php">
<![CDATA[
<?php

declare(ticks=1);

// A função a ser chamada em cada evento tick
function tick_handler()
{
    echo "tick_handler() chamada.\n";
}

register_tick_function('tick_handler'); // Causa um evento tick

$a = 1; // Causa um evento tick

if ($a > 0) {
    $a += 2; // Causa um evento tick
    print($a); // Causa um evento tick
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  See also <function>register_tick_function</function> and
  <function>unregister_tick_function</function>.
 </simpara>
 </sect2>
 <sect2 xml:id="control-structures.declare.encoding">
  <title>Encoding</title>
  <para>
    O encoding de um script pode ser especificado em cada arquivo com uma diretiva <literal>encoding</literal>.
  <example>
   <title>Declarando o encoding do script.</title>
    <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// código aqui
?>
]]>
    </programlisting>
   </example>
  </para>

  <caution>
   <simpara>
    Quando usada com namespaces, a única sintaxe válida para declarar
    é <literal>declare(encoding='...');</literal> onde <literal>...</literal>
    é o valor do encoding.  <literal>declare(encoding='...') {}</literal>
    irá resultar em um erro de sintaxe quando usada com namespaces.
   </simpara>
  </caution>
  <para>
   Veja mais <link linkend="ini.zend.script-encoding">zend.script_encoding</link>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
