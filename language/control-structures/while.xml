<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: @lhsazevedo Status: ready --><!-- CREDITS: fabioluciano, @lhsazevedo -->

<sect1 xml:id="control-structures.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>while</title>
 <?phpdoc print-version-for="while"?>
 <para>
  Laços <literal>while</literal> são os mais simples tipos de laços do
  PHP. Possui comportamento semelhante ao C. O formato básico de uma
  declaração <literal>while</literal> é:
  <informalexample>
   <programlisting>
<![CDATA[
while (expr)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  O propósito da declaração <literal>while</literal> é simples. Ele
  dirá ao PHP para executar as declarações aninhadas repetidamente, enquanto
  a expressão do <literal>while</literal> forem avaliadas como
  &true;. O valor da expressão é checado a
  cada vez que o laço é iniciado, então, mesmo seu valor
  mude durante a a execução das declarações aninhadas, a execução
  não será interrompida até o final da iteração ( cada vez que o PHP executa
  as declarações dentro do laço é uma iteração). Se a
  expressão do <literal>while</literal> for avaliada como
  &false; desde o início, as declarações
  aninhadas não serão executadas nenhuma vez.
 </simpara>
 <para>
  Similar a declaração <literal>if</literal>, pode-se agrupar
  múltiplas declarações no mesmo laço <literal>while</literal>
  delimitando o grupo de declarações por chaves, ou
  utilizando a sintaxe alternativa:
  <informalexample>
   <programlisting>
<![CDATA[
while (expr):
    statement
    ...
endwhile;
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Os exemplos a seguir são idênticos, e ambos imprimem os números de
  1 a 10.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* example 1 */

$i = 1;
while ($i <= 10) {
    echo $i++;  /* the printed value would be
                   $i before the increment
                   (post-increment) */
}

/* example 2 */

$i = 1;
while ($i <= 10):
    echo $i;
    $i++;
endwhile;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
