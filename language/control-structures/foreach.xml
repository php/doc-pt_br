<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e49940b757b35b8ef26bb64380c231eda7b49fc4 Maintainer: lhsazevedo Status: ready --><!-- CREDITS: fabioluciano,geekcom,lhsazevedo -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  O construtor <literal>foreach</literal> fornece uma maneira fácil de
  iterar sobre arrays. O <literal>foreach</literal> funciona somente em arrays
  e objetos, e emitirá um erro ao tentar usá-lo em uma variável
  com um tipo de dado diferente ou em uma variável não inicializada. Possui
  duas sintaxes:
  <informalexample>
   <programlisting>
<![CDATA[
foreach (iterable_expression as $valor)
    statement
foreach (iterable_expression as $chave => $valor)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  A primeira forma percorre o iterável dado por
  <literal>iterable_expression</literal>. A cada iteração, o valor
  do elemento atual é atribuído a <literal>$valor</literal>.
 </simpara>
 <simpara>
  A segunda forma var, adicionalmente, atribuir a chave do elemento corrente a
  variável <literal>$chave</literal> a cada iteração.
 </simpara>
 <simpara>
  Note que o <literal>foreach</literal> não modifica o ponteiro interno
  do array, que é usado por funções como <function>current</function>
  e <function>key</function>.
 </simpara>
 <simpara>
  É possível
  <link linkend="language.oop5.iterations">customizar a iteração em objetos</link>.
 </simpara>

 <para>
  Para modificar diretamente elementos de um array dentro de um laço, preceda
 <literal>$valor</literal> com  &amp;. Neste caso, o valor será atribuído por
 <link linkend="language.references">referência</link>.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$valor) {
    $valor = $valor * 2;
}
// $arr is now array(2, 4, 6, 8)
unset($valor); // quebra a referência com o último elemento
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <warning>
  <para>
   A referência ao <literal>$valor</literal> e o último elemento do array
   permanecerá inalterado mesmo após a iteração do <literal>foreach</literal>.
   É recomendado destruí-lo utilizando a função <function>unset</function>.
   Caso contrário você experienciará o seguinte comportamento:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$valor) {
    $valor = $valor * 2;
}
// $arr agora é array(2, 4, 6, 8)

// sem um unset($valor), $valor continuará como referência ao último item: $arr[3]

foreach ($arr as $chave => $valor) {
    // $arr[3] será atualizado com cada valor de $arr...
    echo "{$chave} => {$valor} ";
    print_r($arr);
}
// ...até que, o segundo e último valor é copiado para o último valor

// saída:
// 0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
// 1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
// 2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
// 3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
?>
]]>
   </programlisting>
  </informalexample>
 </warning>
 <para>
  É possível iterar o valor de um array constante por referência
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$valor) {
    $valor = $valor * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <note>
   <para>
    O <literal>foreach</literal> não possui suporte a habilidade
    de suprimir mensagens de erro utilizando
    <literal linkend="language.operators.errorcontrol">@</literal>.
   </para>
  </note>
 </para>
 <para>
  Mais alguns exemplos para demonstrar o uso:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* Exemplo foreach1: somente valores */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
    echo "Current value of \$a: $v.\n";
}

/* Exemplo foreach 2: valor com acesso manual (apenas ilustrativo) */

$a = array(1, 2, 3, 17);

$i = 0; /* apenas para ilustrar */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* Exemplo foreach 3: chave e valor */

$a = array(
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* Exemplo foreach 4: arrays multi dimencionais */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* Exemplo foreach 5: arrays dinâmicos */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.foreach.list">
  <title>Desempacotando arrays aninhados com o construtor list()</title>
  <?phpdoc print-version-for="foreach.list"?>

  <para>
   É possível iterar sobre um array de arrays e desempacotar
   arrays aninhados em variáveis do laço fornecendo o construtor <function>list</function>
   como valor.
  </para>

  <para>
   Por exemplo:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b)) {
    // $a contém o primeiro elemento do array aninhado,
    // e $b contém o segundo elemento.
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Pode-se se fornecer menos elementos ao construtor <function>list</function> aos que
   existem no array aninhado, neste caso, os valores do array que sobrarem serão
   ignorados.

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a)) {
    // Veja que não existe $b aqui.
    echo "$a\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
3
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Um aviso será gerado se não houver elementos suficientes no array para o preenchimento
   do construtor <function>list</function>:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b, $c)) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
