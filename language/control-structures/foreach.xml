<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 53a400680d0cb2ddabd4493fb9846533c422e90d Maintainer: leonardolara Status: ready --><!-- CREDITS: fabioluciano,geekcom,lhsazevedo,leonardolara -->
<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>foreach</title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  O construtor <literal>foreach</literal> fornece uma maneira fácil de
  iterar sobre <type>array</type>s e objetos <interfacename>Traversable</interfacename>.
  O <literal>foreach</literal> emitirá um erro quando usado com
  uma variável contendo um tipo de dado diferente ou com uma variável não inicializada.
  <informalexample>
   <simpara>
    <literal>foreach</literal> pode, opcionalmente, obter a chave (<literal>key</literal>) de cada elemento:
   </simpara>
   <programlisting>
<![CDATA[
foreach (expressão_iterável as $valor) {
    lista_de_instruções
}

foreach (expressão_iterável as $chave => $valor) {
    lista_de_instruções
}
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  A primeira forma percorre o iterável dado por
  <literal>iterable_expression</literal>. A cada iteração, o valor
  do elemento atual é atribuído a <literal>$valor</literal>.
 </simpara>
 <simpara>
  A segunda forma var, adicionalmente, atribuir a chave do elemento corrente a
  variável <literal>$chave</literal> a cada iteração.
 </simpara>
 <simpara>
  Note que o <literal>foreach</literal> não modifica o ponteiro interno
  do array, que é usado por funções como <function>current</function>
  e <function>key</function>.
 </simpara>
 <simpara>
  É possível
  <link linkend="language.oop5.iterations">customizar a iteração em objetos</link>.
 </simpara>

 <example>
  <title>Usos comuns de <literal>foreach</literal></title>
  <programlisting role="php">
<![CDATA[
<?php

/* Exemplo: somente valor */
$array = [1, 2, 3, 17];

foreach ($array as $value) {
    echo "Elemento atual de \$array: $value.\n";
}

/* Exemplo: chave e valor */
$array = [
    "um" => 1,
    "dois" => 2,
    "três" => 3,
    "dezessete" => 17
];

foreach ($array as $key => $value) {
    echo "Chave: $key => Valor: $value\n";
}

/* Exemplo: arrays chave-valor multidimensionais */
$grid = [];
$grid[0][0] = "a";
$grid[0][1] = "b";
$grid[1][0] = "y";
$grid[1][1] = "z";

foreach ($grid as $y => $row) {
    foreach ($row as $x => $value) {
        echo "Valor na posição x=$x e y=$y: $value\n";
    }
}

/* Exemplo: arrays dinâmicos */
foreach (range(1, 5) as $value) {
    echo "$value\n";
}
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   <literal>foreach</literal> não suporta a capacidade de
   supressão de mensagens de erro usando o operador
   <link linkend="language.operators.errorcontrol"><literal>@</literal></link>.
  </para>
 </note>

 <sect2 xml:id="control-structures.foreach.list">
  <title>Desempacotando arrays aninhados</title>
  <?phpdoc print-version-for="foreach.list"?>
  <para>
   É possível iterar sobre um array de arrays e desempacotar o array aninhado
   em variáveis do laço usando
   <link linkend="language.types.array.syntax.destructuring">desestruturação de array</link>
   através de <literal>[]</literal> ou usando o constructo de linguagem <function>list</function>
   como o valor.

   <note>
    <simpara>
     Observe que a
     <link linkend="language.types.array.syntax.destructuring">desestruturação de array</link>
     através de <literal>[]</literal> só é possível a partir do PHP 7.1.0.
    </simpara>
   </note>
  </para>

  <para>
   <informalexample>
    <simpara>
     Em ambos os exemplos a seguir, <literal>$a</literal> será definida para
     o primeiro elemento do array aninhado e <literal>$b</literal>
     conterá o segundo elemento:
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b]) {
    echo "A: $a; B: $b\n";
}

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Ao fornecer menos variáveis que o número de elementos no array,
   os elementos restantes serão ignorados.
   Da mesma forma, elementos podem ser pulados usando uma vírgula:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2, 3],
    [3, 4, 6],
];

foreach ($array as [$a, $b]) {
    // Observe que não existe $c aqui.
    echo "$a $b\n";
}

foreach ($array as [, , $c]) {
    // Pulando $a e $b
    echo "$c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1 2
3 4
5
6
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Um aviso será gerado se não houver elementos suficientes no array para o preenchimento
   do construtor <function>list</function>:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as [$a, $b, $c]) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="control-structures.foreach.reference">
  <title>foreach e referências</title>
  <para>
   É possível modificar elementos de array diretamente dentro de um laço, precedendo
   <literal>$value</literal> com <literal>&amp;</literal>.
   Neste caso, o valor será atribuído por
   <link linkend="language.references">referência</link>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr agora é [2, 4, 6, 8]
unset($value); // quebra a referência com o último elemento
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <warning>
   <simpara>
    A referência a um <literal>$value</literal> do último elemento do array
    permanece mesmo depois do laço <literal>foreach</literal>. É recomendado
    destruir essas referências usando <function>unset</function>.
    Caso contrário, o comportamento a seguir irá ocorrer:
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [1, 2, 3, 4];
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr agora é [2, 4, 6, 8]

// sem um unset($value), $value ainda é uma referência ao último item: $arr[3]

foreach ($arr as $key => $value) {
    // $arr[3] será atualizado com cada valor de $arr...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...até finalmente o penúltimo valor ser copiado no último valor
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
]]>
    </screen>
   </informalexample>
  </warning>
  <example>
  <title>Iterando valores de um array constante por referência</title>
   <programlisting role="php">
<![CDATA[
<?php
foreach ([1, 2, 3, 4] as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.types.array">array</link></member>
   <member><interfacename>Traversable</interfacename></member>
   <member><link linkend="language.types.iterable">iterable</link></member>
   <member><function>list</function></member>
  </simplelist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
