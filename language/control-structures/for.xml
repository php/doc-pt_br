<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: @lhsazevedo Status: ready --><!-- CREDITS: diegopires, fabioluciano, @lhsazevedo -->

<sect1 xml:id="control-structures.for" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>for</title>
 <?phpdoc print-version-for="for"?>
 <para>
  Os laços <literal>for</literal> são os mais complexo no PHP.
  Possui comportamento semelhante ao C. A sintaxe do laço
  <literal>for</literal> é:
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  A primeira expressão (<varname>expr1</varname>) é
  avaliada (executada), uma vez, incondicionalmente, no início
  do laço.
 </simpara>
 <simpara>
  No começo de cada iteração a
  <varname>expr2</varname> é avaliada. Se a avaliada como
  &true;, o laço continuará e as instruções aninhada
  serão executadas. Se avaliada como
  &false;, a execução do laço terminará.
 </simpara>
 <simpara>
  No final de cada iteração, a <varname>expr3</varname> é
  avaliada (executada).
 </simpara>
 <simpara>
  Cada uma das expressões podem ser vazias ou conter múltiplas
  expressões separadas por vírgulas. Na <varname>expr2</varname>, todas
  as expressões separadas por vírgula são avaliadas mas o resultado é
  obtido da última parte.
  Se a <varname>expr2</varname> estiver vazia significa que o laço deve
  ser executado indefinidamente (O PHP considera implicitamente como
  &true;, igual ao C). Isto não é inútil
  como se imagina, pois muitas vezes deseja-se interromper o laço utilizando
  a instrução <link
  linkend="control-structures.break"><literal>break</literal></link>
  ao invés de usar a expressão verdade do
  <literal>for</literal>.
 </simpara>
 <para>
  Analise os seguintes exemplos. Todos exibem números
  de 1 até 10:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* exemplo 1 */

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

/* exemplo 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }
    echo $i;
}

/* exemplo 3 */

$i = 1;
for (; ; ) {
    if ($i > 10) {
        break;
    }
    echo $i;
    $i++;
}

/* exemplo 4 */

for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  É claro que o primeiro exemplo aparenta ser o mais simpático (ou
  talvez o quarto), mas pode-se achar que o uso de expressões
  vazias no laço <literal>for</literal>, seja vantajoso em algumas
  ocasiões.
 </simpara>
 <para>
  O PHP também suporta a sintaxe alternativa "dois pontos" para o
  laço <literal>for</literal>.
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3):
    statement
    ...
endfor;
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  É comum, para muitos usuários, iterar em arrays como no
  exemplo abaixo.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Esta é uma array com alguns dados que devem ser modificadoswant to modify
 * durante a execuçao do loop for.
 */
$pessoas = array(
    array('nome' => 'Lucas', 'salt' => 856412),
    array('nome' => 'André', 'salt' => 215863)
);

for($i = 0; $i < count($pessoas); ++$i) {
    $pessoas[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  O código acima pode se tornar lento, pois o tamanho do array será calculado
  a cada iteração. Desde que o tamanho nunca mude, o laço pode ser facilmente
  otimizado usando uma variável intermediária para armazenar o tamanho ao invés
  de executar repetidamente o <function>count</function>:
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$pessoas = array(
    array('nome' => 'Lucas', 'salt' => 856412),
    array('nome' => 'André', 'salt' => 215863)
);

for($i = 0, $tamanho = count($pessoas); $i < $tamanho; ++$i) {
    $pessoas[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
