<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16389a7b31069481d6c8c0705172bee5ef1ddf5f Maintainer: lhsazevedo Status: ready --><!-- CREDITS: diegopires,ae,diegopires,fabioluciano,geekcom,lhsazevedo,adiel -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>continue</title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  <literal>continue</literal> é usado em estruturas de repetição para
  pular o restante da iteração atual do laço e continuar a execução
  na validação da condição e depois no início da próxima iteração.
 </simpara>
 <note>
  <simpara>
   No PHP, a instrução
   <link linkend="control-structures.switch">switch</link> é
   considerada uma estrutura de repetição para os propósitos de
   <literal>continue</literal>. <literal>continue</literal> se comporta como
   <literal>break</literal> (quando nenhum argumento é passado), mas emitirá
   um aviso, pois é provável que seja um erro. Se um
   <literal>switch</literal> estiver dentro de um laço,
   <literal>continue 2</literal> continuará na próxima iteração
   do laço externo.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> aceita um argumento numérico opcional
  que informa quantos níveis de laços aninhados ele deve pular.
  O valor padrão é <literal>1</literal>, pulando assim
  para o final do laço atual.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = ['zero', 'um', 'dois', 'três', 'quatro', 'cinco', 'seis'];
foreach ($array as $chave => $valor) {
    if (!($chave % 2)) { // pula membros com chaves pares
        continue;
    }
    echo $valor . "\n";
}
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
um
três
cinco
]]>
   </screen>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
while ($i++ < 5) {
    echo "Externo\n";
    while (1) {
        echo "Meio\n";
        while (1) {
            echo "Interno\n";
            continue 3;
        }
        echo "Isso nunca é exibido.\n";
    }
    echo "Nem isso.\n";
}
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
Externo
Meio
Interno
Externo
Meio
Interno
Externo
Meio
Interno
Externo
Meio
Interno
Externo
Meio
Interno
]]>
   </screen>
  </informalexample>
 </para>
 <para>
  Omitir o ponto e vírgula após <literal>continue</literal> pode causar
  confusão. Abaixo está um exemplo do que não se deve fazer.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
   </programlisting>
   <para>
    O resultado esperado poderia ser:
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Lista de modificações de <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.3.0</entry>
      <entry>
       <literal>continue</literal> em um <literal>switch</literal> que está tentando agir como uma declaração <literal>break</literal> para o
       <literal>switch</literal> gerará um <constant>E_WARNING</constant>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
