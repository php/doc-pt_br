<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cdc9d28d334bbc08386fecf8aade66080004a9dd Maintainer: ae Status: ready --><!-- CREDITS: fabioluciano,geekcom,lhsazevedo,ae -->

<sect1 xml:id="control-structures.switch" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>switch</title>
 <?phpdoc print-version-for="switch"?>
 <simpara>
  A declaração <literal>switch</literal> é similar a uma série de
  declarações IF na mesma expressão. Em muitos casos, se deseja
  comparar as mesmas variáveis (ou expressões), com
  diferentes valores, e executar pedaços diferentes de código dependendo
  de qual valor ela é igual. Esta é exatamente a serventia da
  declaração <literal>switch</literal>.
 </simpara>
 <note>
  <simpara>
   Note que ao contrário de outras linguagens, a declaração
   <link linkend="control-structures.continue">continue</link>
   aplica-se ao <literal>switch</literal> e age similarmente ao <literal>break</literal>. Se
   possuir um <literal>switch</literal> dentro de um laço, e deseja continuar na próxima iteração
   do laço externo, utilize <literal>continue 2</literal>.
  </simpara>
 </note>
 <note>
  <para>
   Note que o switch/case faz
   <link linkend="types.comparisions-loose">comparação frouxa</link>.
  </para>
 </note>

 <para>
  No exemplo a seguir, cada bloco de código é equivalente.
  Um usa uma série de declarações <literal>if</literal> e
  <literal>elseif</literal>, e o outra usa uma
  declaração <literal>switch</literal>. A saída é a mesm a em ambos os casos.
  <example>
   <title>Estrutura do <literal>switch</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
// Esta declaração switch:

switch ($i) {
    case 0:
        echo "i é igual a 0";
        break;
    case 1:
        echo "i é igual a 1";
        break;
    case 2:
        echo "i é igual a 2";
        break;
}

// É equivalente a:

if ($i == 0) {
    echo "i é igual a 0";
} elseif ($i == 1) {
    echo "i é igual a 1";
} elseif ($i == 2) {
    echo "i é igual a 2";
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  É importante entender como a declaração <literal>switch</literal>
  é executada a fim de evitar enganos. A declação
  <literal>switch</literal> executa linha por linha
  (na verdade, declaração por declaração). No início nenhum código é
  executado. Somente quando uma declaração <literal>case</literal> é encontrada,
  cuja expressão avalia um valor que corresponde ao valor do
  <literal>switch</literal>, o PHP começará a executar a
  declaração. O PHP continuará a executar a declaração até o fim do bloco
  <literal>switch</literal>, ou até a primeira declaração
  <literal>break</literal> encontrada. Se não for escrita uma declaração
  <literal>break</literal> ao final da lista de declarações do case,
  o PHP continuará executando as declarações dos próximos
  cases. Por exemplo:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        echo "i é igual a 0";
    case 1:
        echo "i é igual a 1";
    case 2:
        echo "i é igual a 2";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Neste exemplo, se a variável <varname>$i</varname> for igual a 0, o PHP executará todos as
  declarações echo! Se a variável <varname>$i</varname> for igual a 1, o PHP executará as duas
  últimas declarações echo. Somente se obterá o comportamento esperado ('i equals 2'
  será exibido), se <varname>$i</varname> for igual a 2. Sendo assim,
  é importante não esquecer as declarações <literal>break</literal>
  (mesmo quando se quer evitar, de propósito, sua omissão em
  certas circunstâncias).
 </simpara>
 <simpara>
  Em uma declaração <literal>switch</literal>, a condição é
  avaliada somente uma vez, e o resultado é comparado a cada
  declaração <literal>case</literal>. Em uma declaração <literal>elseif</literal>.
  a condição é avaliada outra vez. Se a condição for
  mais complicada que uma simples comparação e/ou está em um laço pequeno,
  a declaração <literal>switch</literal> pode ser mais rápida.
 </simpara>
 <para>
  A lista de declarações de um case também podem estar vazia,
  passando o controle da lista de declarações para o próximo case.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
    case 1:
    case 2:
        echo "i é menor que 3 mas não é negativo";
        break;
    case 3:
        echo "i é 3";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Um case especial é o <literal>default</literal>. Este case corresponde
  a tudo que não foi correspondido pelos outros cases. Por exemplo:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        echo "i é igual a 0";
        break;
    case 1:
        echo "i é igual a 1";
        break;
    case 2:
        echo "i é igual a 2";
        break;
    default:
       echo "i não é igual a 0, 1 ou 2";
}
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Múltiplos casos padrões irão emitir um
    erro <constant>E_COMPILE_ERROR</constant>.
   </simpara>
  </note>
  <note>
   <simpara>
    Tecnicamente o caso <literal>default</literal> pode ser listado
    em qualquer ordem. Ele será usado apenas se nenhum outro caso corresponder.
    No entando, por conversão, é melhor inseri-lo no fim como a
    última ramificação.
   </simpara>
  </note>
 </para>
 <para>
  Se nenhuma ramificação <literal>case</literal> corresponder, e não existe nenhuma ramificação
  <literal>default</literal>, então nenhum código será executado, assim como se nenhuma declaração <literal>if</literal> fosse verdadeira.
 </para>
 <para>
  Um valor de caso pode ser dado como uma expressão. No entanto, essa expressão será
  avaliada de forma isolada, e então será frouxamente comparada com o valor do switch. Isso significa que
  ela não pode ser usada para avaliações complexas do valor do switch. Por exemplo:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$alvo = 1;
$inicio = 3;

switch ($alvo) {
    case $inicio - 1:
        print "A";
        break;
    case $inicio - 2:
        print "B";
        break;
    case $inicio - 3:
        print "C";
        break;
    case $inicio - 4:
        print "D";
        break;
}

// Imprime "B"
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Para comparações mais complexas, o valor &true; pode ser usado como o valor do switch.
  Ou, alternativamente, <literal>if</literal>-<literal>else</literal> em vez do <literal>switch</literal>.
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
$deslocamento = 1;
$inicio = 3;

switch (true) {
    case $inicio - $deslocamento === 1:
        print "A";
        break;
    case $inicio - $deslocamento === 2:
        print "B";
        break;
    case $inicio - $deslocamento === 3:
        print "C";
        break;
    case $inicio - $deslocamento === 4:
        print "D";
        break;
}

// Imprime "B"
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  A sintaxe alternativa das estruturas de controle é suportada por
  switches. Para mais informações, veja <link
  linkend="control-structures.alternative-syntax">Sintaxe alternativa
  para estruturas de controle</link>.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i):
    case 0:
        echo "i é igual a 0";
        break;
    case 1:
        echo "i é igual a 1";
        break;
    case 2:
        echo "i é igual a 2";
        break;
    default:
        echo "i não é igual a 0, 1 ou 2";
endswitch;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  É possível utilizar o ponto e vírgula ao invés dos dois pontos em um case, como:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch($cerveja)
{
    case 'amstel';
    case 'brahma';
    case 'stella';
    case 'heineken';
        echo 'Boa escolha';
        break;
    default;
        echo 'Por favor faça uma nova seleção...';
        break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>&match;</member>
   </simplelist>
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
