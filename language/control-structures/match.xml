<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 78d273c6d4b08d0ee04b69bc3a9230a39b99d60f Maintainer: lhsazevedo Status: ready --><!-- CREDITS: lhsazevedo -->

<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>match</title>
 <?phpdoc print-version-for="match"?>
 <para>
  A expressão <literal>match</literal> ramifica a avaliação baseada em uma
  verificação de identidade de um valor.
  Semelhante a uma declaração <literal>switch</literal>, uma
  expressão <literal>match</literal> possui uma expressão sujeito que é
  comparada com múltiplas alternativas. Ao contrário da <literal>switch</literal>,
  ela irá avaliar para um valor assim como as expressões ternárias.
  Diferente da <literal>switch</literal>, a comparação é uma verificação de identidade
  (<code>===</code>) em vez de uma comparação de equalidade fraca (<code>==</code>).
  Expressões match estão diponíveis a partir do PHP 8.0.0.
 </para>

 <example>
  <title>Estrutura de uma expressão <literal>match</literal></title>
  <programlisting role="php">
<![CDATA[
<?php
$valor_de_retorno = match (expressao_sujeito) {
    expressao_condicional_unica => expressao_de_retorno,
    expressao_condicional1, expressao_condicional2 => expressao_de_retorno,
};
?>
]]>
  </programlisting>

   <example>
   <title>Basic <literal>match</literal> usage</title>
    <programlisting role="php">
<![CDATA[
<?php
$comida = 'bolo';

$valor_de_retorno = match ($comida) {
    'apple' => 'Essa comida é uma maçã',
    'bar' => 'Essa comida é um bar',
    'bolo' => 'Essa comida é um bolo',
};

var_dump($valor_de_retorno);
?>
]]>
  </programlisting>
  &example.outputs;
   <screen>
<![CDATA[
string(19) "Essa comida é um bolo"
]]>
   </screen>
  </example>

  <note>
   <simpara>
    O resultado de uma expressão <literal>match</literal> não precisa ser usado.
   </simpara>
  </note>
  <note>
   <simpara>
    Uma expressão <literal>match</literal> <emphasis>deve</emphasis> ser
    terminada por um ponto e vírgula <literal>;</literal>.
   </simpara>
  </note>
 </example>

 <para>
  A expressão <literal>match</literal> é similar a uma
  declaração <literal>switch</literal> mas tem algumas diferenças importantes:

  <itemizedlist>
   <listitem>
    <simpara>
     Um braço <literal>match</literal> compara valores estritamente (<code>===</code>) em vez
     de frouxamente como a declaração switch faz.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Uma expressão <literal>match</literal> retorna um valor.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Braços <literal>match</literal> não seguem para casos posteriores da maneira
     que declarações <literal>switch</literal> seguem.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Uma expressão <literal>match</literal> deve ser exaustiva.
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Assim como as declarações <literal>switch</literal>, expressões
  <literal>match</literal> são executadas braço de correspondência por braço de correspondência.
  No início, nenhum código é executado.
  A expressões condicionais só são avaliadas se todas as expressões condicionais
  anteriores não corresponderem à expressão sujeito.
  Apenas a expressão de retorno pertencente à expressão condicional
  de correspondência será avaliada.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$resultado = match ($x) {
    foo() => ...,
    $this->bar() => ..., // $this->bar() não é chamado se foo() === $x
    $this->baz => beep(), // beep() não é chamado a não ser que $x === $this->baz
    // etc.
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  Braços da expressão <literal>match</literal> podem conter múltiplas expressões
  separadas por uma vírgula. Isso é um OR lógico, e é uma forma abreviada para múltimplos
  braços de correspondência com o mesmo lado direito.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$resultado = match ($x) {
    // Este braço de correspondência:
    $a, $b, $c => 5,
    // É equivalente a estes três braços de correspondência:
    $a => 5,
    $b => 5,
    $c => 5,
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Um caso especial é o padrão <literal>default</literal>.
  Esse padrão atende a qualquer coisa que não tenha sido atendida anteriormente.
  Por exemplo:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$resultadoDaExpressao = match ($condicao) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Múltiplos padrões default irão emitir um
    erro <constant>E_FATAL_ERROR</constant>.
   </simpara>
  </note>
 </para>

 <para>
  Uma expressão <literal>match</literal> deve ser exaustiva. Se a
  expressão sujeito não for tratada por nenhum braço de correspondência um
  <classname>UnhandledMatchError</classname> é lançado.
 </para>

 <example>
  <title>Exemplo de uma expressão match não tratada</title>
  <programlisting role="php">
<![CDATA[
<?php
$condicao = 5;

try {
    match ($condicao) {
        1, 2 => foo(),
        3, 4 => bar(),
    };
} catch (\UnhandledMatchError $e) {
    var_dump($e);
}
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(UnhandledMatchError)#1 (7) {
  ["message":protected]=>
  string(33) "Unhandled match value of type int"
  ["string":"Error":private]=>
  string(0) ""
  ["code":protected]=>
  int(0)
  ["file":protected]=>
  string(9) "/in/ICgGK"
  ["line":protected]=>
  int(6)
  ["trace":"Error":private]=>
  array(0) {
  }
  ["previous":"Error":private]=>
  NULL
}
]]>
  </screen>
 </example>

 <sect2>
  <title>Usando expressões match para tratar verificações sem identidade</title>
  <para>
   É possível usar uma expressão <literal>match</literal> para tratar
   casos condicionais sem identidade usando <code>true</code> como a expressão
   sujeito.
  </para>

  <example>
   <title>Usando uma expressão match generalizada para ramificar com base em intervalos de inteiros</title>
   <programlisting role="php">
<![CDATA[
<?php

$idade = 23;

$resultado = match (true) {
    $idade >= 65 => 'senhor',
    $idade >= 25 => 'adulto',
    $idade >= 18 => 'adolescente',
    default => 'criança',
};

var_dump($resultado);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(11) "adolescente"
]]>
   </screen>
  </example>

  <example>
   <title>Usando uma expressão match generalizada para ramificar com base no conteúdo de strings</title>
   <programlisting role="php">
<![CDATA[
<?php

$texto = 'Bienvenue chez nous';

$resultado = match (true) {
    str_contains($texto, 'Welcome') || str_contains($texto, 'Hello') => 'en',
    str_contains($texto, 'Bienvenue') || str_contains($texto, 'Bonjour') => 'fr',
    // ...
};

var_dump($resultado);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(2) "fr"
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
