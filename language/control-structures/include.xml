<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ffbe6525350c91d58e1d5b7a52c46c911035c8e0 Maintainer: @lhsazevedo Status: ready --><!-- CREDITS: diegopires, ae, fabioluciano, @lhsazevedo -->

<sect1 xml:id="function.include" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>include</title>
 <?phpdoc print-version-for="include"?>
 <simpara>
  A expressão <literal>include</literal> inclui e avalia
  o arquivo informado.
 </simpara>
 <simpara>
  A documentação a seguir também se aplica a declaração <function>require</function>.
 </simpara>
 <simpara>
  Os arquivos são incluídos baseando-se no caminho do arquivo informado ou, se não informado, o
  <link linkend="ini.include-path">include_path</link> especificado. Se o arquivo
  não for encontrado no <link linkend="ini.include-path">include_path</link>,
  <literal>include</literal> checará no diretório do script que o executa
  e no diretório de trabalho corrente, antes de falhar. O
  construtor <literal>include</literal> emitirá um
  <constant>E_WARNING</constant> se
  não localizar o arquivo; possui um comportamento diferente do
  <function>require</function>, que emitirá um
  <constant>E_ERROR</constant>.
 </simpara>
 <simpara>
  Note que ambas <literal>include</literal> e <literal>require</literal>
  emitem <constant>E_WARNING</constant>s adicionais, se o arquivo não puder ser
  acessado, antes de emitir o <constant>E_WARNING</constant> ou
  <constant>E_ERROR</constant> final, respectivamente.
 </simpara>
 <simpara>
  Se um caminho for definido — seja absoluto (iniciando com a letra do drive
  ou <literal>\</literal> no Windows, ou <literal>/</literal> no Unix/Linux
  ), ou relativo ao diretório atual (começando com
  <literal>.</literal> ou <literal>..</literal>) — o
  <link linkend="ini.include-path">include_path</link> será completamente
  ignorado. Por exemplo, se o nome do arquivo iniciar com <literal>../</literal>,
  o interpretador irá procurar pelo arquivo no diretório pai.
 </simpara>
 <simpara>
  Para mais informações de como o PHP trabalha ao incluir arquivos e o caminho de inclusão,
  veja a documentação do <link linkend="ini.include-path">include_path</link>.
 </simpara>
 <simpara>
  Quando um arquivo é incluído, o código herda o
  <link linkend="language.variables.scope">escopo de variáveis</link> da
  da linha que a inclusão ocorrer. Qualquer variável disponível no arquivo
  que incluiu estará disponível no arquivo incluído, daquela linha
  em diante.
  Entretanto, todas as funções e classes definidas no arquivo incluído
  estarão no escopo global.
 </simpara>
 <para>
  <example>
   <title>Exemplo básico do construtor <literal>include</literal></title>
   <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'green';
$fruit = 'apple';

?>

test.php
<?php

echo "A $color $fruit"; // A

include 'vars.php';

echo "A $color $fruit"; // A green apple

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Se a inclusão ocorrer dentro de uma função
  todo o código contido no arquivo incluído irá se comportar
  como se tivesse sido definido dentro da função. Portanto seguirá
  o escopo de variáveis da função.
  Uma exceção para essa regra são as <link
  linkend="language.constants.predefined">constantes mágicas</link> que são
  interpretadas antes da inclusão ocorrer.
 </simpara>
 <para>
  <example>
   <title>Inclusão em funções</title>
   <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $color;

    include 'vars.php';

    echo "A $color $fruit";
}

/* vars.php is in the scope of foo() so     *
* $fruit is NOT available outside of this  *
* scope.  $color is because we declared it *
* as global.                               */

foo();                    // A green apple
echo "A $color $fruit";   // A green

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Quando um arquivo é incluído, o interpretador sai do modo PHP e
  entra no modo HTML no começo do arquivo incluído, e volta novamente
  no final. Por esta razão, qualquer código dentro do arquivo incluído
  que necessite ser executado como PHP deve estar entre
  <link linkend="language.basic-syntax.phpmode">tags válidas de início e
  fim do PHP</link>.
 </simpara>
 <simpara>
  Se os "<link linkend="ini.allow-url-include">empacotadores de inclusão de URL</link>"
  estiverem habilitados no PHP,
  pode-se definir um arquivo a ser incluído usando uma URL (via HTTP ou
  outro protocolo suportado - veja <xref linkend="wrappers"/> para uma lista
  de protocolos) ao invés de um caminho local. Se o servidor de destino interpretar
  o arquivo incluído como PHP, variáveis podem ser passadas para o arquivo
  incluído usando uma URL de requisição com HTTP GET. Isso não significa
  a mesma coisa que incluir e compartilhar
  o escopo de variáveis com o arquivo incluído; O script é executado
  no servidor remoto e o resultado
  incluído no script local.
 </simpara>
 <para>
  <example>
   <title>Usando <literal>include</literal> via HTTP</title>
   <programlisting role="php">
<![CDATA[
<?php

/* Este exemplo assume que www.exemplo.com.br está configurado para processar
* arquivos .php e não arquivos .txt. Além disso, 'Funciona' aqui significa
* que as variáveis $foo e $bar estão disponíveis dentro do arquivo incluído. */

// Não vai funcionar; arquivo.txt não foi tratado por www.exemplo.com.br como PHP
include 'http://www.exemplo.com.br/arquivo.txt?foo=1&bar=2';

// Não vai funcionar; procura por um arquivo chamado 'arquivo.php?foo=1&bar=2' no
// sistema de arquivos local.
include 'arquivo.php?foo=1&bar=2';

// Funciona.
include 'http://www.exemplo.com.br/arquivo.php?foo=1&bar=2';
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <title>Avisos de Segurança</title>
  <para>
   O arquivo remoto pode ser processado pelo servidor remoto (dependendo
   da extensão do arquivo e se o servidor remoto executa, ou não,arquivos PHP), mas ainda
   precisa produzir um código PHP válido pois será processado pelo
   servidor local. Se o arquivo do servidor remoto deve ser processado como
   um texto simples, a função <function>readfile</function> é uma opção
   muito melhor a ser usada. Caso contrário, deve-se ter um cuidado especial para
   garantir que o servidor remoto produza um código PHP válido.
  </para>
 </warning>
 <para>
  Veja também <link linkend="features.remote-files">Arquivos Remotos</link>,
  <function>fopen</function> e <function>file</function> para informações
  relacionadas.
 </para>
 <simpara>
  Manipulando Retornos:  o <literal>include</literal> retorna
  <literal>FALSE</literal> ao falhar e emite um aviso. Inclusões bem
  sucedidas, ao menos que seja sobrescritas pelo arquivo incluído, retornam
  <literal>1</literal>. É possível utilizar a declaração <function>return</function>
  dentro do arquivo incluído para finalizar o processamento
  e retornar para o arquivo que o incluiu.  Além disso, é possível
  retornar valor a partir do arquivo incluído. Pode-se usar o valor
  do arquivo incluído como em uma função normal. Isso não é, entretanto,
  possível quando incluímos arquivos remotos a menos que a saída do arquivo
  remoto tenha <link linkend= "language.basic-syntax.phpmode">tags válidas de início e
  fim do PHP</link> (como em um arquivo local). Pode-se declarar
  as variáveis necessárias dentro dessas tags e estarão disponíveis
  em qualquer ponto do arquivo que o incluiu.
 </simpara>
 <para>
  Pelo fato do <literal>include</literal> ser um construtor especial da linguagem,
  parênteses não são necessários ao redor do argumento. Tome cuidado ao comparar
  valores de retorno.
  <example>
   <title>Comparando valores de retorno do include</title>
   <programlisting role="php">
<![CDATA[
<?php
// não vai funcionar, avaliado como include(('vars.php') == TRUE), isto é: include('1')
if (include('vars.php') == TRUE) {
    echo 'OK';
}

// funciona
if ((include 'vars.php') == TRUE) {
    echo 'OK';
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title><literal>include</literal> e a instrução <function>return</function> </title>
   <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // imprime 'PHP'

$bar = include 'noreturn.php';

echo $bar; // imprime 1

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  <literal>$bar</literal> tem o valor <literal>1</literal> porque a inclusão
  foi bem sucedida. Note a diferença entre os dois exemplos. O primeiro usa o
  <function>return</function>, enquanto o outro não.
  Se o arquivo não puder ser incluído, &false; é retornado e um
  <constant>E_WARNING</constant> emitido.
 </simpara>
 <para>
  Se funções forem definidas no arquivo incluído, elas podem ser utilizadas
  no arquivo principal independente se estão antes ou depois do <function>return</function>.
  Se o arquivo for incluído duas vezes, o PHP emitirá um erro fatal, pois as
  funções já foram declaradas.
  É recomendado usar o <function>include_once</function> ao invés de
  verificar se o arquivo já foi incluído manualmente dentro
  do arquivo incluído.
 </para>
 <simpara>
  Outra forma de "incluir" um arquivo PHP em uma variável é capturar a
  saída usando as <link linkend="ref.outcontrol">Funções de Controle
  de Saída</link> com o <literal>include</literal>. Por exemplo:
 </simpara>
 <para>
  <example>
   <title>Usando buffer de saída para incluir um arquivo PHP em uma string</title>
   <programlisting role="php">
<![CDATA[
<?php
$string = get_include_contents('somefile.php');

function get_include_contents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        return ob_get_clean();
    }
    return false;
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Para automatizar a inclusão de arquivos nos scripts, veja também as configurações
  <link linkend="ini.auto-prepend-file">auto_prepend_file</link> e
  <link linkend="ini.auto-append-file">auto_append_file</link>
  contidas no &php.ini;.
 </para>

 &note.language-construct;

 <simpara>
  Veja também <function>require</function>, <function>require_once</function>,
  <function>include_once</function>, <function>get_included_files</function>,
  <function>readfile</function>, <function>virtual</function>, e
  <link linkend="ini.include-path">include_path</link>.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
