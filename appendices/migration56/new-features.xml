<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c9b1de1c1266145d5472d0c05edea2c1bf970ff0 Maintainer: leonardolara Status: ready -->

<sect1 xml:id="migration56.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Novas funcionalidades</title>

 <sect2 xml:id="migration56.new-features.const-scalar-exprs">
  <title>Expressões constantes</title>

  <para>
   Agora é possível fornecer uma expressão escalar envolvendo literais
   numéricos e strings e/ou constantes em contextos onde o PHP anteriormente esperava
   um valor estático, como declarações de constantes e propriedades e argumentos
   padrões para funções.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
const UM = 1;
const DOIS = UM * 2;

class C {
    const TRES = DOIS + 1;
    const UM_TERCO = UM / self::TRES;
    const FRASE = 'O valor de TRES é '.self::TRES;

    public function f($a = UM + self::TRES) {
        return $a;
    }
}

echo (new C)->f()."\n";
echo C::FRASE;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
4
O valor de TRES é 3
]]>
   </screen>
  </informalexample>

  <para>
   É possível também definir um <type>array</type> constante usando a
   palavra-chave <literal>const</literal>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
const ARR = ['a', 'b'];

echo ARR[0];
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
a
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.variadics">
  <title>Funções variádicas via <literal>...</literal></title>

  <para>
   <link linkend="functions.variable-arg-list">Funções Variádicas</link> agora
   podem ser implementadas usando o operador <literal>...</literal>, ao invés de
   depender da função <function>func_get_args</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f($req, $opt = null, ...$params) {
    // $params é um array contendo os argumentos restantes.
    printf('$req: %d; $opt: %d; número de parâmetros: %d'."\n",
           $req, $opt, count($params));
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
$req: 1; $opt: 0; número de parâmetros: 0
$req: 1; $opt: 2; número de parâmetros: 0
$req: 1; $opt: 2; número de parâmetros: 1
$req: 1; $opt: 2; número de parâmetros: 2
$req: 1; $opt: 2; número de parâmetros: 3
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.splat">
  <title>Desempacotamento de argumentos via <literal>...</literal></title>

  <para>
   <link linkend="language.types.array">Arrays</link> e objetos do tipo
   <interfacename>Traversable</interfacename> podem ser desempacotados em
   listas de argumentos ao chamar funções usando o operador <literal>...</literal>.
   Isto também é conhecido como operador 'splat' em outras linguagens,
   incluindo Ruby.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function add($a, $b, $c) {
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
6
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.exponentiation">
  <title>Exponenciação via <literal>**</literal></title>

  <para>
   Um operador associativo à direita, <literal>**</literal>, foi adicionado para
   suportar exponenciação, juntamente com o operador curto de atribuição
   <literal>**=</literal>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
printf("2 ** 3 ==      %d\n", 2 ** 3);
printf("2 ** 3 ** 2 == %d\n", 2 ** 3 ** 2);

$a = 2;
$a **= 3;
printf("a ==           %d\n", $a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
2 ** 3 ==      8
2 ** 3 ** 2 == 512
a ==           8
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.use">
  <title><literal>use function</literal> e <literal>use const</literal></title>

  <para>
   O operador
   <link linkend="language.namespaces.importing"><literal>use</literal></link>
   foi estendido para suportar importação de funções e constantes
   em adição à importação de classes. Isto pode ser realizado pelas construções
   <literal>use function</literal> e <literal>use const</literal>,
   respectivamente.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
namespace Name\Space {
    const FOO = 42;
    function f() { echo __FUNCTION__."\n"; }
}

namespace {
    use const Name\Space\FOO;
    use function Name\Space\f;

    echo FOO."\n";
    f();
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
42
Name\Space\f
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.phpdbg">
  <title>phpdbg</title>

  <para>
   O PHP agora inclui um depurador interativo chamado phpdbg, implementado como um
   módulo SAPI. Para mais informações, visite a
   <link linkend="book.phpdbg">documentação sobre phpdbg</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.default-encoding">
  <title>Codificação padrão de caracteres</title>

  <para>
   <link linkend="ini.default-charset">default_charset</link> é agora usado como
   o conjunto de caracteres padrão para as funções <function>htmlentities</function>,
   <function>html_entity_decode</function> e
   <function>htmlspecialchars</function>. Observe que se as configurações de codificação
   iconv e mbstring (agora defasadas) estiverem definidas, elas terão
   precedência sobre default_charset para funções iconv e mbstring,
   respectivamente.
  </para>

  <para>
   O valor padrão para esta configuração é <literal>UTF-8</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.reusable-input">
  <title><link linkend="wrappers.php.input"><literal>php://input</literal></link> é reutilizável</title>

  <para>
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   agora pode ser reaberto e lido quantas vezes for necessário. Isto tem
   resultado em uma grande redução de memória requerida para lidar
   com dados de POST.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.large-file">
  <title>Envio de grandes arquivos</title>

  <para>
   Arquivos maiores que 2 gigabytes agora são aceitos.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.gmp">
  <title><link linkend="book.gmp">GMP</link> suporta sobrecarga de operadores</title>

  <para>
   Objetos <link linkend="book.gmp">GMP</link> agora suportam sobrecarga de
   operadores e conversão para tipos escalares. Isto permite mais expressividade
   no código que usa GMP:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a = gmp_init(42);
$b = gmp_init(17);

if (version_compare(PHP_VERSION, '5.6', '<')) {
    echo gmp_intval(gmp_add($a, $b)), PHP_EOL;
    echo gmp_intval(gmp_add($a, 17)), PHP_EOL;
    echo gmp_intval(gmp_add(42, $b)), PHP_EOL;
} else {
    echo $a + $b, PHP_EOL;
    echo $a + 17, PHP_EOL;
    echo 42 + $b, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
59
59
59
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.hash-equals">
  <title><function>hash_equals</function> para comparação de strings segura contra ataque de temporização</title>

  <para>
   A função <function>hash_equals</function> foi adicionada para comparar
   dois strings em tempo constante. Isto deve ser usado para mitigar ataques de
   temporização; por exemplo, ao testar hashes de senha <function>crypt</function>
   (assumindo que não seja possível usar
   <function>password_hash</function> e
   <function>password_verify</function>, que não são suscetíveis a ataques de
   temporização).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$incorrect = crypt('1234',  '$2a$07$usesomesillystringforsalt$');

var_dump(hash_equals($expected, $correct));
var_dump(hash_equals($expected, $incorrect));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.debuginfo">
  <title><literal>__debugInfo()</literal></title>

  <para>
   O método mágico <link linkend="language.oop5.magic.debuginfo">__debugInfo()</link>
   foi adicionado para permitir que objetos alterem suas propriedades e seus valores
   que são mostrados quando estes objetos são argumentos da função
   <function>var_dump</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.gost">
  <title>Algoritmo de hash gost-crypto</title>

  <para>
   O algoritmo de hash <literal>gost-crypto</literal> foi adicionado. Ele
   implementa a função de hash GOST usando as tabelas S-box da CryptoPro S-box como
   especificado pela
   <link xlink:href="&url.rfc;4357">RFC 4357, section 11.2</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.openssl">
  <title>Melhorias SSL/TLS</title>

  <para>
   Uma ampla gama de melhorias foi aplicada no suporte a SSL/TLS no PHP
   5.6. Estas incluem
   <link linkend="migration56.incompatible.peer-verification">habilitação de verificação de servidor por padrão</link>,
   suporte a correspondência de impressão digital de certificado, mitigação contra ataques
   de renegociação TLS, e muitas novas
   <link linkend="context.ssl">opções de contexto SSL</link> para permitir um controle
   mais fino sobre o protocolo e configurações de verificação ao usar
   fluxos criptografados.
  </para>

  <para>
   Estas mudanças estão descritas com maior detalhe na seção
   <link linkend="migration56.openssl">Mudanças do OpenSSL no PHP 5.6.x</link>
   deste guia de migração.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.postgresql">
  <title>Suporte a <link linkend="book.pgsql">pgsql</link> assíncrono</title>

  <para>
   A extensão <link linkend="book.pgsql">pgsql</link> agora suporta
   conexões e consultas assíncronas, assim habilitando comportamento
   sem bloqueio ao interagir com banco de dados PostgreSQL. Conexões assíncronas
   podem ser estabalacidas através da constante
   <constant>PGSQL_CONNECT_ASYNC</constant>. As novas funções
   <function>pg_connect_poll</function>, <function>pg_socket</function>,
   <function>pg_consume_input</function> e <function>pg_flush</function>
   podem ser usadas para lidar com conexões e consultas assíncronas.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
