<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: leonardolara Status: ready -->

<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Mudanças do OpenSSL no PHP 5.6.x</title>

 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>Empacotadores de fluxo agora verificam nomes e certificados de servidor por padrão ao usar SSL/TLS</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>Impressões digitais de certificado</title>

  <para>
   Foi adicionado suporte para extrari e verificar impressões digitais de
   certificado. <function>openssl_x509_fingerprint</function> foi adicionada para
   extrair uma impressão digital de um certificado X.509 certificate, e duas
   opções de <link linkend="context.ssl">contexto de fluxo SSL</link> foram
   adicionadas: <literal>capture_peer_cert</literal> para capturar o certificado X.509
   do servidor, e <literal>peer_fingerprint</literal> para certificar que o
   certificado do servidor deve corresponder à impressão digital informada.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.ciphers">
  <title>Cifras padrões atualizadas</title>

  <para>
   As cifras padrões usadas pelo PHP foram atualizadas para uma lista mais segura
   com base nas
   <link xlink:href="&url.openssl.ciphers.mozilla;">Recomendações de crifra Mozilla</link>,
   com duas novas exclusões: cifras anônimas Diffie-Hellman, e RC4.
  </para>

  <para>
   Esta lista pode ser acessada através da nova constante
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant>, e pode ser
   substituída (como em versões anteriores do PHP) configurando-se as opções
   de contexto
   <link linkend="context.ssl.ciphers"><parameter>ciphers</parameter></link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>Compressão desabilitada por padrão</title>

  <para>
   Compressão SSL/TLS foi desabilitada por padrão para mitigar o ataque
   CRIME. O PHP 5.4.13 adicionou uma opção de contexto
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
   para permitir que a compressão seja desabilitada: ela agora está definida para
   &true; (isto é, compressão desabilitada) por padrão.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>Permite que servidores definam sua própria ordem de cifras de preferência</title>

  <para>
   A opção de contexto SSL <parameter>honor_cipher_order</parameter> foi adicionada
   para permitir que servidores de fluxo criptografado mitiguem vulnerabilidades BEAST
   definindo as cifras do servidor e não as do cliente.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.metadata">
  <title>Acesso ao protocolo e à cifra negociados</title>

  <para>
   O protocolo e a cifra que foram negociados para um fluxo criptografado
   agora podem ser acessados por <function>stream_get_meta_data</function> ou
   <function>stream_context_get_options</function> quando a opção de contexto SSL
   <parameter>capture_session_meta</parameter> for definida para
   &true;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);

$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>Novas opções para sigilo de encaminhamento perfeito em servidores de fluxo criptografados</title>

  <para>
   Os fluxos criptografados de clientes já suportam sigilo de encaminhamento perfeito,
   pois geralmente são controlados pelo servidor. Fluxos criptografados de servidor no PHP usando
   certificados capazes de sigilo de encaminhamento perfeito não precisam tomar nenhuma ação
   adicional para habilitar o SEP; entretanto um número de opções de contexto SSL
   foi adicionado para permitir maior controle sobre o SEP e lidar com
   problemas de compatibilidade que possam aparecer.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      Esta opção permite a seleção de uma curva específica para uso com cifras
      ECDH. Se não especificada, <literal>prime256v1</literal> será usada.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Um caminho para um arquivo contendo parâmetros para a troca de chaves Diffie-Hellman key,
      como as criadas pelo comando:
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /caminho/para/meus/certificados/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      Se definida para &true;, um novo par de chaves será criado usando parâmetros
      Diffie-Hellman, desta forma melhorando o sigilo de encaminhamento.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      Se definida para &true;, um novo par de chaves será sempre gerado quando conjuntos
      de cifras ECDH forem negociadas. Isto melhora o sigilo de encaminhamento.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>Seleção de versão SSL/TLS</title>

  <para>
   Agora é possível selecionar versões específicas de SSL e TLS através da
   opçõa de contexto <parameter>crypto_method</parameter> ou pela especificação de
   um transporte específico ao criar um empacotador de fluxo (por exemplo, chamando-se
   <function>stream_socket_client</function> ou
   <function>stream_socket_server</function>).
  </para>

  <para>
   A opção de contexto <parameter>crypto_method</parameter> aceita uma máscara de bits
   enumerando os protocolos permitidos, da mesma forma que a opção
   <parameter>crypto_type</parameter> da função
   <function>stream_socket_enable_crypto</function>.
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>

  <segmentedlist>
   <title>Versões de protocolo selecionadas e opções correspondentes</title>
   <segtitle>Protocolo(s)</segtitle>
   <segtitle>Opção do Cliente</segtitle>
   <segtitle>Opção do Servidor</segtitle>
   <segtitle>Transporte</segtitle>
   <seglistitem>
    <seg>Qualquer versão TLS ou SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>Qualquer versão TLS</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Requisitando TLS 1.0 ou melhor ao usar file_get_contents():
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Requisitando TLS 1.1 ou 1.2:
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Conectando com uso de transporte de fluxo tlsv1.2://.
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title>Adicionada a função <function>openssl_get_cert_locations</function></title>

  <para>
   A função <function>openssl_get_cert_locations</function> foi
   adicionada: ela retorna as localizações padrões onde o PHP irá pesquisar
   por pacotes de certificados CA.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.spki">
  <title>Suporte a SPKI</title>

  <para>
   Foi adicionado suporte para geração, extração e verificação de chaves públicas assinadas
   e desafios (SPKAC em inglês). <function>openssl_spki_new</function>,
   <function>openssl_spki_verify</function>,
   <function>openssl_spki_export_challenge</function> e
   <function>openssl_spki_export</function> foram adicionadas para criar, verificar,
   exportar chaves públicas <acronym>PEM</acronym> e desafio associado a partir de um
   SPKAC gerado por um elemento <literal>KeyGen</literal> de HTML5.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      Gera uma novo SPKAC usando chave privada, string de desafio e
      algoritmo de hash.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      Verifica o SPKAC informado.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      Exporta o desafio associado a partir do SPKAC fornecido.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac);
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      Exporta chave pública RSA em formato <acronym>PEM</acronym>, a partir do SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
