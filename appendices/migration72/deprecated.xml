<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 549423df613c7204d64f7c3a8290edd7d7ae6fc8 Maintainer: leonardolara Status: ready --><!-- CREDITS: vanildosouto -->

<sect1 xml:id="migration72.deprecated">
 <title>Recursos defasados na versão PHP 7.2.x</title>

 <sect2 xml:id="migration72.deprecated.unquoted-strings">
  <title>Strings sem aspas</title>

  <para>
   Strings sem aspas que não são constantes globais são consideradas
   strings delas mesmas. Este comportamento costumava emitir um
   <constant>E_NOTICE</constant>, mas agora irá emitir um
   <constant>E_WARNING</constant>. Na próxima versão maior do PHP, uma exceção
   <classname>Error</classname> será lançada no lugar.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(NONEXISTENT);

/* Output:
Warning: Use of undefined constant NONEXISTENT - assumed 'NONEXISTENT' (this will throw an Error in a future version of PHP) in %s on line %d
string(11) "NONEXISTENT"
*/
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.deprecated.png2wbmp-jpeg2wbmp">
  <title><function>png2wbmp</function> e <function>jpeg2wbmp</function></title>

  <para>
   As funções <function>png2wbmp</function> e <function>jpeg2wbmp</function>
   da extensão GD foram depreciadas e serão removidas
   na próxima versão maior do PHP.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.INTL_IDNA_VARIANT_2003-variant">
  <title><constant>INTL_IDNA_VARIANT_2003</constant> variante</title>

  <para>
   A extensão Intl depreciou a variante
   <constant>INTL_IDNA_VARIANT_2003</constant>, que está sendo usada atualmente
   como padrão para <function>idn_to_ascii</function> e
   <function>idn_to_utf8</function>. PHP 7.4 irá mudar esses padrões para
   <constant>INTL_IDNA_VARIANT_UTS46</constant>, e a próxima versão maior do
   PHP irá remover <constant>INTL_IDNA_VARIANT_2003</constant> completamente.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.__autoload-method">
  <title><function>__autoload</function> metódo</title>

  <para>
   O método <function>__autoload</function> foi depreciado porque é
   inferior ao <function>spl_autoload_register</function> (devido a não ser
   permitido encadear autoloaders), e não há interoperabilidade entre os dois
   estilos de autoloading.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.track_errors-and-php_errormsg">
  <title>Configuração ini <parameter>track_errors</parameter> e variável <literal>$php_errormsg</literal></title>

  <para>
   Quando a configuração ini <parameter>track_errors</parameter> está ativada, uma
   variável <literal>$php_errormsg</literal> é criada no escopo local quando
   um erro não fatal ocorre. Dado que a maneira preferida de recuperar tais
   informações de erro é usando <function>error_get_last</function>, este
   recurso foi depreciado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.create_function-function">
  <title><function>create_function</function> function</title>

  <para>
   Dado os problemas de segurança desta função (sendo um wrapper ao redor de
   <function>eval</function>), esta função datada foi depreciada.
   A alternativa preferida é o uso de <link linkend="functions.anonymous">funções anônimas</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.mbstringfunc_overload-ini-setting">
  <title>Configuração ini <parameter>mbstring.func_overload</parameter></title>

  <para>
   Dado os problemas de interoperabilidade das funções baseadas em string sendo usadas em
   ambientes com esta configuração ativada, ela será despreciada.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.unset-cast">
  <title>Conversão <literal>(unset)</literal></title>

  <para>
   Convertendo qualquer expressão para este tipo sempre resultará em &null;, e então
   esta conversão de tipo supérflua foi depreciada.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.parse_str-no-second-arg">
  <title><function>parse_str</function> sem um segundo argumento</title>

  <para>
   Sem o segundo argumento para <function>parse_str</function>, os parâmetros de
   string de consulta preenchiam a tabela de símbolos local.
   Dado as implicações de segurança disto, usar
   <function>parse_str</function> sem um segundo parâmetro foi
   depreciado. A função deve sempre ser usada com dois argumentos, como o
   segundo argumento faz com que a string de consulta seja analisada em um array.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.gmp_random-function">
  <title>Função <function>gmp_random</function></title>

  <para>
   Esta função gera um numero aleatório baseado em um intervalo que é
   calculado por um tamanho de membro específico da plataforma não exposto. Por isso, esta
   função foi depreciada. A maneira preferida de gerar um
   número aleatório usando a extesão GMP é com
   <function>gmp_random_bits</function> e
   <function>gmp_random_range</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.each-function">
  <title>Função <function>each</function></title>

  <para>
   Esta função é muito mais lenta na iteração do que um
   <literal>foreach</literal> normal, e causa problemas de implementações para algumas
   mudanças da linguagem. Portanto, ela foi depreciada.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.assert-string-arg">
  <title><function>assert</function> com um argumento string</title>

  <para>
   Usar <function>assert</function> com um argumento string requer que a string
   seja <function>eval</function>'iada. Dado o potencial para a execução de
   código remoto, usar <function>assert</function> com um argumento string foi
   depreciada em favor de usar expressão booleanas.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.errcontext-arg-of-error-handlers">
  <title><literal>$errcontext</literal> argumento para manipuladores de erros</title>

  <para>
   O <literal>$errcontext</literal> argumento contém todas as variáveis locais
   de erro do site. Dado a raridade do uso, e os problemas causados com as
   otimizações interncas, ele foi depreciado.
   Ao invés disto, um debugger deve ser usado para recuperar
   informações nas variáveis locais de erro do site.
  </para>
 </sect2>

 <sect2 xml:id="migration72.deprecated.read_exif_data-function">
  <title>Função <function>read_exif_data</function></title>

  <para>
   O atalho <function>read_exif_data</function> foi depreciado.
   A função <function>exif_read_data</function> deve ser usada no lugar.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
