<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6d29533483657c036e49edb5ea88c7103d126681 Maintainer: leonardolara Status: ready -->

<sect1 xml:id="migration72.incompatible">
 <title>Alterações incompatíveis com versões anteriores</title>

 <sect2 xml:id="migration72.incompatible.number_format-no-neg-zero">
  <title>A função <function>number_format</function> não retorna mais o valor zero negativo</title>

  <para>
   Anteriormente, era possível que a função <function>number_format</function>
   retornasse <literal>-0</literal>. Apesar de isto ser perfeitamente válido
   de acordo com a especificação de ponto flutuante IEEE 754, esta particularidade não
   era desejável para mostrar números formatados de uma forma legível.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(number_format(-0.01)); // now outputs string(1) "0" instead of string(2) "-0"
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-array-casts">
  <title>Converte chaves numéricas durante conversões de objetos e arrays</title>

  <para>
   Chaves númericas agora são melhor manipuladas ao converter arrays para objetos e
   objetos para arrays (conversão explícita ou pela função
   <function>settype</function>).
  </para>

  <para>
   Isto siginifica que chaves de números inteiros (ou de strings numéricas) de arrays sendo convertidos
   para objetos agora são acessíveis:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// array to object
$arr = [0 => 1];
$obj = (object)$arr;
var_dump(
    $obj,
    $obj->{'0'}, // agora acessível
    $obj->{0} // agora acessível
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["0"]=>    // agora chave string, ao invés de número inteiro
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   E chaves de números inteiros (ou de strings numéricas) de objetos sendo convertidos
   para arrays agora são acessíveis:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// object to array
$obj = new class {
    public function __construct()
    {
        $this->{0} = 1;
    }
};
$arr = (array)$obj;
var_dump(
    $arr,
    $arr[0], // agora acessível
    $arr['0'] // agora acessível
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>    // agora chave de número inteiro, ao invés de string
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.no-null-to-get_class">
  <title>Não é permitido passar &null; para <function>get_class</function></title>

  <para>
   Anteriormente, passar &null; para a função <function>get_class</function>
   mostraria o nome da classe de onde a função foi chamada. Este comportamento agora foi
   removido, e um alerta <constant>E_WARNING</constant> será emitido. Para
   obter o mesmo comportamento anterior, o argumento deve simplesmente ser omitido.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.warn-on-non-countable-types">
  <title>Alerta ao contar tipos não contáveis</title>

  <para>
   Um alerta <constant>E_WARNING</constant> agora será emitido ao se tentar usar a função
   <function>count</function> em tipos não contáveis (isto inclui o apelido
   <function>sizeof</function>).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(
    count(null), // NULL não é contável
    count(1), // inteiros não são contáveis
    count('abc'), // strings não são contáveis
    count(new stdClass), // objetos que não implementam a interface Countable não são contáveis
    count([1,2]) // arrays são contáveis
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d
int(0)
int(1)
int(1)
int(1)
int(2)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-ext-to-objects">
  <title>ext/hash foi movido de recurso para objeto</title>

  <para>
   Como parte da migração de longo prazo, a extensão <link linkend="book.hash">Hash</link>
   foi atualizada para utilizar objetos ao invés de recursos. A alteração deve ser
   transparente para desenvolvedores PHP, exceto onde
   houver a função <function>is_resource</function> (que precisará ser
   atualizado para <function>is_object</function>).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.ssl-tls-defaults">
  <title>Melhoria nos padrões SSL/TLS</title>

  <para>
   As seguinte alterações aos padrões foram feitas:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>tls://</literal> agora tem os padrões TLSv1.0 ou TLSv1.1 ou TLSv1.2
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>ssl://</literal> é um apelido para <literal>tls://</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Constantes <literal>STREAM_CRYPTO_METHOD_TLS_*</literal> têm os padrões TLSv1.0
     ou TLSv1.1 + TLSv1.2, ao invés de somente TLSv1.0
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.incompatible.gettype-on-closed-resource">
  <title>Valor de retorno de <function>gettype</function> em recursos fechados</title>

  <para>
   Anteriormente, usar <function>gettype</function> em um recurso fechado
   retornaria uma string <literal>"unknown type"</literal>. Agora, uma string
   <literal>"resource (closed)"</literal> será retornada.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.is_object-on-incomplete_class">
  <title><function>is_object</function> e <classname>__PHP_Incomplete_Class</classname></title>

  <para>
   Anteriormente, usar <function>is_object</function> na classe
   <classname>__PHP_Incomplete_Class</classname> retornaria &false;.
   Agora, &true; será retornado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.undefined-constants">
  <title>Promoção do nível de erro de constantes indefinidas</title>

  <para>
   Referências não qualificadas a constantes indefinidas agora irão gerar um
   <constant>E_WARNING</constant> (ao invés de um <constant>E_NOTICE</constant>).
   Não próxima versão maior do PHP, elas irão gerar exceções
   <classname>Error</classname>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.windows-support">
  <title>Suporte ao Windows</title>

  <para>
   As versões mínimas do Windows oficialmente suportadas são agora Windows 7 e Windows Server
   2008 R2.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.trait-properties">
  <title>Verificações nos valores padrões de propriedades de traits</title>

  <para>
   Verificações de compatibilidade em valores padrões de propriedades de traits não irão mais
   realizar conversões.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-reserved-word">
  <title><literal>object</literal> para nomes de classe</title>

  <para>
   O nome <literal>object</literal> era fracamente reservado no PHP 7.0.
   Agora é estritamente reservados, e é proibido usá-lo como nome de classe, trait
   ou interface.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.netware-support">
  <title>Suporte a NetWare</title>

  <para>
   O suporte a NetWare agora foi removido.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.array-unique">
  <title><function>array_unique</function> com <constant>SORT_STRING</constant></title>

  <para>
   Enquanto <function>array_unique</function> com <constant>SORT_STRING</constant>
   anteriormente copiava o array e removia elementos não únicos (sem empactotar
   o array depois), agora o novo array é construído com a adição dos
   elementos únicos. Isto pode resultar em índices numéricos diferentes.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.bcmod-and-floats">
  <title>Alterações em <function>bcmod</function> com números do tipo float</title>

  <para>
   A função <function>bcmod</function> não trunca mais números
   fracionários para inteiros. Assim sendo, seu comportamento agora segue o da função
   <function>fmod</function>, ao invés do operador <literal>%</literal>.
   Por exemplo, <literal>bcmod('4', '3.5')</literal> agora retorna
   <literal>0.5</literal> ao invés de <literal>1</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-functions">
  <title>Funções de hash e hashes não criptográficos</title>

  <para>
   As funções <function>hash_hmac</function>, <function>hash_hmac_file</function>,
   <function>hash_pbkdf2</function> e <function>hash_init</function> (com
   <constant>HASH_HMAC</constant>) não aceitam mais hashes
   não criptográficas.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.json_decode-changes">
  <title>Opções da função <function>json_decode</function></title>

  <para>
   A opção da função <function>json_decode</function>,
   <constant>JSON_OBJECT_AS_ARRAY</constant>, agora é usada se o segundo
   parâmetro (assoc) for &null;. Anteriormente,
   <constant>JSON_OBJECT_AS_ARRAY</constant> era sempre ignorado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.rand-mt_rand-output">
  <title>Saída de <function>rand</function> e <function>mt_rand</function></title>

  <para>
   Sequências geradas por <function>rand</function> e
   <function>mt_rand</function> para uma semente específica podem ser diferentes do PHP 7.1 em
   máquinas de 64 bits (devido à correção de um problema de polarização de resto de divisão na
   implementação).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.sqlsafe_mode-ini-setting">
  <title>Remoção da condifuração ini <link linkend="ini.sql.safe-mode"><parameter>sql.safe_mode</parameter></link></title>

  <para>
   A configuração ini <parameter>sql.safe_mode</parameter> agora foi removida.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.date_parse_from_format">
  <title>Alterações nas funções <function>date_parse</function> e <function>date_parse_from_format</function></title>

  <para>
   O elemento <literal>zone</literal> do array retornado pelas funções <function>date_parse</function> e
   <function>date_parse_from_format</function> representa segundos ao invés de
   minutos agora, e seu sinal está invertido. Por exemplo, <literal>-120</literal>
   é agora <literal>7200</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.cookie-decode">
  <title>Cookies Recebidos</title>

  <para>
   A partir do PHP 7.2.34, os <emphasis>nomes</emphasis> de cookies recebidos não são
   mais decodificados como url por questões de segurança.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
