<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 64dc79d6c9710dddf196aa28e3c5f63b562e7aef Maintainer: leonardolara Status: ready -->
<sect1 xml:id="migration84.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Alterações Incompatíveis com Versões Anteriores</title>

 <simpara>
  Embora não seja explicitamente citado nesta seção,
  cada nova <link linkend="migration84.new-functions">função</link>,
  <link linkend="migration84.new-classes">classe, interface, enumeração</link>,
  ou <link linkend="migration84.constants">constante</link>
  pode fazer com que uma exceção de redeclaração do tipo <exceptionname>Error</exceptionname> seja lançada.
 </simpara>

 <sect2 xml:id="migration84.incompatible.core">
  <title>Núcleo do PHP</title>

  <!-- RFC: https://wiki.php.net/rfc/exit-as-function -->
  <sect3 xml:id="migration84.incompatible.core.exit">
   <title>Alteração de comportamento de <function>exit</function></title>

   <simpara>
    As construções de linguagem <function>exit</function> (e <function>die</function>)
    agora se comportam mais como uma função.
    Isso significa que elas agora podem ser passadas ​​como <type>callable</type>s,
    <!-- TODO: Link to declare documentation/type juggling documentation -->
    são afetadas pela instrução declare <literal>strict_types</literal>
    e agora executam as coerções de tipo usuais em vez de converter qualquer valor
    não inteiro para uma string.
   </simpara>

   <simpara>
    Sendo assim, passar tipos inválidos para <function>exit</function> e
    <function>die</function> agora resultam, consistentemente, no
    lançamento de um <exceptionname>TypeError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.recursion-comparison">
   <title>Recursão durante comparação</title>

   <simpara>
    Encontrar recursão durante uma comparação agora resulta em
    exceção <exceptionname>Error</exceptionname> ao invés de
    erro fatal <constant>E_ERROR</constant>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.readonly-indirect-modification">
   <title>Modificação indireta de propriedades somente leitura</title>

   <!-- TODO Link to clone magic method, and explain this better as UPGRADING is... -->
   <simpara>
    A modificação indireta de propriedades somente leitura em <code>__clone()</code>
    não é mais permitida, por exemplo, <code>$ref = &amp;$this->somente_leitura</code>.
    Isso já era proibido para inicialização somente leitura e foi um
    descuido na implementação de "reinicialização somente leitura durante a clonagem".
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.constant-type-change">
   <title>Alteração de Tipo de Constantes</title>

   <simpara>
    As constantes <constant>PHP_DEBUG</constant> e <constant>PHP_ZTS</constant>
    agora são do tipo <type>bool</type>.
    Anteriormente eram do tipo <type>int</type>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.tempnam-length">
   <title>Comprimento de nome de arquivo temporário</title>

   <simpara>
    O nome dos arquivos enviados e criados pela função
    <function>tempnam</function> agora tem 13 bytes a mais.
    O comprimento total ainda depende da plataforma.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_e_strict_error_level_and_deprecate_e_strict_constant -->
  <sect3 xml:id="migration84.incompatible.core.e-strict">
   <title>Remoção do nível de erro <constant>E_STRICT</constant></title>

   <simpara>
    O nível de erro <constant>E_STRICT</constant> foi removido,
    pois não estava mais em uso no mecanismo PHP.
    A constante <constant>E_STRICT</constant> foi descontinuada.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.typed-constants">
  <title>Constantes de classe de extensão que agora são tipadas</title>

  <para>
   As seguintes classes de extensões agora declaram um tipo em suas
   constantes:
   <simplelist>
    <member><link linkend="book.datetime">Date</link></member>
    <member><link linkend="book.intl">Intl</link></member>
    <member><link linkend="book.pdo">PDO</link></member>
    <member><link linkend="book.reflection">Reflection</link></member>
    <member><link linkend="book.spl">SPL</link></member>
    <member><link linkend="book.sqlite3">Sqlite</link></member>
    <member><link linkend="book.xmlreader">XMLReader</link></member>
   </simplelist>
  </para>
 </sect2>

 <!-- TODO: Check resource names -->
 <sect2 xml:id="migration84.incompatible.resource2object">
  <title>Migração de recurso para objeto</title>

  <simpara>
   Vários &resource;s migraram para &object;s.
   As verificações do valor de retorno usando <function>is_resource</function> devem ser
   substituídas por verificações de &false;, a menos que especificado de outra forma.
  </simpara>

  <sect3 xml:id="migration84.incompatible.resource2object.dba">
   <title>DBA</title>

   <simpara>
    As funções <link linkend="book.dba">DBA</link> agora aceitam e retornam
    objetos <classname>Dba\Connection</classname> ao invés de
    &resource;s <literal>dba_connection</literal>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.odbc">
   <title>ODBC</title>

   <simpara>
    As funções <link linkend="book.uodbc">ODBC</link> agora aceitam e retornam
    objetos <classname>Odbc\Result</classname> ao invés de
    &resource;s <literal>odbc_result</literal>.
   </simpara>

   <simpara>
    As funções <link linkend="book.uodbc">ODBC</link> agora aceitam e retornam
    objetos <classname>Odbc\Connection</classname> ao invés de
    &resource;s <literal>odbc_connection</literal>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.soap">
   <title>SOAP</title>

   <simpara>
    A propriedade <property>SoapClient::$httpurl</property> agora é um
    objeto <classname>Soap\Url</classname> ao invés de um
    &resource; <literal>soap_url</literal>.
    Verificações que usam <function>is_resource</function> (ou seja,
    <code>is_resource($client->httpurl)</code>) devem ser substituídas por verificações
    de &null; (isto é, <code>$client->httpurl !== null</code>).
   </simpara>
   <simpara>
    A propriedade <property>SoapClient::$sdl</property> agora é um
    objeto <classname>Soap\Sdl</classname> ao invés de um
    &resource; <literal>soap_sdl</literal>.
    Verificações que usam <function>is_resource</function> (ou seja,
    <code>is_resource($client->sdl)</code>) devem ser substituídas por verificações
    de &null; (i.e. <code>$client->sdl !== null</code>).
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.new-warnings-exceptions">
  <title>Novos alertas e exceções</title>

  <simpara>
   Foram adicionados novos alertas e exceções que são acionados em
   erros de programação, ou seja, valores inválidos fornecidos como argumentos.
  </simpara>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.curl">
   <title>Curl</title>

   <simpara>
    <function>curl_multi_select</function> agora lança um
    <exceptionname>ValueError</exceptionname> se o
    parâmetro <parameter>timeout</parameter> for menor que
    <literal>0</literal> ou maior que <constant>PHP_INT_MAX</constant>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gd">
   <title>Gd</title>

   <para>
    <simplelist type="inline">
     <member><function>imagejpeg</function></member>
     <member><function>imagewebp</function></member>
     <member><function>imagepng</function></member>
     <member><function>imageavif</function></member>
    </simplelist>
    agora lançam um <exceptionname>ValueError</exceptionname> quando um
    parâmetro <parameter>quality</parameter> inválido for passado.
   </para>

   <simpara>
    <function>imageavif</function> agora lança um
    <exceptionname>ValueError</exceptionname> se um
    parâmetro <parameter>speed</parameter> inválido for passado.
   </simpara>

   <simpara>
    <function>imagescale</function> agora lança um
    <exceptionname>ValueError</exceptionname> se os parâmetros
    <parameter>width</parameter> ou <parameter>height</parameter>
    ultrapassarem os limites inferiores ou superiores.
   </simpara>

   <simpara>
    <function>imagescale</function> agora lança um
    <exceptionname>ValueError</exceptionname> se um valor de
    parâmetro <parameter>mode</parameter> inválido for passado.
   </simpara>

   <simpara>
    <function>imagefilter</function> agora lança um
    <exceptionname>ValueError</exceptionname> com o
    filtro <constant>IMG_FILTER_SCATTER</constant>
    se os parâmetros <parameter>sub</parameter> ou <parameter>plus</parameter>
    ultrapassarem os limites inferiores ou superiores.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gettext">
   <title>Gettext</title>

   <para>
    <simplelist type="inline">
     <member><function>bind_textdomain_codeset</function></member>
     <member><function>textdomain</function></member>
     <member><function>d<replaceable>*</replaceable>gettext</function></member>
    </simplelist>
    agora lançam um <exceptionname>ValueError</exceptionname> se
    <parameter>domain</parameter> for uma string vazia.
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.intl">
   <title>Intl</title>

   <para>
    <function>resourcebundle_get</function>,
    <methodname>ResourceBundle::get</methodname>, e acessar deslocamentos em um
    objeto <classname>ResourceBundle</classname> agora lançam:
    <simplelist>
     <member>
      <exceptionname>TypeError</exceptionname> para tipos de deslocamento inválidos
     </member>
     <member>
      <exceptionname>ValueError</exceptionname> para uma &string; vazia
     </member>
     <member>
      <exceptionname>ValueError</exceptionname> se o índice inteiro não
      couber em uma representação de inteiro de 32 bits com sinal
     </member>
    </simplelist>
   </para>

   <simpara>
    <methodname>IntlDateFormatter::__construct</methodname> lança um
    <exceptionname>ValueError</exceptionname> se
    <parameter>locale</parameter> for inválido.
   </simpara>

   <simpara>
    <methodname>NumberFormatter::__construct</methodname> lança um
    <exceptionname>ValueError</exceptionname> se
    <parameter>locale</parameter> for inválido.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.mbstring">
   <title>MBString</title>

   <simpara>
    <function>mb_encode_numericentity</function> e
    <function>mb_decode_numericentity</function> agora verificam se
    <parameter>map</parameter> consiste somente de &integer;s,
    senão um <exceptionname>ValueError</exceptionname> é lançado.
   </simpara>

   <simpara>
    <function>mb_http_input</function> agora sempre lança um
    <exceptionname>ValueError</exceptionname> se <parameter>type</parameter>
    for inválido.
   </simpara>

   <simpara>
    <function>mb_http_output</function> agora verifica se
    <parameter>encoding</parameter> não contém nenhum byte nulo,
    se contiver, um <exceptionname>ValueError</exceptionname> será lançado.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.odbc">
   <title>ODBC</title>

   <simpara>
    <function>odbc_fetch_row</function> retorna &false; quando
    <parameter>row</parameter> for menor ou igual a <literal>0</literal>.
    Um alerta agora é emitido neste caso.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.pcntl">
   <title>PCNTL</title>

   <para>
    As funções <function>pcntl_sigprocmask</function>,
    <function>pcntl_sigwaitinfo</function> e
    <function>pcntl_sigtimedwait</function> agora lançam:
    <simplelist>
     <member>
      Um <exceptionname>ValueError</exceptionname> se o
      array <parameter>signals</parameter> estiver vazio
      (exceto para <function>pcntl_sigprocmask</function> se
      <parameter>mode</parameter> for igual a <constant>SIG_SETMASK</constant>)
     </member>
     <member>
      Um <exceptionname>TypeError</exceptionname> se um valor do
      array <parameter>signals</parameter> não for um &integer;
     </member>
     <member>
      Um <exceptionname>ValueError</exceptionname> se um valor do
      array <parameter>signals</parameter> não for um número de sinal válido.
     </member>
    </simplelist>
   </para>

   <simpara>
    A função <function>pcntl_sigprocmask</function> agora lança um
    <exceptionname>ValueError</exceptionname> se
    <parameter>mode</parameter> não for uma das constantes <constant>SIG_BLOCK</constant>,
    <constant>SIG_UNBLOCK</constant> ou <constant>SIG_SETMASK</constant>.
   </simpara>

   <para>
    A função <function>pcntl_sigtimedwait</function> agora lança:
    <simplelist>
     <member>
      Um <exceptionname>ValueError</exceptionname> se
      <parameter>seconds</parameter> for menor que <literal>0</literal>
     </member>
     <member>
      Um <exceptionname>ValueError</exceptionname> se
      <parameter>nanoseconds</parameter> for menor que <literal>0</literal>
      ou maior que <literal>1e9</literal>
     </member>
     <member>
      Um <exceptionname>ValueError</exceptionname> se ambos
      <parameter>seconds</parameter> e <parameter>nanoseconds</parameter>
      forem <literal>0</literal>
     </member>
    </simplelist>
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.session">
   <title>Session</title>

   <simpara>
    Definir um valor não positivo para <link linkend="ini.session.gc-divisor">session.gc_divisor</link>
    ou um valor negativo para <link linkend="ini.session.gc-probability">session.gc_probability</link>
    agora emite um alerta.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.simplexml">
   <title>SimpleXML</title>

   <simpara>
    Chamar <function>simplexml_import_dom</function> com um objeto não-XML
    agora lança um <exceptionname>TypeError</exceptionname> ao invés de um
    <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.standard">
   <title>Standard</title>

   <simpara>
    A função <function>round</function> agora valida o valor de
    <parameter>mode</parameter> e lança um
    <exceptionname>ValueError</exceptionname> para modos inválidos.
    Anteriormente, modos inválidos seria interpretados como
    <constant>PHP_ROUND_HALF_UP</constant>.
   </simpara>

   <simpara>
    A função <function>str_getcsv</function> agora lança
    <exceptionname>ValueError</exceptionname>s quando
    os argumentos <parameter>separator</parameter> e <parameter>enclosure</parameter>
    não tiverem comprimento de um byte, ou se o argumento <parameter>escape</parameter>
    não tiver um byte de comprimento e nem for uma string vazia.
    Isto alinha o comportamento para ficar idêntico ao de
    <function>fputcsv</function> e <function>fgetcsv</function>.
   </simpara>

   <simpara>
    A função <function>php_uname</function> agora lança um
    <exceptionname>ValueError</exceptionname> se
    <parameter>mode</parameter> for inválido.
   </simpara>

   <simpara>
    A opção <literal>"allowed_classes"</literal> para
    <function>unserialize</function> agora lança
    <exceptionname>TypeError</exceptionname>s e
    <exceptionname>ValueError</exceptionname>s se não for um
    <type>array</type> de nomes de classe.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlreader">
   <title>XMLReader</title>

   <simpara>
    Passar uma codificação de caracteres inválidos para
    <methodname>XMLReader::open</methodname> ou
    <methodname>XMLReader::XML</methodname> agora lança um
    <exceptionname>ValueError</exceptionname>.
   </simpara>

   <simpara>
    Passar uma &string; contendo bytes nulos anteriormente emitia um
    alerta, e agora lança um <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlwriter">
   <title>XMLWriter</title>

   <simpara>
    Passar uma &string; contendo bytes nulos anteriormente emitia um
    alerta, e agora lança um <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xsl">
   <title>XSL</title>

   <simpara>
    <methodname>XSLTProcessor::setParameter</methodname> agora lança um
    <exceptionname>ValueError</exceptionname> quando seus argumentos contiverem bytes
    nulos. Isto nunca funcionou corretamente na verdade,
    e é por isso que agora lança uma exceção.
   </simpara>

   <simpara>
    Chamar <methodname>XSLTProcessor::importStyleSheet</methodname> com um
    objeto não-XML agora lança um <exceptionname>TypeError</exceptionname>
    ao invés de um <exceptionname>ValueError</exceptionname>.
   </simpara>

   <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
   <simpara>
    Falha ao chamar uma função de retorno do PHP durante uma avaliação agora lança uma exceção
    ao invés de emitir um alerta.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.date">
  <title>Date</title>

  <para>
   Símbolos de <literal>number</literal> em <link linkend="datetime.formats.relative">formatos relativos</link>
   novamente aceitam múltiplos sinais, por exemplo, <literal>+-2</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration84.incompatible.dom">
  <title>DOM</title>

  <simpara>
   Alguns métodos DOM anteriormente retornavam &false; ou uma exceção
   <exceptionname>DOMException</exceptionname> com código
   <constant>DOM_PHP_ERR</constant> se um novo nó não pudesse ser alocado.
   Eles agora lançam consistentemente uma exceção <exceptionname>DOMException</exceptionname>
   com código <constant>DOM_INVALID_STATE_ERR</constant>.
   Esta situação é extremamente improvável e a probabilidade de ser afetado
   é baixa.
   Como resultado, <methodname>DOMImplementation::createDocument</methodname>
   agora tem um tipo de retorno provisório de <classname>DOMDocument</classname>
   <!-- TODO: Use a proper union type for linkage -->
   em vez de <code>DOMDocument|false</code>.
  </simpara>

  <simpara>
   Anteriormente, os objetos <classname>DOMXPath</classname> podiam ser clonados,
   mas resultavam em um objeto inutilizável.
   Isso não é mais possível, e clonar um objeto <classname>DOMXPath</classname>
   agora lança um <exceptionname>Error</exceptionname>.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_domimplementationgetfeature_feature_version -->
  <simpara>
   O método <methodname>DOMImplementation::getFeature</methodname> foi removido.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.gmp">
  <title>GMP</title>

  <!-- RFC: https://wiki.php.net/rfc/gmp-final -->
  <simpara>
   A classe <classname>GMP</classname> agora é final e não pode mais ser
   estendida.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mbstring">
  <title>MBString</title>

  <simpara>
   Em strings inválidas (aquelas com erros de codificação),
   <function>mb_substr</function> agora interpreta índices de caracteres da mesma
   maneira que a maioria das outras funções mbstring.
   Isto significa que os índices de caracteres retornados por <function>mb_strpos</function>
   podem ser passados ​​para <function>mb_substr</function>.
  </simpara>

  <simpara>
   Para strings SJIS-Mac (Mac japonês), os índices de caracteres passados ​​para
   <function>mb_substr</function> agora se referem aos índices dos pontos de
   código Unicode que são produzidos quando a string é convertida para Unicode.
   Isso é significativo porque cerca de 40 caracteres SJIS-Mac são convertidos em uma
   sequência de vários pontos de código Unicode.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqli">
  <title>MySQLi</title>

  <simpara>
   A constante não utilizada e não documentada
   <constant>MYSQLI_SET_CHARSET_DIR</constant> foi removida.
  </simpara>

  <simpara>
   A constante <constant>MYSQLI_STMT_ATTR_PREFETCH_ROWS</constant> foi removida.
   O recurso não está disponível no mysqlnd.
  </simpara>

  <simpara>
   As constantes <constant>MYSQLI_CURSOR_TYPE_FOR_UPDATE</constant> e
   <constant>MYSQLI_CURSOR_TYPE_SCROLLABLE</constant> foram removidas.
   Esta funcionalidade nunca foi implementada,
   nem com mysqlnd nem com libmysql.
  </simpara>

  <simpara>
   A constante <constant>MYSQLI_TYPE_INTERVAL</constant> não utilizada, que atualmente
   é um esboço e um apelido para <constant>MYSQLI_TYPE_ENUM</constant>,
   foi removida.
   <!-- There are no
  plans to add such data type to MySQL yet, so it's unclear what its value
  would finally be. -->
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <simpara>
   O código de erro relatado para os tempos limite de espera do servidor MySQL foi alterado de
   <literal>2006</literal> para <literal>4031</literal> nas versões 8.0.24
   e superiores do servidor MySQL.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.opcache">
  <title>Opcache</title>

  <simpara>
   O valor máximo da configuração
   <link linkend="ini.opcache.interned-strings-buffer">opcache.interned_strings_buffer</link>
   em arquiteturas de 64 bits agora é <literal>32767</literal>.
   Anteriormente era <literal>4095</literal>.
  </simpara>

  <sect3>
   <title>JIT</title>

   <simpara>
    Os valores de configuração padrão para o JIT foram alterados de
    <link linkend="ini.opcache.jit"><literal>opcache.jit=tracing</literal></link>
    e <link linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=0</literal></link>
    para <link linkend="ini.opcache.jit"><literal>opcache.jit=disable</literal></link>
    e <link linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=64M</literal></link>, respectivamente.
   </simpara>

   <simpara>
    Isso não afeta o comportamento observável padrão,
    pois o JIT ainda está desabilitado por padrão.
    No entanto, agora ele está desativado por meio da configuração
    <link linkend="ini.opcache.jit">opcache.jit</link>,
    em vez de
    <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link>.
    Isso pode afetar usuários que anteriormente ativaram o JIT exclusivamente por meio de
    <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link>,
    sem também especificar um modo JIT usando
    <link linkend="ini.opcache.jit">opcache.jit</link>.
    Para ativar a compilação JIT, defina o
    valor de configuração <link linkend="ini.opcache.jit">opcache.jit</link> adequadamente.
   </simpara>

   <simpara>
    Se a compilação <acronym>JIT</acronym> estiver habilitada, o <acronym>PHP</acronym> irá agora sair com um erro fatal na
    inicialização se a inicialização do compilador <acronym>JIT</acronym> falhar por qualquer motivo.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcntl">
  <title>PCNTL</title>

  <simpara>
   As funções <function>pcntl_sigprocmask</function>,
   <function>pcntl_sigwaitinfo</function> e
   <function>pcntl_sigtimedwait</function> agora sempre
   retornam &false; em caso de falha.
   Em alguns casos anteriores poderia retornar o valor <literal>-1</literal>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcre">
  <title>PCRE</title>

  <simpara>
   O pacote pcre2lib foi atualizado para a versão 10.44.
   Como consequência, isso significa que <literal>{,3}</literal> agora é reconhecido
   como um quantificador em vez de texto.
   Além disso, o significado de algumas classes de caracteres no modo UCP mudou.
   Consulte o <link xlink:href="&url.pcre2.changelog;">Registro de alterações do PCRE2</link>
   para um registro de alterações completo.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-dblib">
  <title>PDO_DBLIB</title>

  <simpara>
   Os atributos <constant>Pdo\Dblib::ATTR_STRINGIFY_UNIQUEIDENTIFIER</constant> e
   <constant>Pdo\Dblib::ATTR_DATETIME_CONVERT</constant> agora atuam como
   atributos booleanos em vez de atributos inteiros.
   Assim, definir o atributo via <methodname>PDO::setAttribute</methodname>
   e recuperá-lo via <methodname>PDO::getAttribute</methodname> espera
   e/ou retorna um <type>bool</type>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-firebird">
  <title>PDO_FIREBIRD</title>

  <simpara>
   O atributo <constant>PDO::ATTR_AUTOCOMMIT</constant> agora atua como
   atributos booleanos em vez de atributos inteiros.
   Assim, definir o atributo via <methodname>PDO::setAttribute</methodname>
   e recuperá-lo via <methodname>PDO::getAttribute</methodname> espera
   e/ou retorna um <type>bool</type>.
  </simpara>

  <simpara>
   A extensão agora expõe algumas APIs Firebird C++,
   portanto construir esta extensão agora requer um compilador C++.
   Além disso, a extensão agora deve ser compilada com fbclient 3.0 ou superior.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-mysql">
  <title>PDO_MYSQL</title>

  <simpara>
   Os atributos <constant>PDO::ATTR_AUTOCOMMIT</constant>,
   <constant>PDO::ATTR_EMULATE_PREPARES</constant> e
   <constant>PDO::MYSQL_ATTR_DIRECT_QUERY</constant> agora atuam como
   atributos booleanos em vez de atributos inteiros.
   Assim, definir o atributo via <methodname>PDO::setAttribute</methodname>
   e recuperá-lo via <methodname>PDO::getAttribute</methodname> espera
   e/ou retorna um <type>bool</type>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <simpara>
   As credenciais do DSN, quando definidas, têm prioridade sobre as
   contrapartes do construtor PDO, estando mais próximas dos estados da documentação.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.simplexml">
  <title>SimpleXML</title>

  <simpara>
   <classname>SimpleXMLElement</classname> não é apenas uma representação de um
   elemento XML, mas também é um <classname>RecursiveIterator</classname>.
   Antes do PHP 8.4.0, alguns de seus métodos (por exemplo,
   <methodname>SimpleXMLElement::asXML</methodname> ou
   <methodname>SimpleXMLElement::getName</methodname>) e a conversão de tais
   instâncias para &string; redefiniria implicitamente o iterador.
  </simpara>
  <para>
   Isso poderia causar repetições infinitas inesperadas à medida que o iterador fosse retrocedido para o início.
   Por exemplo:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$xmlString = "<root><a><b>1</b><b>2</b><b>3</b></a></root>";
$xml = simplexml_load_string($xmlString);

$nodes = $xml->a->b;
foreach ($nodes as $nodeData) {
    echo "nodeData: " . $nodeData . "\n";

    $xml = $nodes->asXml();
}

]]>
    </programlisting>
    <simpara>
     resultaria em uma repetição infinita.
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
// ...
]]>
    </screen>
    <simpara>
     No entanto, esse comportamento foi corrigido e um
     <classname>SimpleXMLElement</classname> não redefinirá mais implicitamente
     os dados do iterador, a menos que seja retrocedido explicitamente.
     O que significa que o exemplo anterior agora resultaria em:
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 3
]]>
    </screen>
   </informalexample>
  </para>
  <!-- This is no longer the case as a consequence of the bugfixes for GH-12192,GH-12208, #55098. -->
 </sect2>

 <sect2 xml:id="migration84.incompatible.soap">
  <title>SOAP</title>

  <simpara>
   <property>SoapClient::$typemap</property> agora é um <type>array</type>
   em vez de um <type>resource</type>.
   Verificações usando <function>is_resource</function> (ou seja,
   <code>is_resource($client->typemap)</code>) devem ser
   substituídas por verificações de &null; (ou seja, <code>$client->typemap !== null</code>).
  </simpara>

  <simpara>
   A extensão SOAP ganhou uma dependência opcional da extensão
   <link linkend="book.session">session</link>.
   Se o PHP for compilado sem a extensão "session" e com o
   sinalizador de configuração <option>--enable-rtld-now</option> ativado,
   erros de inicialização ocorrerão agora se a extensão <link linkend="book.soap">SOAP</link>
   também for usada.
   Para resolver isso, não use rtld-now nem carregue a extensão "session".
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.standard">
  <title>Standard</title>

  <simpara>
   Ao usar <function>strcspn</function> com
   <parameter>characters</parameter> sendo uma string vazia,
   o comprimento da string agora é retornado em vez de parar incorretamente
   no primeiro byte nulo.
   <!-- See GH-12592 -->
  </simpara>

  <simpara>
   <function>http_build_query</function> agora lida corretamente com enumerações apoiadas.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/dedicated_stream_bucket -->
  <simpara>
   <function>stream_bucket_make_writeable</function> e
   <function>stream_bucket_new</function> agora irão retornar uma
   instância de <classname>StreamBucket</classname> ao invés de uma instância de
   <classname>stdClass</classname>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.tidy">
  <title>Tidy</title>

  <simpara>
   Falhas no construtor agora lançam exceções em vez de emitir
   alertas e ter um objeto quebrado.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.xml">
  <title>XML</title>

  <simpara>
   As funções <function>xml_set_<replaceable>*</replaceable>_handler</function>
   agora declaram e verificam uma assinatura
   efetiva de <type class="union"><type>callable</type><type>string</type><type>null</type></type> para os
   parâmetros <parameter>handler</parameter>.
   Além disso, os valores do tipo <type>string</type> que correspondem aos nomes dos métodos
   do objeto definido com <function>xml_set_object</function> agora são verificados para
   ver se o método existe na classe do objeto passado anteriormente.
   Isso significa que <function>xml_set_object</function> agora sempre deve ser
   chamada antes de definir nomes de métodos como <type>callable</type>s.
   Passar uma string vazia para desabilitar o manipulador ainda é permitido,
   mas foi descontinuado.
  </simpara>

  <simpara>
   No entanto, como <function>xml_set_object</function> e a passagem
   de strings não <type>callable</type>s foram descontinuadas,
   é recomendado alterar tais instâncias com um <type>callable</type>
   referindo-se diretamente ao método.
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
