<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: leonardolara Status: ready -->
<sect1 xml:id="migration84.new-features">
 <title>Novos Recursos</title>

 <!-- TODO: Core features for 8.4 -->
 <sect2 xml:id="migration84.new-features.core">
  <title>Núcleo do PHP</title>

  <!-- RFC: https://wiki.php.net/rfc/property-hooks -->
  <sect3 xml:id="migration84.new-features.core.property-hooks">
   <title>Ganchos de Propriedades</title>

   <simpara>
    Propriedades de objetos agora podem ter uma lógica adicional associada com suas
    operações <literal>get</literal> e <literal>set</literal>.
    Dependendo do uso, isso pode ou não tornar a propriedade virtual,
    ou seja, não existe nenhum valor de apoio.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    // Uma propriedade "virtual". Não pode ser definida explicitamente.
    public string $fullName {
        get => $this->firstName . ' ' . $this->lastName;
    }

    // Todas as operações de escrita passam por este gancho e o resultado é o que for escrito.
    // Acesso de leitura ocorre normalmente.
    public string $firstName {
        set => ucfirst(strtolower($value));
    }

    // Todas as operações de escrita passam por este gancho, que precisa escrever no próprio valor de apoio.
    // Acesso de leitura ocorre normalmente.
    public string $lastName {
        set {
            if (strlen($value) < 2) {
                throw new \InvalidArgumentException('Muito curto');
            }
            $this->lastName = $value;
        }
    }
}

$p = new Person();

$p->firstName = 'pedro';
print $p->firstName; // Exibe "Pedro"
$p->lastName = 'Pedroso';
print $p->fullName; // Exibe "Pedro Pedroso"
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/asymmetric-visibility-v2 -->
  <sect3 xml:id="migration84.new-features.core.asymmetric-property-visibility">
   <title>Visibilidade de Propriedade Assimétrica</title>

   <simpara>
    Propriedades de objetos agora podem ter suas visibilidades <literal>set</literal>
    controladas separadamente das visibilidades <literal>get</literal>.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // O primeiro modificador controla a visibilidade "get", e o segundo
    // controla a visibilidade "set". A visibilidade "get" não pode ser mais restrita que a "set".
    public protected(set) string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }
}
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <sect3 xml:id="migration84.new-features.core.lazy-objects">
   <title>Objetos Lentos</title>
   <simpara>
    Agora é possível criar objetos cuja inicialização é adiada até
    serem acessados. Bibliotecas e estruturas podem aproveitar esses objetos lentos
    para adiar a busca de dados ou dependências necessárias para inicialização.
   </simpara>
<informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(private int $data)
    {
    }

    // ...
}

$initializer = static function (Example $ghost): void {
    // Busca dados ou dependências
    $data = getData();
    // Inicializa
    $ghost->__construct($data);
};

$reflector = new ReflectionClass(Example::class);
$object = $reflector->newLazyGhost($initializer);
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecated_attribute -->
  <sect3 xml:id="migration84.new-features.core.deprecated-attribute">
   <title>Atributo <code>#[\Deprecated]</code></title>

   <simpara>
    O novo atributo <classname>Deprecated</classname> pode ser usado para marcar funções, métodos
    e constantes de classe como descontinuados. O comportamento da funcionalidade descontinuada com este
    atributo corresponde ao comportamento do mecanismo de descontinuação existente para as funcionalidades
    fornecidas pelo próprio PHP. A única exceção é que o código de erro emitido é
    <constant>E_USER_DEPRECATED</constant> ao invés de <constant>E_DEPRECATED</constant>.
   </simpara>

   <simpara>
    Descontinuações existentes nas funcionalidades fornecidas pelo próprio PHP foram atualizadas para usar
    o atributo, melhorando as mensagens de erro emitidas através da inclusão de uma breve explicação.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/rfc1867-non-post -->
  <sect3 xml:id="migration84.new-features.core.rfc1867">
   <title>Analisando solicitações RFC1867 (multipartes) em solicitações HTTP não-POST</title>

   <!-- TODO: expand? -->
   <simpara>
    Adicionada a função <function>request_parse_body</function> que permite analisar
    solicitações RFC1867 (multipartes) em solicitações HTTP não-POST.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/new_without_parentheses -->
  <sect3 xml:id="migration84.new-features.core.new-chaining">
   <title>Encadeando expressões &new; sem parênteses</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Novas expressões com argumentos de construtor agora são desreferenciáveis, o que significa que
    permitem encadear chamadas de métodos, acessos a propriedades etc., sem colocar
    a expressão entre parênteses.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-weakref">
   <title>Informação de Depuração Melhorada para <classname>WeakReference</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    A obtenção de informação de depuração para a classe <classname>WeakReference</classname> agora
    também conterá o objeto referenciado, ou &null; se a referência não
    for mais válida.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-closure">
   <title>Improved Debugging Info for <classname>Closure</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    A saída do método <methodname>Closure::__debugInfo</methodname> agora inclui
    o nome, o arquivo e a linha do <classname>Closure</classname>.
   </simpara>
  </sect3>

  <!-- Is this really a feature? Should this be moved to other changes? -->
  <sect3 xml:id="migration84.new-features.core.multiple-namespaces-symbols">
   <title>Definindo Símbolos Idênticos em Diferentes Blocos de Espaços de Nomes</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Sair de um espaço de nomes agora limpa os símbolos visíveis.
    Isso permite usar um símbolo em um bloco de espaço de nomes, mesmo que um
    bloco de espaço de nomes anterior tenha declarado um símbolo com o mesmo nome.
    <!-- See Zend/tests/use_function/ns_end_resets_seen_symbols_1.phpt. -->
   </simpara>
  </sect3>

 </sect2>

 <sect2 xml:id="migration84.new-features.curl">
  <title>cURL</title>

  <simpara>
   <function>curl_version</function> retorna um valor
   <literal>feature_list</literal> adicional, que é um array associativo
   de todos os recursos cURL conhecidos, e se eles são suportados (&true;)
   ou não (&false;).
  </simpara>

  <simpara>
   Adicionadas as constantes <constant>CURL_HTTP_VERSION_3</constant> e
   <constant>CURL_HTTP_VERSION_3ONLY</constant> (disponíveis
   desde a libcurl 7.66 e 7.88) como opções possíveis para
   <constant>CURLOPT_HTTP_VERSION</constant>.
  </simpara>

  <simpara>
   Adicionada a constante <constant>CURLOPT_PREREQFUNCTION</constant> como uma opção do cURL que
   aceita um <type>callable</type> para ser chamado depois que a conexão tenha sido feita,
   mas antes que a requisição seja enviada.
   Esta chamável precisa retornar <constant>CURL_PREREQFUNC_OK</constant> ou
   <constant>CURL_PREREQFUNC_ABORT</constant> para permitir ou abortar a requisição.
  </simpara>

  <simpara>
   Adicionada a constante <constant>CURLOPT_SERVER_RESPONSE_TIMEOUT</constant>,
   que era anteriormente conhecida como <constant>CURLOPT_FTP_RESPONSE_TIMEOUT</constant>.
   Ambas as constantes contêm o mesmo valor.
  </simpara>

  <para>
   Adicionada a constante <constant>CURLOPT_DEBUGFUNCTION</constant> como uma opção do cURL que
   aceita um <type>callable</type> que é chamado durante o tempo de vida da requisição
   com o objeto <classname>CurlHandle</classname>,
   um inteiro contendo o tipo da mensagem de depuração, e uma string contendo a
   mensagem de depuração.
   O tipo da mensagem de depuração é uma das seguintes constantes:
   <simplelist>
    <member><constant>CURLINFO_TEXT</constant></member>
    <member><constant>CURLINFO_HEADER_IN</constant></member>
    <member><constant>CURLINFO_HEADER_OUT</constant></member>
    <member><constant>CURLINFO_DATA_IN</constant></member>
    <member><constant>CURLINFO_DATA_OUT</constant></member>
    <member><constant>CURLINFO_SSL_DATA_IN</constant></member>
    <member><constant>CURLINFO_SSL_DATA_OUT</constant></member>
   </simplelist>
   Uma vez que esta opção é definida, <constant>CURLINFO_HEADER_OUT</constant>
   não pode ser definida porque ela usa a mesma funcionalidade da libcurl.
  </para>

  <simpara>
   A função <function>curl_getinfo</function> agora retorna uma chave adicional
   <literal>posttransfer_time_us</literal>, contendo o número de
   microssegundos desde o início até o último byte ser enviado.
   Quando um redirecionamento é seguido, o tempo de cada requisição é adicionado cumulativamente.
   Este valor também pode ser recuperado passando
   <constant>CURLINFO_POSTTRANSFER_TIME_T</constant> para o parâmetro
   <parameter>option</parameter> da função <function>curl_getinfo</function>.
   Requer libcurl 8.10.0 ou posterior.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.dom">
  <title>DOM</title>

  <!-- RFC: https://wiki.php.net/rfc/domdocument_html5_parser -->
  <!-- RFC: https://wiki.php.net/rfc/opt_in_dom_spec_compliance -->
  <simpara>
   Adicionado o espaço de nomes <package>Dom</package> com novas classes como contrapartes
   às classes DOM existentes (ex.: <classname>Dom\Node</classname> é a nova
   <classname>DOMNode</classname>).
   Estas classes são compatíveis com HTML 5 e cumprem as especificações WHATWG;
   resolvendo problemas antigos na extensão DOM.
   As classes DOM antigas continuam disponíveis para compatibilidade com versões anteriores.
  </simpara>

  <para>
   Adicionado o método <methodname>DOMNode::compareDocumentPosition</methodname>
   com suas constantes associadas:
   <simplelist>
    <member><constant>DOMNode::DOCUMENT_POSITION_DISCONNECTED</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_PRECEDING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_FOLLOWING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINS</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINED_BY</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</constant></member>
   </simplelist>
  </para>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Agora é possível passar qualquer chamável para
   <methodname>DOMXPath::registerPhpFunctions</methodname>.

   Além disso, com <methodname>DOMXPath::registerPhpFunctionNs</methodname>,
   agora podem ser registradas funções de retorno que usarão sintaxe de chamada de função nativa
   em vez de usar <code>php:function('name')</code>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.intl">
  <title>Intl</title>

  <simpara>
   Adicionada a constante <constant>NumberFormatter::ROUND_HALFODD</constant> para
   complementar a funcionalidade existente da constante
   <constant>NumberFormatter::ROUND_HALFEVEN</constant>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.openssl">
  <title>OpenSSL</title>

  <simpara>
   Adicionado suporte para chaves baseadas em Curve25519 + Curve448.
   Especificamente, os campos x25519, ed25519, x448 e ed448 são suportados em
   <function>openssl_pkey_new</function>,
   <function>openssl_pkey_get_details</function> e
   <function>openssl_sign</function> e
   <function>openssl_verify</function> foi estendida para suportar essas chaves.
  </simpara>

  <simpara>
   Implementado o hash de senha PASSWORD_ARGON2.
   Requer OpenSSL 3.2 e compilação NTS do PHP.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pcre">
  <title>PCRE</title>

  <simpara>
   A biblioteca integrada pcre2lib foi atualizada para a versão 10.44.
   Como consequência, o suporte a LoongArch JIT foi adicionado, espaços
   agora são permitidos entre chaves em itens compatíveis com Perl, e
   afirmações retroativas de comprimento variável agora são suportadas.
  </simpara>

  <simpara>
   Com a biblioteca pcre2lib versão 10.44, o comprimento máximo de grupos de captura nomeados
   foi alterado de <literal>32</literal> para <literal>128</literal>.
  </simpara>

  <simpara>
   Adicionado suporte para o modificador <literal>r</literal> (PCRE2_EXTRA_CASELESS_RESTRICT),
   e também para o modificador de modo <literal>(?r)</literal>.
   Quando habilitados juntos com o modificador de insensibilidade a maiúsculas/minúsculas (<literal>i</literal>),
   a expressão bloqueia a mistura de caracteres ASCII e não ASCII.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo">
  <title>PDO</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_subclasses -->
  <simpara>
   Adicionado suporte para subclasses de drivers específicos para suportar melhor
   as funcionalidades específicas de cada banco de dados.
   As novas classes são instanciáveis tanto pela chamada ao método
   <methodname>PDO::connect</methodname> quanto pela instanciação direta
   de uma das subclasses específicas do driver.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Adicionado suporte para analisadores SQL específicos de drivers.
   Quando um analisador específico do driver não está disponível, o analisador padrão é usado.
   Os analisador padrão suporta:
   <simplelist>
    <member>
     literais com aspas simples e duplas, com a duplicação como um mecanismo de escape
    </member>
    <member>
     comentários no estilo C não aninhados e comentários de dois hífens
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-mysql">
  <title>PDO_MYSQL</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Adicionado suporte a analisador personalizado:
   <simplelist>
    <member>
     literais com aspas simples e duplas, com a duplicação e a barra invertida como mecanismos
     de escape
    </member>
    <member>
     identificadores de literais com acento grave (`), com a duplicação como mecanismo de escape
    </member>
    <member>
     comentários de dois hífens seguidos por pelo menos 1 espaço, comentários no estilo C não aninhados,
     e comentários hash
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Adicionado suporte a analisador personalizado:
   <simplelist>
    <member>
     literais com aspas simples e duplas, com a duplicação como mecanismo de escape
    </member>
    <member>
     strings literais de "escape" no estilo C (<literal>E'string'</literal>)
    </member>
    <member>
     strings literais envolvidos por cifrão
    </member>
    <member>
     comentários com dois hífens e no estilo C (não aninhados)
    </member>
    <member>
     suporte para <literal>??</literal> como sequência de escape para o
     operador <literal>?</literal>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-sqlite">
  <title>PDO_SQLITE</title>

  <!-- RFC: https://wiki.php.net/rfc/pdo_driver_specific_parsers -->
  <para>
   Adicionado suporte a analisador personalizado:
   <simplelist>
    <member>
     literais com aspas simples (''), aspas duplas (""), e acentos graves (``), com a duplicação como
     mecanismo de escape
    </member>
    <member>
     marcação com colchetes para identificadores
    </member>
    <member>
     comentários de dois hífens e comentários no estilo C (não aninhados)
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.phar">
  <title>Phar</title>

  <simpara>
   Adicionado suporte para a extensão de timestamp Unix para arquivos Zip.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.readline">
  <title>Readline</title>

  <simpara>
   Adicionada a capacidade de alteração do caminho de <literal>.php_history</literal> através
   da variável de ambiente <envar>PHP_HISTFILE</envar>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.reflection">
  <title>Reflection</title>

  <simpara>
   <classname>ReflectionAttribute</classname> agora contém uma
   propriedade <property>name</property> para melhorar a experiência de depuração.
  </simpara>

  <simpara>
   <methodname>ReflectionClassConstant::__toString</methodname> e
   <methodname>ReflectionProperty::__toString</methodname> agora retornam os
   comentários do documento anexado.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <para>
   Vários novos métodos e constantes relacionados com a funcionalidade de objetos lentos
   foram adicionados:

   <simplelist>
    <member>
     <methodname>ReflectionClass::newLazyGhost</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::newLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyGhost</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::isUninitializedLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::initializeLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::markLazyObjectAsInitialized</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::getLazyInitializer</methodname>
    </member>
    <member>
     <methodname>ReflectionProperty::skipLazyInitialization</methodname>
    </member>
    <member>
     <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_DESTRUCTOR</constant>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.soap">
  <title>SOAP</title>

  <simpara>
   Adicionado suporte para notação Clark para espaços de nomes no mapa de classes.
   Agora é possível especificar entradas em um mapa de classes com notação Clark
   para resolver um tipo com um espaço de nomes específico para uma classe específica.
   Por exemplo: <code>'{http://example.com}foo' => 'FooClass'</code>.
  </simpara>

  <simpara>
   Instâncias de <interfacename>DateTimeInterface</interfacename> que são
   passadas para <literal>xsd:datetime</literal> ou elementos similares agora são
   serializadas como tais ao invés de serem serializadas como uma string vazia.
  </simpara>

  <simpara>
   A persistência de sessão agora funciona com um módulo de sessão compartilhada.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.standard">
  <title>Standard</title>

  <!-- RFC: https://wiki.php.net/rfc/correctly_name_the_rounding_mode_and_make_it_an_enum -->
  <simpara>
   <!-- Should this use <enumname> -->
   Adicionada uma nova enumeração <classname>RoundingMode</classname> com nome mais claros
   e capacidade de descoberta melhorada quando comparada com as
   constantes <constant>PHP_ROUND_<replaceable>*</replaceable></constant>.
   Mais ainda, quatro novos modes de arredondamento foram adicionados, que estão disponíveis somente
   através da nova enumeração <classname>RoundingMode</classname>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.xsl">
  <title>XSL</title>

  <simpara>
   Agora é possível usar parâmetros que contenham tanto aspas simples quanto aspas
   duplas.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Agora é possível passar qualquer chamável para o método
   <methodname>XSLTProcessor::registerPhpFunctions</methodname>.
   <!-- TODO Mention XSLTProcessor::registerPHPFunctionNS ? -->
  </simpara>

  <simpara>
   Adicionada as propriedades <property>XSLTProcessor::$maxTemplateDepth</property> e
   <property>XSLTProcessor::$maxTemplateVars</property>
   para controlar a profundidade de recursão da avaliação de modelo XSL.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.zip">
  <title>Zip</title>

  <simpara>
   Adicionada a constante <constant>ZipArchive::ER_TRUNCATED_ZIP</constant>,
   que foi adicionada na libzip 1.11.
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
