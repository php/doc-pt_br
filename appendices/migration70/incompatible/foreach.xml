<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 285e7e31e523ac35abc12bb1d7d60c8a6e42c4c6 Maintainer: fabioluciano Status: ready --><!-- CREDITS: fabioluciano -->

<sect2 xml:id="migration70.incompatible.foreach">
 <title>Mudanças no &foreach;</title>

 <para>
  Pequenas mudanças foram feitas no modo como a estrutura de controle &foreach;
  se comporta, principalmente na manipulação do ponteiro interno do array e
  modificações no array sendo iterado.
 </para>

 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; não modifica mais o ponteiro interno do array</title>

  <para>
   Antes do PHP 7, o ponteiro interno do array era modificado enquanto o array
   era iterado usando o &foreach;. Este não é mais o caso, como mostrado
   nos exemplos a seguir:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>&foreach; por valor opera em uma cópia do array</title>

  <para>
   Quando usado no modo padrão, por valor, o &foreach; vai operar em uma
   cópia do array sendo iterado, ao invés do próprio array. Isso significa
   que mudanças feitas durante a iteração do array, não afetarão os valores
   iterados.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>Melhora no comportamento da iteração por referência com &foreach;</title>

  <para>
   Quanto iterado por referência, o &foreach; fará um melhor trabalho de
   controlar as alterações feitas ao array durante a iteração. Por exemplo,
   inclusões ao array enquanto iterado, agora resultam na inclusão de
   valores enquanto itera, como a seguir:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Iteração de objetos não <classname>Traversable</classname></title>

  <para>
   Iterar objetos não <classname>Traversable</classname> agora
   têm o mesmo comportamento que iterar arrays por referência. Isso
   resulta na
   <link linkend="migration70.incompatible.foreach.by-ref">melhora do comportamento quando houver modificações no array durante a iteração</link>
   também aplicado quando propriedades são adicionadas ou removidas do
   objeto.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
