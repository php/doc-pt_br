<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2485376b5b3d6b40e5c0d4e198ab5ff2a142425c Maintainer: leonardolara Status: ready --><!-- CREDITS: fabioluciano,leonardolara -->

<sect2 xml:id="migration70.incompatible.error-handling">
  <title>Modificações na manipulação de erros e exceções</title>

 <para>
  Muitos erros fatais e recuperáveis foram convertidos para exceções no
  PHP 7. Estas exceções herdam a classe <classname>Error</classname>,
  que implementa a interface <classname>Throwable</classname>
  (a interface base da qual todas as exceções herdam).
 </para>

 <para>
  Isso significa que manipuladores de erros podem não ser ativados porque
  exceções estão sendo disparadas em seu lugar (causando novos erros fatais por
  exceções <classname>Error</classname> não capturadas)
 </para>

 <para>
  Uma descrição completa de como tratar erros no PHP 7 pode ser encontrada
  <link linkend="language.errors.php7">na página de erros do PHP 7</link>. Este
  guia de migração irá enumerar apenas as mudanças compatíveis com versões
  anteriores.
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   <function>set_exception_handler</function> não têm mais garantias de
   receber um objeto do tipo <classname>Exception</classname>.
  </title>

  <para>
   Códigos que implementam um manipulador de exceção registrado com
   <function>set_exception_handler</function> usando a declaração de tipo
   <classname>Exception</classname> causará um erro fatal quando um objeto
   <classname>Error</classname> for lançado.
  </para>

  <para>
   Se o manipulador precisa funcionar com PHP 5 e 7, a declaração de
   tipo do manipulador deve ser removida, enquanto que o código que está sendo migrado
   para funcionar exclusivamente no PHP 7 pode simplesmente substituir a declaração de tipo
   <classname>Exception</classname> por
   <classname>Throwable</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Código da era PHP 5 que não irá funcionar.
function handler(Exception $e) { /* ... */ }
set_exception_handler('handler');

// Compatível com PHP 5 e 7.
function handler($e) { /* ... */ }

// Somente PHP 7.
function handler(Throwable $e) { /* ... */ }
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>Construtores internos sempre lançarão exceções em caso de falha</title>

  <para>
   Anteriormente, algumas classes internas retornavam &null; ou um objeto inútil
   quando o construtor falhava. Todas as classes internas agora lançam
   <classname>Exception</classname> neste caso, da mesma forma que
   as classes de usuário já faziam.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>Erros de Parse lançam exceções <classname>ParseError</classname></title>

  <para>
   Erros de Parser agora lançam um objeto <classname>ParseError</classname>. Manipular
   erros da função <function>eval</function> devem incluir um bloco &catch;
   que possa manipular este erro.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.strict">
  <title>Mudanças na severidade de notificações E_STRICT</title>

  <para>
   Todas as notificações <constant>E_STRICT</constant> foram reclassificadas para
   outros níveis. A constante <constant>E_STRICT</constant> foi mantida, então chamar
   <literal>error_reporting(E_ALL|E_STRICT)</literal> não causará um erro.
  </para>
  <para>
   <table>
    <title>Mudanças na severidade de notificações <constant>E_STRICT</constant></title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Situação</entry>
        <entry>Novo nível/Comportamento</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Utilizar um recurso como índice</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Métodos estáticos abstratos</entry>
        <entry>Notificação removida, não dispara erro</entry>
       </row>
       <row>
        <entry>"Redefinindo" um construtor</entry>
        <entry>Notificação removida, não dispara erro</entry>
       </row>
       <row>
        <entry>Assinatura incompatível durante a herança</entry>
        <entry><constant>E_WARNING</constant></entry>
       </row>
       <row>
        <entry>Mesmas propriedades(compatíveis) em duas traits utilizadas</entry>
        <entry>Notificação removida, não dispara erro</entry>
       </row>
       <row>
        <entry>Acessando propriedades estáticas de forma não estática</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Somente variáveis devem ser ser atribuídas por referência</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Somente variáveis devem ser passadas por referência</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Chamando métodos não estáticos de forma estática</entry>
        <entry><constant>E_DEPRECATED</constant></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
