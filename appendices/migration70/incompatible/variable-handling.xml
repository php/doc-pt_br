<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 35511ebc54edd56f1653a6a956210b4728570316 Maintainer: fabioluciano Status: ready --><!-- CREDITS: fabioluciano, geekcom -->

<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>Mudanças na manipulação de variáveis</title>

 <para>
  O PHP 7 utiliza uma sintaxe abstrata de árvore para analisar os arquivos fonte. Isso
  permitiu diversas melhorias para a linguagem que eram impossíveis
  devido a limitações no analisador utilizado em versões anteriores do
  PHP, porém resultou na remoção de alguns casos especiais por razões de consistência,
  que resulta em quebras de compatibilidades com versões anteriores. Esses casos
  são detalhados nesta seção.
 </para>

 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>
   Mudanças na manipulação indireta de variáveis, propriedades e métodos
  </title>

  <para>
   Acessar indiretamente variáveis, propriedades, e métodos, agora serão
   avaliados estritamente da esquerda para a direita, o oposto dos casos especiais
   em versões anteriores. A tabela a seguir mostra como a ordem de avaliação
   mudou.
  </para>

  <para>
   <table>
    <title>Nova e antiga avaliação de expressões indiretas</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Expressão</entry>
       <entry>Interpretação no PHP 5</entry>
       <entry>Interpretação no PHP 7</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Códigos que usam a ordem de avaliação da direita para esquerda devem ser reescritos para
   o uso explícito da ordem de avaliação com chaves (veja a coluna do
   meio). Isso fará com que o código seja compatível com versões posteriores
   ao PHP 7.x e compatível com o PHP 5.x.
  </para>

  <para>
   Isso também afeta a palavra chave &global;. A sintaxe com chaves pode ser
   usada para emular o comportamento anterior se necessário:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // Válido apenas no PHP 5.
    global $$foo->bar;

    // Válido no PHP 5 e 7.
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title>Mudanças na manipulação com a função <function>list</function></title>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    A função <function>list</function> não faz mais atribuições em ordem reversa
   </title>

   <para>
    A função <function>list</function> agora irá atribuir valores as variáveis na
    ordem em que foram definidas, em vez de ordem reversa. De modo geral, isso só
    afeta casos onde a função <function>list</function> é utilizada em
    conjunção com o operador de array <code>[]</code>, como mostrado a seguir:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>

   <para>
    De modo geral, é recomendado não confiar na ordem em que as atribuições com
    que a função <function>list</function> ocorrem, como sua implementação
    detalha, isso pode mudar novamente no futuro.
   </para>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>Atribuições de <function>list</function> vazias foram removidas</title>

   <para>
    Chamadas a função <function>list</function> não podem mais ser vazias. O que é visto
    a seguir não é mais permitido:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title>A função <function>list</function> não podem desempacotar <type>string</type>s</title>

   <para>
    A função <function>list</function> não podem mais desempacotar variáveis do
    tipo <type>string</type>. Em vez disso, a função <function>str_split</function> deve ser usada.
   </para>
  </sect4>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   A ordenação de arrays quando elementos são criados durante atribuições por
   referência mudou
  </title>

  <para>
   A ordem dos elementos no array foi modificada quando estes elementos
   foram automaticamente criados por referência em uma atribuição por referência.
   Por exemplo:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>
   Parênteses em torno de parâmetros de função não afetam mais seu comportamento
  </title>

  <para>
   No PHP 5, usar parênteses redundantes em torno de parâmetros de uma função
   podem disparar avisos de quebra de padrões quando os parâmetros da função
   fossem passados por referência. Agora, o aviso sempre será emitido.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getArray() {
    return [1, 2, 3];
}

function squareArray(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// Generates a warning in PHP 7.
squareArray((getArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
