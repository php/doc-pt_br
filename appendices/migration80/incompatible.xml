<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c31630ca23d219c758a8b580e1d583103e97e377 Maintainer: geekcom Status: wip --><!-- CREDITS: geekcom, adiel -->

<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Alterações incompatíveis com versões anteriores</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>Comparação entre String e Número</title>

   <para>
    Comparações não estritas entre números e strings não numéricas, agora funcionam convertendo o número para
    string e comparando as strings. As comparações entre números e strings numéricas continuam a
    funcionando como antes. Notavelmente, isso significa que a comparação: <code>0 == "nao-numero"</code> agora é considerada
    falsa.
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Comparação</entry>
        <entry>Antes</entry>
        <entry>Depois</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>Outras mudanças incompatíveis</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> é agora uma palavra reservada.
     </para>
    </listitem>
    <listitem>
     <para>
      As falhas de asserção agora são lançadas por padrão. Se o comportamento antigo é desejado,
      <code>assert.exception=0</code> pode ser definido nas configurações INI.
     </para>
    </listitem>
    <listitem>
     <para>
	  Métodos com o mesmo nome de classe não são mais interpretados como construtor. O 
      método <link linkend="object.construct">__construct()</link> deve ser utilizado em seu lugar.
     </para>
    </listitem>
    <listitem>
     <para>
      A capacidade de chamar métodos não estáticos estaticamente foi removida. Por isso
      <function>is_callable</function> irá falhar ao verificar um método não estático com 
	  um nome de classe (deve se realizar uma verificação com uma instância de objeto).
     </para>
    </listitem>
    <listitem>
     <para>
      Foram removidos os casts <code>(real)</code> e <code>(unset)</code>.
     </para>
    </listitem>
    <listitem>
      <para>
       A diretiva <link linkend="ini.track-errors">track_errors</link> no php.ini foi removida. Isto
       signifca que o <varname>php_errormsg</varname> não está mais disponível. A função
       <function>error_get_last</function> deve ser utilizada em seu lugar.
      </para>
    </listitem>
    <listitem>
     <para>
      A capacidade de definir constantes que não diferenciam maiúsculas de minúsculas foi removida. O 
	  terceiro argumento para a função <function>define</function> não pode ser mais &true;.
     </para>
    </listitem>
    <listitem>
     <para>
	  A capacidade de especificar um auto carregamento utilizando a função <function>__autoload</function> foi 
      removida. A função <function>spl_autoload_register</function> deve ser utilizada em seu lugar.
     </para>
    </listitem>
    <listitem>
     <para>
      O argumento <parameter>errcontext</parameter> para manipulador de erros personalizados foi removido.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>create_function</function> foi removido. Ao invés disso, funções anônimas devem ser utilizadas.
     </para>
    </listitem>
    <listitem>
     <para>
      A função <function>each</function> foi removida. &foreach; ou <classname>ArrayIterator</classname>
      devem ser utilizados em seu lugar.
     </para>
    </listitem>
    <listitem>
     <para>
	  Foi removida a capacidade de desvincular <varname>this</varname> de closures que foram 
	  criados a partir de um método, usando <methodname>Closure::fromCallable</methodname> ou 
	  <methodname>ReflectionMethod::getClosure</methodname>.
     </para>
    </listitem>
    <listitem>
     <para>
      A habilidade de desvincular <varname>this</varname> de closures que contêm usos de
      <varname>this</varname> também foi removida.
     </para>
    </listitem>
    <listitem>
     <para>
      A habilidade de utilizar <function>array_key_exists</function> com objetos foi removida.
      <function>isset</function> or <function>property_exists</function> may be used instead.
     </para>
    </listitem>
    <listitem>
     <para>
      O comportamento da função <function>array_key_exists</function> com relação ao tipo do parâmetro
      <parameter>key</parameter> agora é consistente com a função <function>isset</function> e 
      acesso normal à array. Todos os tipos de chave agora usam as coerções usuais e as chaves de 
	  array/objeto lançam um <classname>TypeError</classname>.
     </para>
    </listitem>
    <listitem>
     <para>
      Qualquer array com número <replaceable>n</replaceable> em sua primeira posição utilizará 
      <replaceable>n+1</replaceable> em sua próxima chave implícita mesmo se <replaceable>n</replaceable> 
	  for negativo.
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      O nível de error_reporting padrão é <constant>E_ALL</constant>. Anteriormente excluía
      <constant>E_NOTICE</constant> e <constant>E_DEPRECATED</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <link linkend="ini.display-startup-errors">display_startup_errors</link> é habilitado agora por 
      padrão.
     </para>
    </listitem>
    <listitem>
     <para>
      Usar <type>parent</type> dentro de uma classe sem pai agora produzirá um erro fatal em tempo de execução.
     </para>
    </listitem>
    <listitem>
     <para>
      O operador <literal>@</literal> não irá mais silenciar erros fatais
      (<constant>E_ERROR</constant>, <constant>E_CORE_ERROR</constant>,
      <constant>E_COMPILE_ERROR</constant>, <constant>E_USER_ERROR</constant>,
      <constant>E_RECOVERABLE_ERROR</constant>, <constant>E_PARSE</constant>). Manipuladores de erros que 
	  esperam que error_reporting seja <literal>0</literal> quando <literal>@</literal> é usado, devem 
	  ser ajustados para usar uma verificação de máscara:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Replace
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return; // Silenced
    }
    // ...
}

// With
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return; // Silenced
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
	  Adicionalmente, cuidados devem ser tomados para que mensagens de erro não sejam mostradas 
	  no ambiente de produção, o que podem resultar em vazamento de informações. Certifique-se 
	  de que a diretiva <code>display_errors=Off</code> seja usada em conjunto com o log de 
	  erros.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> não é mais interpretado como o início de um comentário,
      já que esta sintaxe é utilizada agora para atributos.
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      Inheritance errors due to incompatible method signatures (LSP violations) will now always
      generate a fatal error. Previously a warning was generated in some cases.
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      A precedência dos operadores de concatenação foi modificada em relação ao bitshifts tanto na adição 
      como na subtração 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Sum: " . $a + $b;
// was previously interpreted as:
echo ("Sum: " . $a) + $b;
// is now interpreted as:
echo "Sum:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
	  Argumentos com um valor padrão que avaliam para &null; em tempo de execução, não irão mais marcar o tipo do parâmetro como implícito. Um tipo explícito nulo, ou explicitamente &null; como argumento padrão
       deve ser usado em seu lugar.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Replace
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// With
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// Or
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      Uma série de avisos foram convertidos para exceções do tipo <classname>Error</classname>:
     </para>
     <para>
      <simplelist>
       <member>
        Attempting to write to a property of a non-object. Previously this
        implicitly created an stdClass object for null, false and empty strings.
       </member>
       <member>
        Attempting to append an element to an array for which the PHP_INT_MAX key
        is already used.
       </member>
       <member>
        Attempting to use an invalid type (array or object) as an array key or
        string offset.
       </member>
       <member>Attempting to write to an array index of a scalar value.</member>
       <member>Attempting to unpack a non-array/Traversable.</member>
       <member>
        Attempting to access unqualified constants which are undefined.
        Previously, unqualified constant accesses resulted in a warning and were interpreted as strings.
       </member>
      </simplelist>
     </para>
     <para>
      Uma série de notificações foram convertidas em avisos:
     </para>
     <para>
      <simplelist>
	   <member>Tentativa de leitura em uma variável não definida.</member>
       <member>Tentativa de leitura em uma propriedade não definida.</member>
       <member>Tentativa de leitura em uma chave de array não definido.</member>
       <member>Tentativa de leitura em uma propriedade de um não objeto.</member>
       <member>Tentativa de acesso em um índice de array em um não array.</member>
       <member>Tentativa de conversão de um array para uma string.</member>
       <member>Tentativa de usar um resource como uma chave de array.</member>
       <member>Tentativa de usar null, um booleano ou um número de ponto flutuante(float) como uma posinção em uma string.</member>
       <member>Tentativa de leitura em uma posição fora dos limites de uma string.</member>
       <member>Tentativa de atribuir uma string vazia a uma posição de uma string.</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
	  Tentativa de atribuir multiplos bytes em uma posição de uma string agora emite um aviso.
     </para>
    </listitem>
    <listitem>
     <para>
	  Caracteres inesperados no arquivo fonte (como bytes NUL fora de strings) agora irá resultar em uma
	  exceção <classname>ParseError</classname> ou invés de um aviso do compilador.
     </para>
    </listitem>
    <listitem>
     <para>
	  As exceções não capturadas agora passam por "desligamento limpo", o que significa que os destrutores são chamados
      após uma exceção não detectada.
     </para>
    </listitem>
    <listitem>
     <para>
	  O erro fatal de tempo de compilação "Somente variáveis podem ser passadas por referência" foi adiado até o
      runtime, e convertido em uma exceção de <classname>Error</classname> "argumento não pode ser passado por referência".
     </para>
    </listitem>
    <listitem>
     <para>
	  Alguns alertas do tipo "Somente variáveis podem ser passadas por referência" foram convertidas para 
	  exceções do tipo "Argumento deve ser passado por referência"
     </para>
    </listitem>
    <listitem>
     <para>
	  O nome gerado para classes anônimas foi modificado. Agora, inclui o nome do primeira classe ou 
	  interface:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
	  O nome mostrado acima ainda é seguido por um byte NUL e um sufixo exclusivo.
     </para>
    </listitem>
    <listitem>
     <para>
	  As referências de método de traço não absoluto em adaptações de alias de traço agora precisam ser
      inequívocas:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
	  Se <code> T1::func()</code> e <code>T2::func()</code> existem, este código anteriormente foi 
      aceito de forma silenciosa e func assumia referência a <code>T1::func</code>. Agora vai gerar um
      erro fatal, e <code>T1::func</code> ou <code>T2::func </code> precisam ser escritos explicitamente.
     </para>
    </listitem>
    <listitem>
     <para>
	  A assinatura de métodos abstratos definido nas características agora é verificada no método de implementação 
	  da classe:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // Error, because of return type mismatch.
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
	  Funções desabilitadas agora são tratadas da mesma forma que funções não existentes. Ao chamar 
	  uma função desabilitada será informado que ela é desconhecida, e redefinir uma função 
	  desabilitada é agora possível.
     </para>
    </listitem>
    <listitem>
     <para>
      Os stream wrappers <literal>data://</literal>  não podem mais ser writable, indo 
	  de encontro ao comportamento documentado.
     </para>
    </listitem>
    <listitem>
     <para>
      Os operadores aritméticos e bit a bit <literal>+</literal>, <literal>-</literal>,
      <literal>*</literal>, <literal>/</literal>, <literal>**</literal>, <literal>%</literal>,
      <literal>&lt;&lt;</literal>, <literal>&gt;&gt;</literal>, <literal>&amp;</literal>,
      <literal>|</literal>, <literal>^</literal>, <literal>~</literal>, <literal>++</literal>,
      <literal>--</literal> irá agora apresentar um <classname>TypeError</classname> quando um dos 
      operandos estiver em um &array;, &resource; ou em um &object; não sobrecarregado. A unica exceção a isto é 
      a operação de mesclagem de array com <literal>+</literal>, que permanece suportada.
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
	  A conversão de float para string agora sempre terá o mesmo comportamento, independentemente da localidade.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// Previously: 3,14
// Now:        3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      Veja as funções <function>printf</function>, <function>number_format</function> and
      <methodname>NumberFormatter</methodname> para customizar a formatação de números.
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      Support for deprecated curly braces for offset access has been removed.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Instead of:
$array{0};
$array{"key"};
// Write:
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
	  Aplicando o modificador final ou método privado agora irá produzir um aviso a menos que o método 
	  seja o construtor.
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Se um objeto construtor chama a função <function>exit</function>, o objeto destrutor não será chamado. 
	  Isto vai de encontro ao comportamento que o contrutor executa.
     </para>
    </listitem>
    <listitem>
     <para>
	  Nomes de Namespace não podem mais conter espaços em branco: Enquanto <code>Foo\Bar</code> será reconhecido
	  como um nome de Namespace, <code>Foo \ Bar</code> não será. Por outro lado, as palavras-chave agora serão 
	  permitidos como segmentos de um namespace, o que permite a mudança na interpretação do código:
      <code>new\x</code> agora é o mesmo que <code>constant('new\x')</code>, e não <code>new \x()</code>.
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
	  Os ternários aninhados agora exigem parênteses explícitos.
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> e <methodname>Exception::getTrace</methodname> agora não mais 
	  apresentam referencias aos argumentos. Não será possivel mudar os argumentos de uma função 
	  através de um backtrace.
     </para>
    </listitem>
    <listitem>
     <para>
	  O uso de strings numéricas foi modificado para ser mais intuitivo e menos sujeito a erros. Seguindo
	  os espaços em branco, é permitido agora strings numéricas para tratamento de consistência contendo espaços em branco. 
	  Isso afeta principalmente:
     </para>
     <para>
      <simplelist>
       <member>A funcção <function>is_numeric</function></member>
       <member>Comparação string a string </member>
       <member>Declaração de tipos</member>
       <member>Operações de incremento e decremento</member>
      </simplelist>
     </para>
	 <!-- LEMBRETE: COMO HAVIAM CONVERSAS PARALELAS ME INTERROMPENDO, POSSO TER ERRADO ALGO NESTA TRADUÇÃO -->
     <para>
	  O conceito de um "leading-numeric string" foi praticamente abandonado; os casos onde permanecem 
	  são para facilitar a migração. Strings que emitem um <constant>E_NOTICE</constant> "Um valor 
	  numerico não bem formado foi encontrado" agora emitirá um <constant>E_WARNING</constant> "Um valor
      valor não numérico encontrado " e todas as strings que emitiram um <constant>E_WARNING</constant> "Um 
	  valor não numerico encontrado" agora produzirá um erro 
      <classname>TypeError</classname>. Isso afeta principalmente:
     </para>
     <para>
      <simplelist>
       <member>Operações aritméticas</member>
       <member>Operações bit a bit</member>
      </simplelist>
     </para>
     <para>
	  Esta mudança do <constant>E_WARNING</constant> para <classname>TypeError</classname> também afeta o
	  <constant>E_WARNING</constant> "Illegal string offset 'string'" para o posicionamente ilegal de strings. O 
	  comportamento de conversões explícitas de strings para int/float não foi alterado.
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
	  Métodos mágicos agora podem ter argumentos e retornar tipos verificados se eles foram declarados.
	  As assinaturas devem corresponder à seguinte lista:
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      As chaves do array <function>call_user_func_array</function> agora podem ser interpretadas 
	  como nomes de parãmetros, ao invés de serem silenciosamente ignorados.
     </para>
    </listitem>
    <listitem>
     <para>
	  A declaração da função chamada <literal>assert()</literal> dentro de um namespace não é
	  mais permitida e gera um <constant>E_COMPILE_ERROR</constant>.
	  A funçãi <function>assert</function> recebe um tratamento especial pelo motor do PHP, 
	  o que pode levar a comportamentos inconsistentes quando definido como uma função de namespace
	  com o mesmo nome.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>Migração de Resource para Objeto</title>

  <para>
   Diversos &resource;s foram migrados para &object;s.
   Return value checks using <function>is_resource</function> should be replaced with checks for &false;.
  </para>
  <itemizedlist>
    <listitem>
     <para>
      <function>curl_init</function> will now return a <classname>CurlHandle</classname> object rather
      than a &resource;. The <function>curl_close</function> function no longer has an effect,
      instead the <classname>CurlHandle</classname> instance is automatically destroyed if it is no
      longer referenced.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_multi_init</function> will now return a <classname>CurlMultiHandle</classname>
      object rather than a &resource;. The <function>curl_multi_close</function> function no
      longer has an effect, instead the <classname>CurlMultiHandle</classname> instance is
      automatically destroyed if it is no longer referenced.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_share_init</function> will now return a <classname>CurlShareHandle</classname>
      object rather than a &resource;. The <function>curl_share_close</function> function no
      longer has an effect, instead the <classname>CurlShareHandle</classname> instance is
      automatically destroyed if it is no longer referenced.
     </para>
    </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> will now return an <classname>EnchantBroker</classname>
     object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> and
     <function>enchant_broker_request_pwl_dict</function> will now return an
     <classname>EnchantDictionary</classname> object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     The GD extension now uses <classname>GdImage</classname> objects as the underlying data structure
     for images, rather than &resource;s.
     The <function>imagedestroy</function> function no longer has an effect; instead the
     <classname>GdImage</classname> instance is automatically destroyed if it is no longer referenced.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> and <function>openssl_csr_sign</function> will now return
     an <classname>OpenSSLCertificate</classname> object rather than a &resource;.
     The <function>openssl_x509_free</function> function is deprecated and no longer has an effect,
     instead the <classname>OpenSSLCertificate</classname> instance is automatically destroyed if it
     is no longer referenced.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> will now return an
     <classname>OpenSSLCertificateSigningRequest</classname> object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> will now return an
     <classname>OpenSSLAsymmetricKey</classname> object rather than a &resource;.
     The <function>openssl_pkey_free</function> function is deprecated and no longer has an effect,
     instead the <classname>OpenSSLAsymmetricKey</classname> instance is automatically destroyed if it
     is no longer referenced.
    </para>
   </listitem>
   <listitem>
     <para>
      <function>shmop_open</function> will now return a <classname>Shmop</classname> object rather than
      a &resource;. The <function>shmop_close</function> function no longer has an effect, and is
      deprecated; instead the <classname>Shmop</classname> instance is automatically destroyed if it is
      no longer referenced.
     </para>
    </listitem>
   <listitem>
    <para>
     <function>socket_create</function>, <function>socket_create_listen</function>,
     <function>socket_accept</function>, <function>socket_import_stream</function>,
     <function>socket_addrinfo_connect</function>, <function>socket_addrinfo_bind</function>, and
     <function>socket_wsaprotocol_info_import</function> will now return a
     <classname>Socket</classname> object rather than a &resource;.
     <function>socket_addrinfo_lookup</function> will now return an array of
     <classname>AddressInfo</classname> objects rather than &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> will now return an <classname>SysvMessageQueue</classname>
     object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> irá retornar agora um objeto <classname>SysvSemaphore</classname> 
     ao invés de um &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> irá retornar agora um objeto <classname>SysvSharedMemory</classname> 
     ao invés de um &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> e <function>xml_parser_create_ns</function> irão agora 
     retornar um objeto <classname>XmlParser</classname> tanto quanto um &resource;. A função 
     <function>xml_parser_free</function> não terá mais esse efeito, ao contrário da instância XmlParser
     que é automaticamente destruída, se não for referenciada.
    </para>
   </listitem>
   <listitem>
    <para>
     A função <link linkend="book.xmlwriter">XMLWriter</link> agora aceita e retorna, respectivamente,
     objetos <classname>XMLWriter</classname> ao invés de &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> irá agora retornar um objeto <classname>InflateContext</classname> 
     ao invés de um &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> irá agora retornar um objeto <classname>DeflateContext</classname> 
	 ao invés de um &resource;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM and .Net (Windows)</title>

  <para>
   The ability to import case-insensitive constants from type libraries has been removed.
   The second argument to <function>com_load_typelib</function> may no longer be false;
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link>
   may no longer be disabled; case-insensitive markers in
   <link linkend="ini.com.typelib-file">com.typelib_file</link> are ignored.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> no longer accepts objects as arrays. To
   interpret an object as an array, perform an explicit <code>(array)</code> cast. The
   same applies to other options accepting arrays as well.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>Date and Time</title>

  <para>
   <function>mktime</function> and <function>gmmktime</function> now require at least one
   argument. <function>time</function> can be used to get the current timestamp.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   Unimplemented classes from the DOM extension that had no behavior and contained test
   data have been removed. These classes have also been removed in the latest version of
   the DOM standard:
  </para>
  <para>
   <simplelist>
    <member>DOMNameList</member>
    <member>DomImplementationList</member>
    <member>DOMConfiguration</member>
    <member>DomError</member>
    <member>DomErrorHandler</member>
    <member>DOMImplementationSource</member>
    <member>DOMLocator</member>
    <member>DOMUserDataHandler</member>
    <member>DOMTypeInfo</member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>, <function>enchant_broker_describe</function> and
     <function>enchant_dict_suggest</function> will now return an empty array instead of &null;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   <function>read_exif_data</function> has been removed; <function>exif_read_data</function>
   should be used instead.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Filter</title>

  <itemizedlist>
   <listitem>
    <para>
     The <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> and
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> flags for the
     <constant>FILTER_VALIDATE_URL</constant> filter have been removed. The <literal>scheme</literal>
     and <literal>host</literal> are (and have been) always required.
    </para>
   </listitem>
   <listitem>
    <para>
     The <constant>INPUT_REQUEST</constant> and <constant>INPUT_SESSION</constant> source for
     <function>filter_input</function> etc. have been removed. These were never implemented and their
     use always generated a warning.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated functions <function>image2wbmp</function> has been removed.
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated functions <function>png2wbmp</function> and <function>jpeg2wbmp</function> have
     been removed.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     The default <parameter>mode</parameter> parameter of <function>imagecropauto</function> no longer
     accepts <literal>-1</literal>. <constant>IMG_CROP_DEFAULT</constant> should be used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     On Windows, <filename>php_gd2.dll</filename> has been renamed to <filename>php_gd.dll</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   <function>gmp_random</function> has been removed. One of <function>gmp_random_range</function> or
   <function>gmp_random_bits</function> should be used instead.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   iconv implementations which do not properly set <varname>errno</varname> in case of errors are no
   longer supported.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     The unused <parameter>default_host</parameter> argument of <function>imap_headerinfo</function>
     has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     The <function>imap_header</function> function which is an alias of
     <function>imap_headerinfo</function> has been removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>Internationalization Functions</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated constant <constant>INTL_IDNA_VARIANT_2003</constant> has been removed.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
   <para>
    The deprecated <constant>Normalizer::NONE</constant> constant has been removed.
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
   <para>
    The deprecated functions <function>ldap_sort</function>,
    <function>ldap_control_paged_result</function> and
    <function>ldap_control_paged_result_response</function> have been removed.
   </para>
  </listitem>
  <listitem>
   <para>
    The interface of <function>ldap_set_rebind_proc</function> has changed; the
    <parameter>callback</parameter> parameter does not accept empty strings anymore; &null; should be
    used instead.
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     The <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link> directive has been
     removed. The related <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant>, and <constant>MB_OVERLOAD_REGEX</constant> constants
     have also been removed. Finally, the <literal>"func_overload"</literal> and
     <literal>"func_overload_list"</literal> entries in <function>mb_get_info</function> have been
     removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_parse_str</function> can no longer be used without specifying a result array.
    </para>
   </listitem>
   <listitem>
    <para>
     A number of deprecated mbregex aliases have been removed. See the following
     list for which functions should be used instead:
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>e</literal> modifier for <function>mb_ereg_replace</function> has been removed.
     <function>mb_ereg_replace_callback</function> should be used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     A non-string pattern argument to <function>mb_ereg_replace</function> will now be interpreted as
     a string instead of an ASCII codepoint. The previous behavior may be restored with an explicit
     call to <function>chr</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument for <function>mb_strpos</function>,
     <function>mb_strrpos</function>, <function>mb_stripos</function>,
     <function>mb_strripos</function>, <function>mb_strstr</function>,
     <function>mb_stristr</function>, <function>mb_strrchr</function> and
     <function>mb_strrichr</function> can now be empty.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>is_hex</parameter> parameter, which was not used internally, has been removed from
     <function>mb_decode_numericentity</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     The legacy behavior of passing the encoding as the third argument instead of an offset for the
     <function>mb_strrpos</function> function has been removed; an explicit <literal>0</literal>
     offset with the encoding should be provided as the fourth argument instead.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>ISO_8859-*</literal> character encoding aliases have been replaced by
     <literal>ISO8859-*</literal> aliases for better interoperability with the iconv extension. The
     mbregex ISO 8859 aliases with underscores (<literal>ISO_8859_*</literal> and
     <literal>ISO8859_*</literal>) have also been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> and <function>mb_eregi</function> will now return boolean &true; on
     a successfuly match. Previously they returned integer <literal>1</literal> if
     <parameter>matches</parameter> was not passed, or <code>max(1, strlen($matches[0]))</code> if
     <parameter>matches</parameter> was passed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     The <classname>OCI-Lob</classname> class is now called <classname>OCILob</classname>, and the
     <classname>OCI-Collection</classname> class is now called <classname>OCICollection</classname>
     for name compliance enforced by PHP 8 arginfo type annotation tooling.
    </para>
   </listitem>
   <listitem>
    <para>
     Several alias functions have been marked as deprecated.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> and its alias <function>ociinternaldebug</function> have
     been removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> no longer reuses connections.
    </para>
   </listitem>
   <listitem>
    <para>
     The unused <parameter>flags</parameter> parameter of <function>odbc_exec</function> has been
     removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> and <function>openssl_open</function> now require
     <parameter>method</parameter> to be passed, as the previous default of <literal>"RC4"</literal>
     is considered insecure.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>Regular Expressions (Perl-Compatible)</title>

  <para>
   When passing invalid escape sequences they are no longer interpreted as literals. This behavior
   previously required the <literal>X</literal> modifier – which is now ignored.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>PHP Data Objects</title>

  <itemizedlist>
   <listitem>
    <para>
     The default error handling mode has been changed from "silent" to "exceptions". See
     <link linkend="pdo.error-handling">Errors and error handling</link> for details.
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     The signatures of some PDO methods have changed:
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   The &php.ini; directive
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link> has been
   removed.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> now reports the actual transaction state of
   the connection, rather than an approximation maintained by PDO. If a query that is
   subject to "implicit commit" is executed, <methodname>PDO::inTransaction</methodname>
   will subsequently return &false;, as a transaction is no longer active.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated <function>pg_connect</function> syntax using multiple parameters instead of a
     connection string is no longer supported.
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated <function>pg_lo_import</function> and <function>pg_lo_export</function> signature
     that passes the connection as the last argument is no longer supported. The connection should be
     passed as first argument instead.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> will now return an empty array instead of &false; for result
     sets with zero rows.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   Metadata associated with a phar will no longer be automatically unserialized, to fix potential
   security vulnerabilities due to object instantiation, autoloading, etc.
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     The method signatures
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     have been changed to:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     Code that must be compatible with both PHP 7 and PHP 8 can use the following
     signatures to be compatible with both versions:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     The <methodname>ReflectionType::__toString</methodname> method will now return a complete debug
     representation of the type, and is no longer deprecated. In particular the result will include a
     nullability indicator for nullable types. The format of the return value is not stable and may
     change between PHP versions.
    </para>
   </listitem>
   <listitem>
    <para>
     Reflection export() methods have been removed.
     Instead reflection objects can be cast to string.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> and
     <methodname>ReflectionMethod::isDestructor</methodname> now also return &true; for
     <link linkend="object.construct">__construct()</link> and
     <link linkend="object.destruct">__destruct()</link> methods of interfaces.
     Previously, this would only be true for methods of classes and traits.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionType::isBuiltin</methodname> method has been moved to
     <classname>ReflectionNamedType</classname>. <classname>ReflectionUnionType</classname> does not
     have it.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated <constant>AI_IDN_ALLOW_UNASSIGNED</constant> and
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> <parameter>flags</parameter> for
     <function>socket_addrinfo_lookup</function> have been removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> now specifies a method signature. Inheriting classes
     implementing this method will now have to use a compatible method signature.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> and
     <methodname>SplQueue::enqueue</methodname> now return <type>void</type> instead of &true;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> will now always throw a
     <classname>TypeError</classname> on invalid arguments, therefore the second argument
     <parameter>do_throw</parameter> is ignored and a notice will be emitted if it is set to &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> is now an <interfacename>IteratorAggregate</interfacename>
     and not an <interfacename>Iterator</interfacename>.
     <methodname>SplFixedArray::rewind</methodname>, <methodname>SplFixedArray::current</methodname>,
     <methodname>SplFixedArray::key</methodname>, <methodname>SplFixedArray::next</methodname>, and
     <methodname>SplFixedArray::valid</methodname> have been removed. In their place,
     <methodname>SplFixedArray::getIterator</methodname> has been added. Any code which uses explicit
     iteration over SplFixedArray must now obtain an
     <interfacename>Iterator</interfacename> through
     <methodname>SplFixedArray::getIterator</methodname>. This means that
     <classname>SplFixedArray</classname> is now safe to use in nested loops.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> will no longer evaluate string arguments, instead they will be
     treated like any other argument. <code>assert($a == $b)</code> should be used instead of
     <code>assert('$a == $b')</code>. The <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> ini directive and the
     <constant>ASSERT_QUIET_EVAL</constant> constant have also been removed, as they would no longer
     have any effect.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> can no longer be used without specifying a result array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="filters.string.strip_tags">string.strip_tags</link> filter has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument of <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>strchr</function>, <function>strrchr</function>, and
     <function>stristr</function> will now always be interpreted as a string. Previously non-string
     needles were interpreted as an ASCII code point. An explicit call to <function>chr</function> can
     be used to restore the previous behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument for <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>stristr</function> and <function>strrchr</function> can
     now be empty.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>substr</function>,
     <function>substr_count</function>, <function>substr_compare</function>, and
     <function>iconv_substr</function> can now be &null;. &null; values will behave as if no length
     argument was provided and will therefore return the remainder of the string instead of an empty
     string.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>array_splice</function> can now be
     &null;. &null; values will behave identically to omitting the argument, thus removing everything
     from the <parameter>offset</parameter> to the end of the array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>args</parameter> argument of <function>vsprintf</function>,
     <function>vfprintf</function>, and <function>vprintf</function> must now be an array. Previously
     any type was accepted.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>'salt'</literal> option of <function>password_hash</function> is no longer
     supported. If the <literal>'salt'</literal> option is used a warning is generated, the provided
     salt is ignored, and a generated salt is used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     The <function>quotemeta</function> function will now return an empty string if an empty string
     was passed. Previously &false; was returned.
    </para>
   </listitem>
   <listitem>
    <para>
     The following functions have been removed:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>implode</function> with parameters in a reverse order <code>($pieces,
     $glue)</code> is no longer supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> will now distinguish absent and empty queries and fragments:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      Previously all cases resulted in query and fragment being &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> and <function>debug_zval_dump</function> will now print
     floating-point numbers using <link linkend="ini.serialize-precision">serialize_precision</link>
     rather than <link linkend="ini.precision">precision</link>. In a default configuration, this
     means that floating-point numbers are now printed with full accuracy by these debugging
     functions.
    </para>
   </listitem>
   <listitem>
    <para>
     If the array returned by <link linkend="object.sleep">__sleep()</link> contains non-existing
     properties, these are now silently ignored. Previously, such properties would have been
     serialized as if they had the value &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     The default locale on startup is now always <literal>"C"</literal>. No locales are inherited from
     the environment by default. Previously, <constant>LC_ALL</constant> was set to
     <literal>"C"</literal>, while <constant>LC_CTYPE</constant> was inherited from the environment.
     However, some functions did not respect the inherited locale without an explicit
     <function>setlocale</function> call. An explicit <function>setlocale</function> call is now
     always required if a locale component should be changed from the default.
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated DES fallback in <function>crypt</function> has been removed. If an unknown salt
     format is passed to <function>crypt</function>, the function will fail with <literal>*0</literal>
     instead of falling back to a weak DES hash now.
    </para>
   </listitem>
   <listitem>
    <para>
     Specifying out of range rounds for SHA256/SHA512 <function>crypt</function> will now fail with
     <literal>*0</literal> instead of clamping to the closest limit. This matches glibc behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The result of sorting functions may have changed, if the array contains elements that compare as
     equal.
    </para>
   </listitem>
   <listitem>
    <para>
     Any functions accepting callbacks that are not explicitly specified to accept parameters by
     reference will now warn if a callback with reference parameters is used. Examples include
     <function>array_filter</function> and <function>array_reduce</function>. This was already the
     case for most, but not all, functions previously.
    </para>
   </listitem>
   <listitem>
    <para>
     The HTTP stream wrapper as used by functions like <function>file_get_contents</function>
     now advertises HTTP/1.1 rather than HTTP/1.0 by default. This does not change the behavior of the
     client, but may cause servers to respond differently. To retain the old behavior, set the
     <literal>'protocol_version'</literal> stream context option, e.g.
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>crypt</function> without an explicit salt is no longer supported. If you would
     like to produce a strong hash with an auto-generated salt, use
     <function>password_hash</function> instead.
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>, <function>mb_substr</function>, <function>iconv_substr</function> and
    <function>grapheme_substr</function> now consistently clamp out-of-bounds offsets to the string
    boundary. Previously, &false; was returned instead of the empty string in some cases.
    </para>
   </listitem>
   <listitem>
    <para>
     On Windows, the program execution functions (<function>proc_open</function>, <function>exec</function>,
     <function>popen</function> etc.) using the shell, now consistently execute <command>%comspec% /s
     /c "$commandline"</command>, which has the same effect as executing
     <command>$commandline</command> (without additional quotes).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     The <parameter>auto_release</parameter> parameter of <function>sem_get</function> was changed to
     accept bool values rather than int.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     The <parameter>use_include_path</parameter> parameter, which was not used internally, has been
     removed from <function>tidy_repair_string</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> and <methodname>tidy::repairFile</methodname> became
     static methods.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>T_COMMENT</literal> tokens will no longer include a trailing newline. The newline will
     instead be part of a following <literal>T_WHITESPACE</literal> token. It should be noted that
     <literal>T_COMMENT</literal> is not always followed by whitespace, it may also be followed by
     <literal>T_CLOSE_TAG</literal> or end-of-file.
    </para>
   </listitem>
   <listitem>
    <para>
     Namespaced names are now represented using the <literal>T_NAME_QUALIFIED</literal>
     (<code>Foo\Bar</code>), <literal>T_NAME_FULLY_QUALIFIED</literal> (<code>\Foo\Bar</code>) and
     <literal>T_NAME_RELATIVE</literal> (<code>namespace\Foo\Bar</code>) tokens.
     <literal>T_NS_SEPARATOR</literal> is only used for standalone namespace separators, and only
     syntactially valid in conjunction with group use declarations.
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> and <methodname>XMLReader::xml</methodname> are now
   static methods. They can still be called as instance methods, but inheriting classes need to declare them
   as static if they override these methods.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   The XML-RPC extension has been moved to PECL and is no longer part of the PHP
   distribution.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> has been removed (this name was a typo). Use
   <constant>ZipArchive::OPSYS_CPM</constant> instead.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> foi removido.
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> não é mais 
     desabilitado automaticamente para o <literal>Content-Type: image/*</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Pacotes de teste para PHP no Windows</title>

  <para>
   The test runner has been renamed from <filename>run-test.php</filename> to
   <filename>run-tests.php</filename>, to match its name in php-src.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
